<?xml version="1.0" encoding="UTF-8"?>

<!-- NOTE: Use xml2rfc -n switch to avoid irrelevant DTD errors for now. -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
    <!ENTITY rfc2119 PUBLIC ''
      'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
]>

<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<?rfc toc="yes" ?>
<?rfc symrefs="yes" ?>
<?rfc sortrefs="yes"?>
<?rfc iprnotified="no" ?>

<!-- FIXME: next attribute should actually be "yes", temporarily disbled due
     to an annoying "missing Normative/Informative References" error message -->
<?rfc strict="no" ?>

<rfc category="info" ipr="noDerivativesTrust200902" docName="LSCP 1.7">
    <front>
        <title>LinuxSampler Control Protocol</title>
        <author initials='C.S.' surname="Schoenebeck" fullname='C.
Schoenebeck' role="editor">
            <organization>
                LinuxSampler.org
            </organization>
            <address>
                <postal>
                    <street>Crudebyte Engineering</street>
                    <street>Hofgartenstr. 3</street>
<!--                    <code>74081</code> -->
                    <city>74189 Weinsberg</city>
                    <country>Germany</country>
                </postal>
                <phone>+49 7134 911614</phone>
                <email>cuse@users.sf.net</email>
            </address>
        </author>
        <date month="March" year="2019"/>
        <workgroup>LinuxSampler Developers</workgroup>
        <keyword>LSCP</keyword>
        <abstract>
            <t>The LinuxSampler Control Protocol (LSCP) is an
            application-level protocol primarily intended for local and
            remote controlling the LinuxSampler backend application, which is a
            sophisticated server-like console application essentially playing
            back audio samples and manipulating the samples in real time to
            certain extent.</t>
	</abstract>
    </front>

    <middle>
        <section title="Requirements notation">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in <xref target="RFC2119"/>.</t>

            <t>This protocol is always case-sensitive if not explicitly
            claimed the opposite.</t>

            <t>In examples, "C:" and "S:" indicate lines sent by the client
            (front-end) and server (LinuxSampler) respectively. Lines in
            examples must be interpreted as every line being CRLF
            terminated (carriage return character followed by line feed
            character as defined in the ASCII standard <xref target="RFC20"/>),
            thus the following example:</t>

            <t>
                <list>
                    <t>C: "some line"</t>
                    <t>&nbsp;&nbsp;&nbsp;"another line"</t>
                </list>
            </t>

            <t>must actually be interpreted as client sending the following
            message:</t>

            <t>
                <list>
                    <t>"some line&lt;CR&gt;&lt;LF&gt;another
                    line&lt;CR&gt;&lt;LF&gt;"</t>
                </list>
            </t>

            <t>where &lt;CR&gt; symbolizes the carriage return character and
            &lt;LF&gt; the line feed character as defined in the ASCII
            standard.</t>

            <t>Due to technical reasons, messages can arbitrary be
            fragmented, means the following example:</t>

            <t>
                <list>
                    <t>S: "abcd"</t>
                </list>
            </t>

            <t>could also happen to be sent in three messages like in the
            following sequence scenario:</t>

            <t>
                <list style="symbols">
                    <t>server sending message "a"</t>
                    <t>followed by a delay (pause) with
                    arbitrary duration</t>
                    <t>followed by server sending message
                    "bcd&lt;CR&gt;"</t>
                    <t>again followed by a delay (pause) with arbitrary
                    duration</t>
                    <t>followed by server sending the message
                    "&lt;LF&gt;"</t>
                </list>
            </t>

            <t>where again &lt;CR&gt; and &lt;LF&gt; symbolize the carriage
            return and line feed characters respectively.</t>
        </section>

        <section title="Versioning of this specification" anchor="LSCP versioning">
            <t>LSCP will certainly be extended and enhanced by-and-by. Each official
            release of the LSCP specification will be tagged with a unique version
            tuple. The version tuple consists at least of a major and minor version
            number like:
            </t>
            <t>
                <list>
                    <t>"1.2"</t>
                </list>
            </t>
            <t>
            In this example the major version number would be "1" and the minor
            version number would be "2". Note that the version tuple might also
            have more than two elements. The major version number defines a
            group of backward compatible versions. That means a frontend is
            compatible to the connected sampler if and only if the LSCP versions
            to which each of the two parties complies to, match both of the
            following rules:
            </t>
            <t>Compatibility:</t>
            <t>
                <list style="numbers">
                    <t>The frontend's LSCP major version and the sampler's LSCP
                    major version are exactly equal.</t>
                    <t>The frontend's LSCP minor version is less or equal than
                    the sampler's LSCP minor version.</t>
                </list>
            </t>
            <t>
            Compatibility can only be claimed if both rules are true.
            The frontend can use the
            <xref target="GET SERVER INFO">"GET SERVER INFO"</xref> command to
            get the version of the LSCP specification the sampler complies with.
            </t>
        </section>

        <section title="Introduction">
            <t>LinuxSampler is a so called software sampler application
            capable to playback audio samples from a computer's Random
            Access Memory (RAM) as well as directly streaming it from disk.
            LinuxSampler is designed to be modular. It provides several so
            called "sampler engines" where each engine is specialized for a
            certain purpose. LinuxSampler has virtual channels which will be
            referred in this document as "sampler channels". The channels
            are in such way virtual as they can be connected to an
            arbitrary MIDI input method and arbitrary MIDI channel (e.g.
            sampler channel 17 could be connected to an ALSA sequencer
            device 64:0 and listening to MIDI channel 1 there). Each sampler
            channel will be associated with an instance of one of the available
            sampler engines (e.g. GigEngine, DLSEngine). The audio output of
            each sampler channel can be routed to an arbitrary audio output
            method (ALSA / JACK) and an arbitrary audio output channel
            there.</t>
        </section>

        <section title="Focus of this protocol">
            <t>Main focus of this protocol is to provide a way to configure
            a running LinuxSampler instance and to retrieve information
            about it. The focus of this protocol is not to provide a way to
            control synthesis parameters or even to trigger or release
            notes. Or in other words; the focus are those functionalities
            which are not covered by MIDI or which may at most be handled
            via MIDI System Exclusive Messages.</t>
        </section>

        <section title="Communication Overview">
            <t>There are two distinct methods of communication between a
            running instance of LinuxSampler and one or more control
            applications, so called "front-ends": a simple request/response
            communication method used by the clients to give commands to the
            server as well as to inquire about server's status and a
            subscribe/notify communication method used by the client to
            subscribe to and receive notifications of certain events as they
            happen on the server. The latter needs more effort to be
            implemented in the front-end application. The two communication
            methods will be described next.</t>

            <section title="Request/response communication method">
                <t>This simple communication method is based on
                <xref target="RFC793">TCP</xref>. The
                front-end application establishes a TCP connection to the
                LinuxSampler instance on a certain host system. Then the
                front-end application will send certain ASCII based commands
                as defined in this document (every command line must be CRLF
                terminated - see "Conventions used in this document" at the
                beginning of this document) and the LinuxSampler application
                will response after a certain process time with an
                appropriate ASCII based answer, also as defined in this
                document. So this TCP communication is simply based on query
                and answer paradigm. That way LinuxSampler is only able to
                answer on queries from front-ends, but not able to
                automatically send messages to the client if it's not asked
                to. The fronted should not reconnect to LinuxSampler for
                every single command, instead it should keep the connection
                established and simply resend message(s) for subsequent
                commands. To keep information in the front-end up-to-date
                the front-end has to periodically send new requests to get
                the current information from the LinuxSampler instance. This
                is often referred to as "polling". While polling is simple
                to implement and may be OK to use in some cases, there may
                be disadvantages to polling such as network traffic overhead
                and information being out of date.
                It is possible for a client or several clients to open more
                than one connection to the server at the same time. It is
                also possible to send more than one request to the server
                at the same time but if those requests are sent over the
                same connection server MUST execute them sequentially. Upon
                executing a request server will produce a result set and
                send it to the client. Each and every request made by the
                client MUST result in a result set being sent back to the
                client. No other data other than a result set may be sent by
                a server to a client. No result set may be sent to a client
                without the client sending request to the server first. On
                any particular connection, result sets MUST be sent in their
                entirety without being interrupted by other result sets. If
                several requests got queued up at the server they MUST be
                processed in the order they were received and result sets
                MUST be sent back in the same order.</t>

                <section title="Result format">
                    <t>Result set could be one of the following types:</t>
                    <t>
                        <list style="numbers">
                            <t>Normal</t>
                            <t>Warning</t>
                            <t>Error</t>
                        </list>
                    </t>
                    <t>Warning and Error result sets MUST be single line and
                    have the following format:</t>
                    <t>
                        <list style="symbols">
                   <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;"</t>
                   <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;"</t>
                        </list>
                    </t>
                    <t>Where &lt;warning-code&gt; and &lt;error-code&gt; are
                    numeric unique identifiers of the warning or error and
                    &lt;warning-message&gt; and &lt;error-message&gt; are
                    human readable descriptions of the warning or error
                    respectively.</t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "LOAD INSTRUMENT '/home/me/Boesendorfer24bit.gig" 0 0</t>
                            <t>S: "WRN:32:This is a 24 bit patch which is not supported natively yet."</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA EAR"</t>
                            <t>S: "ERR:3456:Audio output driver 'ALSA' does not have a parameter 'EAR'."</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DEVICE INFO 123456"</t>
                            <t>S: "ERR:9:There is no audio output device with index 123456."</t>
                        </list>
                    </t>
                    <t>Normal result sets could be:</t>
                    <t>
                        <list style="numbers">
                            <t>Empty</t>
                            <t>Single line</t>
                            <t>Multi-line</t>
                        </list>
                    </t>
                    <t> Empty result set is issued when the server only
                    needed to acknowledge the fact that the request was
                    received and it was processed successfully and no
                    additional information is available. This result set has
                    the following format:</t>
                    <t>
                        <list>
                            <t>"OK"</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET AUDIO_OUTPUT_DEVICE_PARAMETER 0 CHANNELS=4"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>Single line result sets are command specific. One
                    example of a single line result set is an empty line.
                    Multi-line result sets are command specific and may
                    include one or more lines of information. They MUST
                    always end with the following line:</t>
                    <t>
                        <list>
                            <t>"."</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DEVICE INFO 0"</t>
                            <t>S: "DRIVER: ALSA"</t>
                            <t>&nbsp;&nbsp;&nbsp;"CHANNELS: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"SAMPLERATE: 44100"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ACTIVE: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FRAGMENTS: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FRAGMENTSIZE: 128"</t>
                            <t>&nbsp;&nbsp;&nbsp;"CARD: '0,0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                    <t>In addition to above mentioned formats, warnings and
                    empty result sets MAY be indexed. In this case, they
                    have the following formats respectively:</t>
                    <t>
                        <list style="symbols">
                            <t>"WRN[&lt;index&gt;]:&lt;warning-code&gt;:&lt;warning-message&gt;"</t>
                            <t>"OK[&lt;index&gt;]"</t>
                        </list>
                    </t>
                    <t>where &lt;index&gt; is command specific and is used
                    to indicate channel number that the result set was
                    related to or other integer value.</t>
                    <t>Each line of the result set MUST end with
                    &lt;CRLF&gt;.</t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD CHANNEL"</t>
                            <t>S: "OK[12]"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "CREATE AUDIO_OUTPUT_DEVICE ALSA SAMPLERATE=96000"</t>
                            <t>S: "WRN[0]:32:Sample rate not supported, using 44100 instead."</t>
                        </list>
                    </t>
                </section>
            </section>
            <section title="Subscribe/notify communication method">
                <t>This more sophisticated communication method is actually
                only an extension of the simple request/response
                communication method. The front-end still uses a TCP
                connection and sends the same commands on the TCP
                connection. Two extra commands are SUBSCRIBE and UNSUBSCRIBE
                commands that allow a client to tell the server that it is
                interested in receiving notifications about certain events
                as they happen on the server. The SUBSCRIBE command has the
                following syntax:</t>

                <t>
                    <list>
                        <t>SUBSCRIBE &lt;event-id&gt;</t>
                    </list>
                </t>

                <t>where &lt;event-id&gt; will be replaced by the respective
                event that client wants to subscribe to. Upon receiving such
                request, server SHOULD respond with OK and start sending
                EVENT notifications when a given even has occurred to the
                front-end when an event has occurred. It MAY be possible
                certain events may be sent before OK response during real
                time nature of their generation. Event messages have the
                following format:</t>

                <t>
                    <list>
                        <t>NOTIFY:&lt;event-id&gt;:&lt;custom-event-data&gt;</t>
                    </list>
                </t>

                <t>where &lt;event-id&gt; uniquely identifies the event that
                has occurred and &lt;custom-event-data&gt; is event
                specific.</t>

                <t>Several rules must be followed by the server when
                generating events:</t>

                <t>
                    <list style="numbers">
                        <t>Events MUST NOT be sent to any client who has not
                        issued an appropriate SUBSCRIBE command.</t>
                        <t>Events MUST only be sent using the same
                        connection that was used to subscribe to them.</t>
                        <t>When response is being sent to the client, event
                        MUST be inserted in the stream before or after the
                        response, but NOT in the middle. Same is true about
                        the response. It should never be inserted in the
                        middle of the event message as well as any other
                        response.</t>
                    </list>
                </t>

                <t>If the client is not interested in a particular event
                anymore it MAY issue UNSUBSCRIBE command using the following
                syntax:</t>

                <t>
                    <list>
                        <t>UNSUBSCRIBE &lt;event-id&gt;</t>
                    </list>
                </t>

                <t>where &lt;event-id&gt; will be replace by the respective
                event that client is no longer interested in receiving. For
                a list of supported events see <xref target="events" />.</t>

                <t>Example: the fill states of disk stream buffers have
                changed on sampler channel 4 and the LinuxSampler instance
                will react by sending the following message to all clients
                who subscribed to this event:</t>

                <t>
                    <list>
                        <t>NOTIFY:CHANNEL_BUFFER_FILL:4 [35]62%,[33]80%,[37]98%</t>
                    </list>
                </t>

                <t>Which means there are currently three active streams on
                sampler channel 4, where the stream with ID "35" is filled
                by 62%, stream with ID 33 is filled by 80% and stream with
                ID 37 is filled by 98%.</t>

                <t>Clients may choose to open more than one connection to
                the server and use some connections to receive notifications
                while using other connections to issue commands to the
                back-end. This is entirely legal and up to the
                implementation. This does not change the protocol in any way
                and no special restrictions exist on the server to allow or
                disallow this or to track what connections belong to what
                front-ends. Server will listen on a single port, accept
                multiple connections and support protocol described in this
                specification in it's entirety on this single port on each
                connection that it accepted.</t>

                <t>Due to the fact that TCP is used for this communication,
                dead peers will be detected automatically by the OS TCP
                stack. While it may take a while to detect dead peers if no
                traffic is being sent from server to client (TCP keep-alive
                timer is set to 2 hours on many OSes) it will not be an
                issue here as when notifications are sent by the server,
                dead client will be detected quickly.</t>

                <t>When connection is closed for any reason server MUST
                forget all subscriptions that were made on this connection.
                If client reconnects it MUST resubscribe to all events that
                it wants to receive.</t>

            </section>
        </section>

        <section title="Description for control commands" anchor="control_commands">
            <t>This chapter will describe the available control commands
            that can be sent on the TCP connection in detail. Some certain
            commands (e.g. <xref target="GET CHANNEL INFO">"GET CHANNEL INFO"</xref>
            or <xref target="GET ENGINE INFO">"GET ENGINE INFO"</xref>) lead to
            multiple-line responses. In this case LinuxSampler signals the
            end of the response by a "." (single dot) line.</t>

            <section title="Ignored lines and comments">
                <t>White lines, that is lines which only contain space and
                tabulator characters, and lines that start with a "#"
                character are ignored, thus it's possible for example to
                group commands and to place comments in a LSCP script
                file.</t>
            </section>

            <section title="Configuring audio drivers">
                <t>Instances of drivers in LinuxSampler are called devices.
                You can use multiple audio devices simultaneously, e.g. to
                output the sound of one sampler channel using the ALSA audio
                output driver, and on another sampler channel you might want
                to use the JACK audio output driver. For particular audio
                output systems it's also possible to create several devices
                of the same audio output driver, e.g. two separate ALSA
                audio output devices for using two different sound cards at
                the same time. This chapter describes all commands to
                configure LinuxSampler's audio output devices and their
                parameters.</t>

                <t>Instead of defining commands and parameters for each
                driver individually, all possible parameters, their meanings
                and possible values have to be obtained at runtime. This
                makes the protocol a bit abstract, but has the advantage,
                that front-ends can be written independently of what drivers
                are currently implemented and what parameters these drivers
                are actually offering. This means front-ends can even handle
                drivers which are implemented somewhere in future without
                modifying the front-end at all.</t>

                <t>Note: examples in this chapter showing particular
                parameters of drivers are not meant as specification of the
                drivers' parameters. Driver implementations in LinuxSampler
                might have complete different parameter names and meanings
                than shown in these examples or might change in future, so
                these examples are only meant for showing how to retrieve
                what parameters drivers are offering, how to retrieve their
                possible values, etc.</t>

                <section title="Getting amount of available audio output drivers" anchor="GET AVAILABLE_AUDIO_OUTPUT_DRIVERS" lscp_cmd="true">
                    <t>Use the following command to get the number of
                    audio output drivers currently available for the
                    LinuxSampler instance:</t>
                    <t>
                        <list>
                            <t>GET AVAILABLE_AUDIO_OUTPUT_DRIVERS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending the
                            number of audio output drivers.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AVAILABLE_AUDIO_OUTPUT_DRIVERS"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all available audio output drivers" anchor="LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS" lscp_cmd="true">
                    <t>Use the following command to list all audio output
                    drivers currently available for the LinuxSampler
                    instance:</t>
                    <t>
                        <list>
                            <t>LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending comma
                            separated character strings, each symbolizing an
                            audio output driver.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"</t>
                            <t>S: "ALSA,JACK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about a specific audio
                output driver" anchor="GET AUDIO_OUTPUT_DRIVER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information
                    about a specific audio output driver:</t>
                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_DRIVER INFO
                             &lt;audio-output-driver&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-output-driver&gt; is the name of the
                    audio output driver, returned by the
                    <xref target="LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS">"LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"</xref> command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a
                            &lt;CRLF&gt; separated list. Each answer line
                            begins with the information category name
                            followed by a colon and then a space character
                            &lt;SP&gt; and finally the info character string
                            to that info category. At the moment the
                            following information categories are
                            defined:</t>

                            <t>
                              <list>
                                  <t>DESCRIPTION -
                                    <list>
                                      <t> character string describing the
                                      audio output driver</t>
                                    </list>
                                  </t>

                                  <t>VERSION -
                                    <list>
                                      <t>character string reflecting the
                                      driver's version</t>
                                    </list>
                                  </t>

                                  <t>PARAMETERS -
                                    <list>
                                      <t>comma separated list of all
                                      parameters available for the given
                                      audio output driver, at least
                                      parameters 'channels', 'samplerate'
                                      and 'active' are offered by all audio
                                      output drivers</t>
                                    </list>
                                  </t>
                              </list>
                            </t>

                            <t>The mentioned fields above don't have to be
                            in particular order.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                      <list>
                          <t>C: "GET AUDIO_OUTPUT_DRIVER INFO ALSA"</t>
                          <t>S: "DESCRIPTION: Advanced Linux Sound
                          Architecture"</t>
                          <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.0"</t>
                          <t>&nbsp;&nbsp;&nbsp;"PARAMETERS:
                          DRIVER,CHANNELS,SAMPLERATE,ACTIVE,FRAGMENTS,
                          FRAGMENTSIZE,CARD"</t>
                          <t>&nbsp;&nbsp;&nbsp;"."</t>
                      </list>
                    </t>
                </section>

                <section title="Getting information about specific audio
                output driver parameter" anchor="GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information
                    about a  specific audio output driver parameter:</t>
                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO &lt;audio&gt; &lt;prm&gt; [&lt;deplist&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;audio&gt; is the name of the audio output
                    driver as returned by the <xref target="LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS">
                    "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"</xref> command,
                    &lt;prm&gt; a specific parameter name for which information should be
                    obtained (as returned by the
                    <xref target="GET AUDIO_OUTPUT_DRIVER INFO">"GET AUDIO_OUTPUT_DRIVER INFO"</xref> command) and
                    &lt;deplist&gt; is an optional list of parameters on which the sought
                    parameter &lt;prm&gt; depends on, &lt;deplist&gt; is a list of key-value
                    pairs in form of "key1=val1 key2=val2 ...", where character string values
                    are encapsulated into apostrophes ('). Arguments given with &lt;deplist&gt;
                    which are not dependency parameters of &lt;prm&gt; will be ignored, means
                    the front-end application can simply put all parameters into &lt;deplist&gt;
                    with the values already selected by the user.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a
                            &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and
                            finally
                            the info character string to that info category. There are
                            information which is always returned, independently of the
                            given driver parameter and there are optional information
                            which is only shown dependently to given driver parameter. At
                            the moment the following information categories are defined:</t>
                        </list>
                    </t>

                    <t>
                        <list>
                            <t>TYPE -
                              <list>
                                <t>either "BOOL" for boolean value(s) or
                                "INT" for integer
                                value(s) or "FLOAT" for dotted number(s) or "STRING" for
                                character string(s)
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>DESCRIPTION -
                              <list>
                                <t>arbitrary text describing the purpose of the parameter
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>MANDATORY -
                              <list>
                                <t>either true or false, defines if this parameter must be
                                given when the device is to be created with the
                                <xref target="CREATE AUDIO_OUTPUT_DEVICE">'CREATE AUDIO_OUTPUT_DEVICE'</xref>
                                command (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>FIX -
                              <list>
                                <t>either true or false, if false then this parameter can
                                be changed at any time, once the device is created by
                                the <xref target="CREATE AUDIO_OUTPUT_DEVICE">'CREATE AUDIO_OUTPUT_DEVICE'</xref>
                                command (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>MULTIPLICITY -
                              <list>
                                <t>either true or false, defines if this parameter allows
                                only one value or a list of values, where true means
                                multiple values and false only a single value allowed
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>DEPENDS -
                              <list>
                                <t>comma separated list of parameters this parameter depends
                                on, means the values for fields 'DEFAULT', 'RANGE_MIN',
                                'RANGE_MAX' and 'POSSIBILITIES' might depend on these
                                listed parameters, for example assuming that an audio
                                driver (like the ALSA driver) offers parameters 'card'
                                and 'samplerate' then parameter 'samplerate' would
                                depend on 'card' because the possible values for
                                'samplerate' depends on the sound card which can be
                                chosen by the 'card' parameter
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>DEFAULT -
                              <list>
                                <t>reflects the default value for this parameter which is
                                used when the device is created and not explicitly
                                given with the <xref target="CREATE AUDIO_OUTPUT_DEVICE">
                                'CREATE AUDIO_OUTPUT_DEVICE'</xref> command,
                                in case of MULTIPLCITY=true, this is a comma separated
                                list, that's why character strings are encapsulated into
                                apostrophes (')
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>RANGE_MIN -
                              <list>
                                <t>defines lower limit of the allowed value range for this
                                parameter, can be an integer value as well as a dotted
                                number, this parameter is often used in conjunction
                                with RANGE_MAX, but may also appear without
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>RANGE_MAX -
                              <list>
                                <t>defines upper limit of the allowed value range for this
                                parameter, can be an integer value as well as a dotted
                                number, this parameter is often used in conjunction with
                                RANGE_MIN, but may also appear without
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>POSSIBILITIES -
                              <list>
                                <t>comma separated list of possible values for this
                                parameter, character strings are encapsulated into
                                apostrophes
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA CARD"</t>
                            <t>S: "DESCRIPTION: sound card to be used"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: STRING"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MANDATORY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEFAULT: '0,0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"POSSIBILITIES: '0,0','1,0','2,0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA SAMPLERATE"</t>
                            <t>S: "DESCRIPTION: output sample rate in Hz"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: INT"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MANDATORY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEPENDS: card"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEFAULT: 44100"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DRIVER_PARAMETER INFO ALSA SAMPLERATE CARD='0,0'"</t>
                            <t>S: "DESCRIPTION: output sample rate in Hz"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: INT"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MANDATORY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEPENDS: card"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEFAULT: 44100"</t>
                            <t>&nbsp;&nbsp;&nbsp;"RANGE_MIN: 22050"</t>
                            <t>&nbsp;&nbsp;&nbsp;"RANGE_MAX: 96000"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Creating an audio output device" anchor="CREATE AUDIO_OUTPUT_DEVICE" lscp_cmd="true">
                    <t>Use the following command to create a new audio output device for  the desired audio output system:</t>

                    <t>
                        <list>
                            <t>CREATE AUDIO_OUTPUT_DEVICE &lt;audio-output-driver&gt; [&lt;param-list&gt;]</t>
                        </list>
                    </t>

                    <t>Where &lt;audio-output-driver&gt; should be replaced by the desired audio
                    output system as returned by the
                    <xref target="LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS">"LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"</xref>
                    command and &lt;param-list&gt; by an optional list of driver
                    specific parameters in form of "key1=val1 key2=val2 ...", where
                    character string values should be encapsulated into apostrophes (').
                    Note that there might be drivers which require parameter(s) to be
                    given with this command. Use the previously described commands in
                    this chapter to get this information.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;device-id&gt;]" -
                                <list>
                                    <t>in case the device was successfully created, where
                                    &lt;device-id&gt; is the numerical ID of the new device</t>
                                </list>
                            </t>
                            <t>"WRN[&lt;device-id&gt;]:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the device was created successfully, where
                                    &lt;device-id&gt; is the numerical ID of the new device, but there
                                    are noteworthy issue(s) related (e.g. sound card doesn't
                                    support given hardware parameters and the driver is using
                                    fall-back values), providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "CREATE AUDIO_OUTPUT_DEVICE ALSA"</t>
                            <t>S: "OK[0]"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "CREATE AUDIO_OUTPUT_DEVICE ALSA CARD='2,0' SAMPLERATE=96000"</t>
                            <t>S: "OK[1]"</t>
                        </list>
                    </t>
                </section>

                <section title="Destroying an audio output device" anchor="DESTROY AUDIO_OUTPUT_DEVICE" lscp_cmd="true">
                    <t>Use the following command to destroy a created output device:</t>
                    <t>
                        <list>
                            <t>DESTROY AUDIO_OUTPUT_DEVICE &lt;device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; should be replaced by the numerical ID of the
                    audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the device was successfully destroyed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the device was destroyed successfully, but there are
                                    noteworthy issue(s) related (e.g. an audio over ethernet
                                    driver was unloaded but the other host might not be
                                    informed about this situation), providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "DESTROY AUDIO_OUTPUT_DEVICE 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created audio output device count" anchor="GET AUDIO_OUTPUT_DEVICES">
                    <t>Use the following command to count all created audio output devices:</t>
                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_DEVICES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending the current number of all
                            audio output devices.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DEVICES"</t>
                            <t>S: "4"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created audio output device list" anchor="LIST AUDIO_OUTPUT_DEVICES" lscp_cmd="true">
                    <t>Use the following command to list all created audio output devices:</t>
                    <t>
                        <list>
                            <t>LIST AUDIO_OUTPUT_DEVICES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a comma separated list with
                            the numerical IDs of all audio output devices.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST AUDIO_OUTPUT_DEVICES"</t>
                            <t>S: "0,1,4,5"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting current settings of an audio output device" anchor="GET AUDIO_OUTPUT_DEVICE INFO" lscp_cmd="true">
                    <t>Use the following command to get current settings of a specific, created audio output device:</t>
                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_DEVICE INFO &lt;device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; should be replaced by numerical ID
                    of the audio output device as e.g. returned by the
                    <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref> command.</t>
                    <t>Possible Answers:</t>
                    <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                    Each answer line begins with the information category name
                    followed by a colon and then a space character &lt;SP&gt; and finally
                    the info character string to that info category. As some
                    parameters might allow multiple values, character strings are
                    encapsulated into apostrophes ('). At the moment the following
                    information categories are defined (independently of device):</t>
                    <t>
                        <list>
                            <t>DRIVER -
                                <list>
                                    <t>identifier of the used audio output driver, as also
                                    returned by the
                                    <xref target="LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS">
                                    "LIST AVAILABLE_AUDIO_OUTPUT_DRIVERS"</xref>
                                    command</t>
                                </list>
                            </t>
                            <t>CHANNELS -
                                <list>
                                    <t>amount of audio output channels this device currently
                                    offers</t>
                                </list>
                            </t>
                            <t>SAMPLERATE -
                                <list>
                                    <t>playback sample rate the device uses</t>
                                </list>
                            </t>
                            <t>ACTIVE -
                                <list>
                                    <t>either true or false, if false then the audio device is
                                    inactive and doesn't output any sound, nor do the
                                    sampler channels connected to this audio device render
                                    any audio</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular
                    order. The fields above are only those fields which are
                    returned by all audio output devices. Every audio output driver
                    might have its own, additional driver specific parameters (see
                    <xref target="GET AUDIO_OUTPUT_DRIVER INFO" />)
                    which are also returned by this command.</t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_DEVICE INFO 0"</t>
                            <t>S: "DRIVER: ALSA"</t>
                            <t>&nbsp;&nbsp;&nbsp;"CHANNELS: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"SAMPLERATE: 44100"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ACTIVE: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FRAGMENTS: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FRAGMENTSIZE: 128"</t>
                            <t>&nbsp;&nbsp;&nbsp;"CARD: '0,0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>


                <section title="Changing settings of audio output devices" anchor="SET AUDIO_OUTPUT_DEVICE_PARAMETER" lscp_cmd="true">
                    <t>Use the following command to alter a specific setting of a created audio output device:</t>
                    <t>
                        <list>
                            <t>SET AUDIO_OUTPUT_DEVICE_PARAMETER &lt;device-id&gt; &lt;key&gt;=&lt;value&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; should be replaced by the numerical ID of the
                    audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command, &lt;key&gt; by the name of the parameter to change
                    and &lt;value&gt; by the new value for this parameter.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case setting was successfully changed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case setting was changed successfully, but there are
                                    noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET AUDIO_OUTPUT_DEVICE_PARAMETER 0 FRAGMENTSIZE=128"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about an audio channel" anchor="GET AUDIO_OUTPUT_CHANNEL INFO" lscp_cmd="true">
                    <t>Use the following command to get information about an audio channel:</t>
                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_CHANNEL INFO &lt;device-id&gt; &lt;audio-chan&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; is the numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command and &lt;audio-chan&gt; the audio channel number.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. At the moment
                            the following information categories are defined:</t>

                            <t>
                                <list>
                                    <t>NAME -
                                        <list>
                                            <t>arbitrary character string naming the channel, which
                                            doesn't have to be unique (always returned by all audio channels)</t>
                                        </list>
                                    </t>
                                    <t>IS_MIX_CHANNEL -
                                        <list>
                                            <t>either true or false, a mix-channel is not a real,
                                            independent audio channel, but a virtual channel which
                                            is mixed to another real channel, this mechanism is
                                            needed for sampler engines which need more audio
                                            channels than the used audio system might be able to offer
                                            (always returned by all audio channels)</t>
                                        </list>
                                    </t>
                                    <t>MIX_CHANNEL_DESTINATION -
                                        <list>
                                            <t>numerical ID (positive integer including 0)
                                            which reflects the real audio channel (of the same audio
                                            output device) this mix channel refers to, means where
                                            the audio signal actually will be routed / added to
                                            (only returned in case the audio channel is mix channel)</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular
                    order. The fields above are only those fields which are
                    generally returned for the described cases by all audio
                    channels regardless of the audio driver. Every audio channel
                    might have its own, additional driver and channel specific
                    parameters.</t>

                    <t>Examples:</t>

                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 0"</t>
                            <t>S: "NAME: studio monitor left"</t>
                            <t>&nbsp;&nbsp;&nbsp;"IS_MIX_CHANNEL: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>

                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 1"</t>
                            <t>S: "NAME: studio monitor right"</t>
                            <t>&nbsp;&nbsp;&nbsp;"IS_MIX_CHANNEL: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                         </list>
                    </t>

                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_CHANNEL INFO 0 2"</t>
                            <t>S: "NAME: studio monitor left"</t>
                            <t>&nbsp;&nbsp;&nbsp;"IS_MIX_CHANNEL: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIX_CHANNEL_DESTINATION: 1"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>

                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_CHANNEL INFO 1 0"</t>
                            <t>S: "NAME: 'ardour (left)'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"IS_MIX_CHANNEL: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"JACK_BINDINGS: 'ardour:0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about specific audio channel parameter" anchor="GET AUDIO_OUTPUT_CHANNEL_PARAMETER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information about specific audio channel parameter:</t>

                    <t>
                        <list>
                            <t>GET AUDIO_OUTPUT_CHANNEL_PARAMETER INFO &lt;dev-id&gt; &lt;chan&gt; &lt;param&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;dev-id&gt; is the numerical ID of the audio output device as returned by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command, &lt;chan&gt; the audio channel number
                    and &lt;param&gt; a specific channel parameter name for which information should
                    be obtained (as returned by the <xref target="GET AUDIO_OUTPUT_CHANNEL INFO">
                    "GET AUDIO_OUTPUT_CHANNEL INFO"</xref> command).</t>
                    <t>Possible Answers:</t>

                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. There are
                            information which is always returned, independently of the
                            given channel parameter and there is optional information
                            which is only shown dependently to the given audio channel. At
                            the moment the following information categories are defined:</t>
                            <t>
                                <list>
                                    <t>TYPE -
                                        <list>
                                            <t>either "BOOL" for boolean value(s) or "INT" for integer
                                            value(s) or "FLOAT" for dotted number(s) or "STRING" for
                                            character string(s)
                                            (always returned)</t>
                                        </list>
                                    </t>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>arbitrary text describing the purpose of the parameter (always returned)</t>
                                        </list>
                                    </t>
                                    <t>FIX -
                                        <list>
                                            <t>either true or false, if true then this parameter is
                                            read only, thus cannot be altered
                                            (always returned)</t>
                                        </list>
                                    </t>
                                    <t>MULTIPLICITY -
                                        <list>
                                            <t>either true or false, defines if this parameter allows
                                            only one value or a list of values, where true means
                                            multiple values and false only a single value allowed
                                            (always returned)</t>
                                        </list>
                                    </t>
                                    <t>RANGE_MIN -
                                        <list>
                                            <t>defines lower limit of the allowed value range for this
                                            parameter, can be an integer value as well as a dotted
                                            number, usually used in conjunction with 'RANGE_MAX',
                                            but may also appear without
                                            (optionally returned, dependent to driver and channel
                                            parameter)</t>
                                        </list>
                                    </t>
                                    <t>RANGE_MAX -
                                        <list>
                                            <t>defines upper limit of the allowed value range for this
                                            parameter, can be an integer value as well as a dotted
                                            number, usually used in conjunction with 'RANGE_MIN',
                                            but may also appear without
                                            (optionally returned, dependent to driver and channel
                                            parameter)</t>
                                        </list>
                                    </t>
                                    <t>POSSIBILITIES -
                                        <list>
                                            <t>comma separated list of possible values for this
                                            parameter, character strings are encapsulated into
                                            apostrophes
                                            (optionally returned, dependent to driver and channel
                                            parameter)</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                            <t>The mentioned fields above don't have to be in particular order.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AUDIO_OUTPUT_CHANNEL_PARAMETER INFO 1 0 JACK_BINDINGS"</t>
                            <t>S: "DESCRIPTION: bindings to other JACK clients"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: STRING"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"POSSIBILITIES: 'PCM:0','PCM:1','ardour:0','ardour:1'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Changing settings of audio output channels" anchor="SET AUDIO_OUTPUT_CHANNEL_PARAMETER" lscp_cmd="true">
                    <t>Use the following command to alter a specific setting of an audio output channel:</t>
                    <t>
                        <list>
                            <t>SET AUDIO_OUTPUT_CHANNEL_PARAMETER &lt;dev-id&gt; &lt;chn&gt; &lt;key&gt;=&lt;value&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dev-id&gt; should be replaced by the numerical ID of the audio output device as returned by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command, &lt;chn&gt; by the audio channel number, &lt;key&gt; by the name of the
                    parameter to change and &lt;value&gt; by the new value for this parameter.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                   <t>in case setting was successfully changed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                   <t>in case setting was changed successfully, but there are
                                   noteworthy issue(s) related, providing an appropriate
                                   warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                   <t>in case it failed, providing an appropriate error code and
                                   error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET AUDIO_OUTPUT_CHANNEL PARAMETER 0 0 JACK_BINDINGS='PCM:0'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "SET AUDIO_OUTPUT_CHANNEL PARAMETER 0 0 NAME='monitor left'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Configuring MIDI input drivers">
                <t>Instances of drivers in LinuxSampler are called devices. You can use
                multiple MIDI devices simultaneously, e.g. to use MIDI over ethernet as
                MIDI input on one sampler channel and ALSA as MIDI input on another sampler
                channel. For particular MIDI input systems it's also possible to create
                several devices of the same MIDI input type. This chapter describes all
                commands to configure LinuxSampler's MIDI input devices and their parameters.</t>

                <t>Instead of defining commands and parameters for each driver individually,
                all possible parameters, their meanings and possible values have to be obtained
                at runtime. This makes the protocol a bit abstract, but has the advantage, that
                front-ends can be written independently of what drivers are currently implemented
                and what parameters these drivers are actually offering. This means front-ends can
                even handle drivers which are implemented somewhere in future without modifying
                the front-end at all.</t>

                <t>Commands for configuring MIDI input devices are pretty much the same as the
                commands for configuring audio output drivers, already described in the last
                chapter.</t>

                <t>Note: examples in this chapter showing particular parameters of drivers are
                not meant as specification of the drivers' parameters. Driver implementations in
                LinuxSampler might have complete different parameter names and meanings than shown
                in these examples or might change in future, so these examples are only meant for
                showing how to retrieve what parameters drivers are offering, how to retrieve their
                possible values, etc.</t>

                <section title="Getting amount of available MIDI input drivers" anchor="GET AVAILABLE_MIDI_INPUT_DRIVERS" lscp_cmd="true">
                    <t>Use the following command to get the number of
                    MIDI input drivers currently available for the
                    LinuxSampler instance:</t>
                    <t>
                        <list>
                            <t>GET AVAILABLE_MIDI_INPUT_DRIVERS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending the
                            number of available MIDI input drivers.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AVAILABLE_MIDI_INPUT_DRIVERS"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all available MIDI input drivers" anchor="LIST AVAILABLE_MIDI_INPUT_DRIVERS" lscp_cmd="true">
                    <t>Use the following command to list all MIDI input drivers currently available
                    for the LinuxSampler instance:</t>
                    <t>
                        <list>
                            <t>LIST AVAILABLE_MIDI_INPUT_DRIVERS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending comma separated character
                            strings, each symbolizing a MIDI input driver.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST AVAILABLE_MIDI_INPUT_DRIVERS"</t>
                            <t>S: "ALSA,JACK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about a specific MIDI input driver" anchor="GET MIDI_INPUT_DRIVER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information about a specific MIDI input driver:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_DRIVER INFO &lt;midi-input-driver&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;midi-input-driver&gt; is the name of the MIDI input driver as returned
                    by the <xref target="LIST AVAILABLE_MIDI_INPUT_DRIVERS">
                    "LIST AVAILABLE_MIDI_INPUT_DRIVERS"</xref> command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. At the moment
                            the following information categories are defined:</t>

                            <t>
                                <list>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>arbitrary description text about the MIDI input driver</t>
                                        </list>
                                    </t>
                                    <t>VERSION -
                                        <list>
                                            <t>arbitrary character string regarding the driver's version</t>
                                        </list>
                                    </t>
                                    <t>PARAMETERS -
                                        <list>
                                            <t>comma separated list of all parameters available for the given MIDI input driver</t>
                                        </list>
                                    </t>
                                </list>
                            </t>

                            <t>The mentioned fields above don't have to be in particular order.</t>
                        </list>
                    </t>

                    <t>Example:</t>

                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_DRIVER INFO ALSA"</t>
                            <t>S: "DESCRIPTION: Advanced Linux Sound Architecture"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"PARAMETERS: DRIVER,ACTIVE"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about specific MIDI input driver parameter" anchor="GET MIDI_INPUT_DRIVER_PARAMETER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information about a specific parameter of a specific MIDI input driver:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_DRIVER_PARAMETER INFO &lt;midit&gt; &lt;param&gt; [&lt;deplist&gt;]</t>
                        </list>
                    </t>

                    <t>Where &lt;midit&gt; is the name of the MIDI input driver as returned
                    by the <xref target="LIST AVAILABLE_MIDI_INPUT_DRIVERS">
                    "LIST AVAILABLE_MIDI_INPUT_DRIVERS"</xref> command, &lt;param&gt; a specific
                    parameter name for which information should be obtained (as returned by the
                    <xref target="GET MIDI_INPUT_DRIVER INFO">
                    "GET MIDI_INPUT_DRIVER INFO"</xref> command) and &lt;deplist&gt; is an optional list
                    of parameters on which the sought parameter &lt;param&gt; depends on,
                    &lt;deplist&gt; is a key-value pair list in form of "key1=val1 key2=val2 ...",
                    where character string values are encapsulated into apostrophes ('). Arguments
                    given with &lt;deplist&gt; which are not dependency parameters of &lt;param&gt;
                    will be ignored, means the front-end application can simply put all parameters
                    in &lt;deplist&gt; with the values selected by the user.</t>

                    <t>Possible Answers:</t>

                    <t>LinuxSampler will answer by sending a &lt;CRLF> separated list.
                    Each answer line begins with the information category name
                    followed by a colon and then a space character &lt;SP> and finally
                    the info character string to that info category. There is
                    information which is always returned, independent of the
                    given driver parameter and there is optional information
                    which is only shown dependent to given driver parameter. At
                    the moment the following information categories are defined:</t>

                    <t>
                        <list>
                            <t>TYPE -
                              <list>
                                <t>either "BOOL" for boolean value(s) or "INT" for integer
                                value(s) or "FLOAT" for dotted number(s) or "STRING" for
                                character string(s)
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>DESCRIPTION -
                              <list>
                                <t>arbitrary text describing the purpose of the parameter
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>MANDATORY -
                              <list>
                                <t>either true or false, defines if this parameter must be
                                given when the device is to be created with the
                                <xref target="CREATE MIDI_INPUT_DEVICE">
                                'CREATE MIDI_INPUT_DEVICE'</xref> command
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>FIX -
                              <list>
                                <t>either true or false, if false then this parameter can
                                be changed at any time, once the device is created by
                                the <xref target="CREATE MIDI_INPUT_DEVICE">
                                'CREATE MIDI_INPUT_DEVICE'</xref> command
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>MULTIPLICITY -
                              <list>
                                <t>either true or false, defines if this parameter allows
                                only one value or a list of values, where true means
                                multiple values and false only a single value allowed
                                (always returned, no matter which driver parameter)</t>
                              </list>
                            </t>

                            <t>DEPENDS -
                              <list>
                                <t>comma separated list of parameters this parameter depends
                                on, means the values for fields 'DEFAULT', 'RANGE_MIN',
                                'RANGE_MAX' and 'POSSIBILITIES' might depend on these
                                listed parameters, for example assuming that an audio
                                driver (like the ALSA driver) offers parameters 'card'
                                and 'samplerate' then parameter 'samplerate' would
                                depend on 'card' because the possible values for
                                'samplerate' depends on the sound card which can be
                                chosen by the 'card' parameter
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>DEFAULT -
                              <list>
                                <t>reflects the default value for this parameter which is
                                used when the device is created and not explicitly
                                given with the <xref target="CREATE MIDI_INPUT_DEVICE">
                                'CREATE MIDI_INPUT_DEVICE'</xref> command,
                                in case of MULTIPLCITY=true, this is a comma separated
                                list, that's why character strings are encapsulated into
                                apostrophes (')
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>RANGE_MIN -
                              <list>
                                <t>defines lower limit of the allowed value range for this
                                parameter, can be an integer value as well as a dotted
                                number, this parameter is often used in conjunction
                                with RANGE_MAX, but may also appear without
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>RANGE_MAX -
                              <list>
                                <t>defines upper limit of the allowed value range for this
                                parameter, can be an integer value as well as a dotted
                                number, this parameter is often used in conjunction with
                                RANGE_MIN, but may also appear without
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>

                            <t>POSSIBILITIES -
                              <list>
                                <t>comma separated list of possible values for this
                                parameter, character strings are encapsulated into
                                apostrophes
                                (optionally returned, dependent to driver parameter)</t>
                              </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_DRIVER_PARAMETER INFO ALSA ACTIVE"</t>
                            <t>S: "DESCRIPTION: Whether device is enabled"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: BOOL"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MANDATORY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEFAULT: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Creating a MIDI input device" anchor="CREATE MIDI_INPUT_DEVICE" lscp_cmd="true">
                    <t>Use the following command to create a new MIDI input device for  the desired MIDI input system:</t>
                    <t>
                        <list>
                            <t>CREATE MIDI_INPUT_DEVICE &lt;midi-input-driver&gt; [&lt;param-list&gt;]</t>
                        </list>
                    </t>

                    <t>Where &lt;midi-input-driver&gt; should be replaced by the desired MIDI input system as returned
                    by the <xref target="LIST AVAILABLE_MIDI_INPUT_DRIVERS">
                    "LIST AVAILABLE_MIDI_INPUT_DRIVERS"</xref> command and &lt;param-list&gt; by an
                    optional list of driver specific parameters in form of "key1=val1 key2=val2 ...", where
                    character string values should be encapsulated into apostrophes (').
                    Note that there might be drivers which require parameter(s) to be
                    given with this command. Use the previously described commands in
                    this chapter to get that information.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;device-id&gt;]" -
                                <list>
                                    <t>in case the device was successfully created, where
                                    &lt;device-id&gt; is the numerical ID of the new device</t>
                                </list>
                            </t>
                            <t>"WRN[&lt;device-id&gt;]:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the driver was loaded successfully, where
                                    &lt;device-id&gt; is the numerical ID of the new device, but
                                    there are noteworthy issue(s) related, providing an
                                    appropriate warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "CREATE MIDI_INPUT_DEVICE ALSA"</t>
                            <t>S: "OK[0]"</t>
                        </list>
                    </t>
                </section>

                <section title="Destroying a MIDI input device" anchor="DESTROY MIDI_INPUT_DEVICE" lscp_cmd="true">
                    <t>Use the following command to destroy a created MIDI input device:</t>
                    <t>
                        <list>
                            <t>DESTROY MIDI_INPUT_DEVICE &lt;device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; should be replaced by the device's numerical ID as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the device was successfully destroyed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the device was destroyed, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "DESTROY MIDI_INPUT_DEVICE 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created MIDI input device count" anchor="GET MIDI_INPUT_DEVICES" lscp_cmd="true">
                    <t>Use the following command to count all created MIDI input devices:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_DEVICES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending the current number of all
                            MIDI input devices.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_DEVICES"</t>
                            <t>S: "3"</t>
                        </list>
                    </t>
                </section>


                <section title="Getting all created MIDI input device list" anchor="LIST MIDI_INPUT_DEVICES" lscp_cmd="true">
                    <t>Use the following command to list all created MIDI input devices:</t>
                    <t>
                        <list>
                            <t>LIST MIDI_INPUT_DEVICES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a comma separated list
                            with the numerical Ids of all created MIDI input devices.</t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "LIST MIDI_INPUT_DEVICES"</t>
                            <t>S: "0,1,2"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "LIST MIDI_INPUT_DEVICES"</t>
                            <t>S: "1,3"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting current settings of a MIDI input device" anchor="GET MIDI_INPUT_DEVICE INFO" lscp_cmd="true">
                    <t>Use the following command to get current settings of a specific, created MIDI input device:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_DEVICE INFO &lt;device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; is the numerical ID of the MIDI input device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. As some
                            parameters might allow multiple values, character strings are
                            encapsulated into apostrophes ('). At the moment the following
                            information categories are defined (independent of driver):</t>

                            <t>
                                <list>
                                    <t>DRIVER -
                                        <list>
                                            <t>identifier of the used MIDI input driver, as e.g.
                                            returned by the <xref target="LIST AVAILABLE_MIDI_INPUT_DRIVERS">
                                            "LIST AVAILABLE_MIDI_INPUT_DRIVERS"</xref>
                                            command</t>
                                        </list>
                                    </t>
                                </list>
                                <list>
                                    <t>ACTIVE -
                                        <list>
                                            <t>either true or false, if false then the MIDI device is
                                            inactive and doesn't listen to any incoming MIDI events
                                            and thus doesn't forward them to connected sampler
                                            channels</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular
                    order. The fields above are only those fields which are
                    returned by all MIDI input devices. Every MIDI input driver
                    might have its own, additional driver specific parameters (see
                    <xref target="GET MIDI_INPUT_DRIVER INFO">
                    "GET MIDI_INPUT_DRIVER INFO"</xref> command) which are also returned
                    by this command.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_DEVICE INFO 0"</t>
                            <t>S: "DRIVER: ALSA"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ACTIVE: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Changing settings of MIDI input devices" anchor="SET MIDI_INPUT_DEVICE_PARAMETER" lscp_cmd="true">
                    <t>Use the following command to alter a specific setting of a created MIDI input device:</t>
                    <t>
                        <list>
                            <t>SET MIDI_INPUT_DEVICE_PARAMETER &lt;device-id&gt; &lt;key&gt;=&lt;value&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;device-id&gt; should be replaced by the numerical ID of the
                    MIDI input device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command, &lt;key&gt; by the name of the parameter to change and
                    &lt;value&gt; by the new value for this parameter.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case setting was successfully changed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case setting was changed successfully, but there are
                                    noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET MIDI_INPUT_DEVICE_PARAMETER 0 ACTIVE=false"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about a MIDI port" anchor="GET MIDI_INPUT_PORT INFO" lscp_cmd="true">
                    <t>Use the following command to get information about a MIDI port:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_PORT INFO &lt;device-id&gt; &lt;midi-port&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;device-id&gt; is the numerical ID of the MIDI input device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command and &lt;midi-port&gt; the MIDI input port number.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. At the moment
                            the following information categories are defined:</t>

                            <t>NAME -
                                <list>
                                    <t>arbitrary character string naming the port</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>The field above is only the one which is returned by all MIDI
                    ports regardless of the MIDI driver and port. Every MIDI port
                    might have its own, additional driver and port specific
                    parameters.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_PORT INFO 0 0"</t>
                            <t>S: "NAME: 'Masterkeyboard'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ALSA_SEQ_BINDINGS: '64:0'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about specific MIDI port parameter" anchor="GET MIDI_INPUT_PORT_PARAMETER INFO" lscp_cmd="true">
                    <t>Use the following command to get detailed information about specific MIDI port parameter:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INPUT_PORT_PARAMETER INFO &lt;dev-id&gt; &lt;port&gt; &lt;param&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;dev-id&gt; is the numerical ID of the MIDI input device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command, &lt;port&gt; the MIDI port number and
                    &lt;param&gt; a specific port parameter name for which information should be
                    obtained (as returned by the <xref target="GET MIDI_INPUT_PORT INFO">
                    "GET MIDI_INPUT_PORT INFO"</xref> command).</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. There is
                            information which is always returned, independently of the
                            given channel parameter and there is optional information
                            which are only shown dependently to the given MIDI port. At the
                            moment the following information categories are defined:</t>

                            <t>TYPE -
                                <list>
                                    <t>either "BOOL" for boolean value(s) or "INT" for integer
                                    value(s) or "FLOAT" for dotted number(s) or "STRING" for
                                    character string(s)
                                    (always returned)</t>
                                </list>
                            </t>
                            <t>DESCRIPTION -
                                <list>
                                    <t>arbitrary text describing the purpose of the parameter
                                    (always returned)</t>
                                </list>
                            </t>
                            <t>FIX -
                                <list>
                                    <t>either true or false, if true then this parameter is
                                    read only, thus cannot be altered
                                    (always returned)</t>
                                </list>
                            </t>
                            <t>MULTIPLICITY -
                                <list>
                                    <t>either true or false, defines if this parameter allows
                                    only one value or a list of values, where true means
                                    multiple values and false only a single value allowed
                                    (always returned)</t>
                                </list>
                            </t>
                            <t>RANGE_MIN -
                                <list>
                                    <t>defines lower limit of the allowed value range for this
                                    parameter, can be an integer value as well as a dotted
                                    number, this parameter is usually used in conjunction
                                    with 'RANGE_MAX' but may also appear without
                                    (optionally returned, dependent to driver and port
                                    parameter)</t>
                                </list>
                            </t>
                            <t>RANGE_MAX -
                                <list>
                                    <t>defines upper limit of the allowed value range for this
                                    parameter, can be an integer value as well as a dotted
                                    number, this parameter is usually used in conjunction
                                    with 'RANGE_MIN' but may also appear without
                                    (optionally returned, dependent to driver and port
                                    parameter)</t>
                                </list>
                            </t>
                            <t>POSSIBILITIES -
                                <list>
                                    <t>comma separated list of possible values for this
                                    parameter, character strings are encapsulated into
                                    apostrophes
                                    (optionally returned, dependent to device and port
                                    parameter)</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INPUT_PORT_PARAMETER INFO 0 0 ALSA_SEQ_BINDINGS"</t>
                            <t>S: "DESCRIPTION: bindings to other ALSA sequencer clients"</t>
                            <t>&nbsp;&nbsp;&nbsp;"TYPE: STRING"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FIX: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MULTIPLICITY: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"POSSIBILITIES: '64:0','68:0','68:1'"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Changing settings of MIDI input ports" anchor="SET MIDI_INPUT_PORT_PARAMETER" lscp_cmd="true">
                    <t>Use the following command to alter a specific setting of a MIDI input port:</t>
                    <t>
                        <list>
                            <t>SET MIDI_INPUT_PORT_PARAMETER &lt;device-id&gt; &lt;port&gt; &lt;key&gt;=&lt;value&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;device-id&gt; should be replaced by the numerical ID of the
                    MIDI device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                    command, &lt;port&gt; by the MIDI port number, &lt;key&gt; by the name of
                    the parameter to change and &lt;value&gt; by the new value for this
                    parameter (encapsulated into apostrophes) or NONE (not encapsulated into apostrophes)
		    for specifying no value for parameters allowing a list of values.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case setting was successfully changed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case setting was changed successfully, but there are
                                    noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET MIDI_INPUT_PORT_PARAMETER 0 0 ALSA_SEQ_BINDINGS='20:0'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "SET MIDI_INPUT_PORT_PARAMETER 0 0 ALSA_SEQ_BINDINGS=NONE"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Configuring sampler channels">
                <t>The following commands describe how to add and remove sampler channels, associate a
                sampler channel with a sampler engine, load instruments and connect sampler channels to
                MIDI and audio devices.</t>

                <section title="Loading an instrument" anchor="LOAD INSTRUMENT" lscp_cmd="true">
                    <t>An instrument file can be loaded and assigned to a sampler channel by one of the following commands:</t>
                    <t>
                        <list>
                            <t>LOAD INSTRUMENT [NON_MODAL] '&lt;filename&gt;' &lt;instr-index&gt; &lt;sampler-channel&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;filename&gt; is the name of the instrument file on the
                    LinuxSampler instance's host system, &lt;instr-index&gt; the index of the
                    instrument in the instrument file and &lt;sampler-channel> is the
                    number of the sampler channel the instrument should be assigned to.
                    Each sampler channel can only have one instrument.</t>

                    <t>Notice: since LSCP 1.2 the &lt;filename&gt; argument supports
                    escape characters for special characters (see chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>"
                    for details) and accordingly backslash characters in the filename
                    MUST now be escaped as well!</t>

                    <t>The difference between regular and NON_MODAL versions of the command
                    is that the regular command returns OK only after the instrument has been
                    fully loaded and the channel is ready to be used while NON_MODAL version
                    returns immediately and a background process is launched to load the instrument
                    on the channel. The <xref target="GET CHANNEL INFO">GET CHANNEL INFO</xref>
                    command can be used to obtain loading
                    progress from INSTRUMENT_STATUS field. LOAD command will perform sanity checks
                    such as making sure that the file could be read and it is of a proper format
                    and SHOULD return ERR and SHOULD not launch the background process should any
                    errors be detected at that point.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the instrument was successfully loaded</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the instrument was loaded successfully, but there
                                    are noteworthy issue(s) related (e.g. Engine doesn't support
                                    one or more patch parameters provided by the loaded
                                    instrument file), providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example (Unix):</t>
                    <t>
                        <list>
                            <t>C: LOAD INSTRUMENT '/home/joe/gigs/cello.gig' 0 0</t>
                            <t>S: OK</t>
                        </list>
                    </t>
                    <t>Example (Windows):</t>
                    <t>
                        <list>
                            <t>C: LOAD INSTRUMENT 'D:/MySounds/cello.gig' 0 0</t>
                            <t>S: OK</t>
                        </list>
                    </t>
                </section>

                <section title="Loading a sampler engine" anchor="LOAD ENGINE">
                    <t>A sampler engine type can be associated to a specific sampler
                    channel by the following command:</t>
                    <t>
                        <list>
                            <t>LOAD ENGINE &lt;engine-name&gt; &lt;sampler-channel&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;engine-name&gt; is an engine name as obtained by the
                    <xref target="LIST AVAILABLE_ENGINES">
                    "LIST AVAILABLE_ENGINES"</xref> command and &lt;sampler-channel&gt;
                    the sampler channel as returned by the
                    <xref target="ADD CHANNEL">"ADD CHANNEL"</xref> or
                    <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command where
                    the engine type should be assigned to. This command should be issued
                    after adding a new sampler channel and before any other control
                    commands on the new sampler channel. It can also be used to change
                    the engine type of a sampler channel. This command has (currently) no
                    way to define or force if a new engine instance should be created and
                    assigned to the given sampler channel or if an already existing
                    instance of that engine type, shared with other sampler channels,
                    should be used.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the engine was successfully deployed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the engine was deployed successfully, but there
                                    are noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created sampler channel count" anchor="GET CHANNELS" lscp_cmd="true">
                    <t>The number of sampler channels can change on runtime. To get the
                    current amount of sampler channels, the front-end can send the
                    following command:</t>
                    <t>
                        <list>
                            <t>GET CHANNELS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the current number of sampler channels.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET CHANNELS"</t>
                            <t>S: "12"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created sampler channel list" anchor="LIST CHANNELS" lscp_cmd="true">
                    <t>The number of sampler channels can change on runtime. To get the
                    current list of sampler channels, the front-end can send the
                    following command:</t>
                    <t>
                        <list>
                            <t>LIST CHANNELS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning a comma separated list
                            with all sampler channels numerical IDs.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST CHANNELS"</t>
                            <t>S: "0,1,2,3,4,5,6,9,10,11,15,20"</t>
                        </list>
                    </t>
                </section>

                <section title="Adding a new sampler channel" anchor="ADD CHANNEL" lscp_cmd="true">
                    <t>A new sampler channel can be added to the end of the sampler
                    channel list by sending the following command:</t>
                    <t>
                        <list>
                            <t>ADD CHANNEL</t>
                        </list>
                    </t>
                    <t>This will increment the sampler channel count by one and the new
                    sampler channel will be appended to the end of the sampler channel
                    list. The front-end should send the respective, related commands
                    right after to e.g. load an engine, load an instrument and setting
                    input, output method and eventually other commands to initialize
                    the new channel. The front-end should use the sampler channel
                    returned by the answer of this command to perform the previously
                    recommended commands, to avoid race conditions e.g. with other
                    front-ends that might also have sent an "ADD CHANNEL" command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;sampler-channel&gt;]" -
                                <list>
                                    <t>in case a new sampler channel could be added, where
                                    &lt;sampler-channel&gt; reflects the channel number of the new
                                    created sampler channel which should be used to set up
                                    the sampler channel by sending subsequent initialization
                                    commands</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case a new channel was added successfully, but there are
                                    noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Removing a sampler channel" anchor="REMOVE CHANNEL" lscp_cmd="true">
                    <t>A sampler channel can be removed by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE CHANNEL &lt;sampler-channel&gt;</t>
                        </list>
                    </t>

                    <t>Where &lt;sampler-channel&gt; should be replaced by the
                    number of the sampler channel as given by the
                    <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref>
                    command. The channel numbers of all subsequent sampler channels
                    remain the same.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the given sampler channel could be removed</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the given channel was removed, but there are
                                    noteworthy issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Getting amount of available engines" anchor="GET AVAILABLE_ENGINES" lscp_cmd="true">
                    <t>The front-end can ask for the number of available engines by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET AVAILABLE_ENGINES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending the number of available engines.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET AVAILABLE_ENGINES"</t>
                            <t>S: "4"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all available engines" anchor="LIST AVAILABLE_ENGINES" lscp_cmd="true">
                    <t>The front-end can ask for a list of all available engines by sending the following command:</t>
                    <t>
                        <list>
                            <t>LIST AVAILABLE_ENGINES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a comma separated list
                            of the engines' names encapsulated into apostrophes (').
                            Engine names can consist of lower and upper cases,
                            digits and underlines ("_" character).</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST AVAILABLE_ENGINES"</t>
                            <t>S: "'gig','sfz','sf2'"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting information about an engine" anchor="GET ENGINE INFO" lscp_cmd="true">
                    <t>The front-end can ask for information about a specific engine by
                    sending the following command:</t>
                    <t>
                        <list>
                            <t>GET ENGINE INFO &lt;engine-name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;engine-name&gt; is an engine name as obtained by the
                    <xref target="LIST AVAILABLE_ENGINES">
                    "LIST AVAILABLE_ENGINES"</xref> command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that info category. At the moment
                            the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>arbitrary description text about the engine
                                            (note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                     <t>VERSION -
                                        <list>
                                            <t>arbitrary character string regarding the engine's version</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET ENGINE INFO gig"</t>
                            <t>S: "DESCRIPTION: GigaSampler Format Engine"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.110"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                            <t>C: "GET ENGINE INFO sf2"</t>
                            <t>S: "DESCRIPTION: SoundFont Format Engine"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.4"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                            <t>C: "GET ENGINE INFO sfz"</t>
                            <t>S: "DESCRIPTION: SFZ Format Engine"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.11"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Getting sampler channel information" anchor="GET CHANNEL INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current settings of a sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET CHANNEL INFO &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number the front-end is interested in
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>ENGINE_NAME -
                                        <list>
                                            <t>name of the engine that is associated with the sampler
                                            channel, "NONE" if there's no engine associated yet for
                                            this sampler channel</t>
                                        </list>
                                    </t>
                                    <t>AUDIO_OUTPUT_DEVICE -
                                        <list>
                                            <t>numerical ID of the audio output device which is
                                            currently connected to this sampler channel to output
                                            the audio signal, "-1" if there's no device
                                            connected to this sampler channel</t>
                                        </list>
                                    </t>
                                    <t>AUDIO_OUTPUT_CHANNELS -
                                        <list>
                                            <t>number of output channels the sampler channel offers
                                            (dependent to used sampler engine and loaded instrument)</t>
                                        </list>
                                    </t>
                                    <t>AUDIO_OUTPUT_ROUTING -
                                        <list>
                                            <t>comma separated list which reflects to which audio
                                            channel of the selected audio output device each
                                            sampler output channel is routed to, e.g. "0,3" would
                                            mean the engine's output channel 0 is routed to channel
                                            0 of the audio output device and the engine's output
                                            channel 1 is routed to the channel 3 of the audio
                                            output device</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENT_FILE -
                                        <list>
                                            <t>the file name of the loaded instrument, "NONE" if
                                            there's no instrument yet loaded for this sampler
                                            channel (note: since LSCP 1.2 this path may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENT_NR -
                                        <list>
                                            <t>the instrument index number of the loaded instrument,
                                            "-1" if there's no instrument loaded for this sampler
                                            channel</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENT_NAME -
                                        <list>
                                            <t>the instrument name of the loaded instrument
                                            (note: since LSCP 1.2 this character string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENT_STATUS -
                                        <list>
                                            <t>Integer values 0 to 100 indicating loading progress
                                            percentage for the instrument. Negative
                                            value indicates a loading exception (also returns "-1" in case no
                                            instrument was yet to be loaded on the sampler channel).
                                            Value of 100 indicates that the instrument is fully
                                            loaded.</t>
                                        </list>
                                    </t>
                                    <t>MIDI_INPUT_DEVICE -
                                        <list>
                                            <t>DEPRECATED: THIS FIELD WILL DISAPPEAR!</t>
                                            <t>numerical ID of the MIDI input device which is
                                            currently connected to this sampler channel to deliver
                                            MIDI input commands, "-1" if there's no device
                                            connected to this sampler channel</t>
                                            <t>Should not be used anymore as of LSCP v1.6 and younger.
                                            This field is currently only preserved for backward compatibility.
                                            </t>
                                            <t>This field a relict from times where only one MIDI input per
                                            sampler channel was allowed. Use <xref target="LIST CHANNEL MIDI_INPUTS">"GET CHANNEL MIDI_INPUTS"</xref>
                                            instead.</t>
                                        </list>
                                    </t>
                                    <t>MIDI_INPUT_PORT -
                                        <list>
                                            <t>DEPRECATED: THIS FIELD WILL DISAPPEAR!</t>
                                            <t>port number of the MIDI input device (in case a
                                            MIDI device was already assigned to the sampler
                                            channel)</t>
                                            <t>Should not be used anymore as of LSCP v1.6 and younger.
                                            This field is currently only preserved for backward compatibility.
                                            </t>
                                            <t>This field a relict from times where only one MIDI input per
                                            sampler channel was allowed. Use <xref target="LIST CHANNEL MIDI_INPUTS">"GET CHANNEL MIDI_INPUTS"</xref>
                                            instead.</t>
                                        </list>
                                    </t>
                                    <t>MIDI_INPUT_CHANNEL -
                                        <list>
                                            <t>the MIDI input channel number this sampler channel
                                            should listen to or "ALL" to listen on all MIDI channels</t>
                                        </list>
                                    </t>
                                    <t>VOLUME -
                                        <list>
                                            <t>optionally dotted number for the channel volume factor
                                            (where a value &lt; 1.0 means attenuation and a value >
                                            1.0 means amplification)</t>
                                        </list>
                                    </t>
                                    <t>MUTE -
                                        <list>
                                            <t>Determines whether the channel is muted, "true" if the
                                            channel is muted, "false" if the channel is not muted, and
                                            "MUTED_BY_SOLO" if the channel is muted because of the
                                            presence of a solo channel and will be unmuted when
                                            there are no solo channels left</t>
                                        </list>
                                    </t>
                                    <t>SOLO -
                                        <list>
                                            <t>Determines whether this is a solo channel, "true" if
                                            the channel is a solo channel; "false" otherwise</t>
                                        </list>
                                    </t>
                                    <t>MIDI_INSTRUMENT_MAP -
                                        <list>
                                            <t>Determines to which MIDI instrument map this sampler
                                            channel is assigned to. Read chapter
                                            <xref target="SET CHANNEL MIDI_INSTRUMENT_MAP">"SET CHANNEL MIDI_INSTRUMENT_MAP"</xref>
                                            for a list of possible values.</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET CHANNEL INFO 34"</t>
                            <t>S: "ENGINE_NAME: gig"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VOLUME: 1.0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"AUDIO_OUTPUT_DEVICE: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"AUDIO_OUTPUT_CHANNELS: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"AUDIO_OUTPUT_ROUTING: 0,1"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_FILE: /home/joe/FazioliPiano.gig"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_NR: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_NAME: Fazioli Piano"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_STATUS: 100"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_INPUT_DEVICE: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_INPUT_PORT: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_INPUT_CHANNEL: 5"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VOLUME: 1.0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MUTE: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"SOLO: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_INSTRUMENT_MAP: NONE"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Current number of active voices" anchor="GET CHANNEL VOICE_COUNT" lscp_cmd="true">
                    <t>The front-end can ask for the current number of active voices on a
                    sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET CHANNEL VOICE_COUNT &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number the front-end is interested in
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number of active
                            voices on that channel.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Current number of active disk streams" anchor="GET CHANNEL STREAM_COUNT" lscp_cmd="true">
                    <t>The front-end can ask for the current number of active disk streams
                    on a sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET CHANNEL STREAM_COUNT &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number the front-end is interested in
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number of active
                            disk streams on that channel in case the engine supports disk
                            streaming, if the engine doesn't support disk streaming it will
                            return "NA" for not available.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Current fill state of disk stream buffers" anchor="GET CHANNEL BUFFER_FILL" lscp_cmd="true">
                    <t>The front-end can ask for the current fill state of all disk streams
                    on a sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET CHANNEL BUFFER_FILL BYTES &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>to get the fill state in bytes or</t>
                    <t>
                        <list>
                            <t>GET CHANNEL BUFFER_FILL PERCENTAGE &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>to get the fill state in percent, where &lt;sampler-channel&gt; is the
                    sampler channel number the front-end is interested in
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will either answer by returning a comma separated
                            string with the fill state of all disk stream buffers on that
                            channel or an empty line if there are no active disk streams or
                            "NA" for *not available* in case the engine which is deployed
                            doesn't support disk streaming. Each entry in the answer list
                            will begin with the stream's ID in brackets followed by the
                            numerical representation of the fill size (either in bytes or
                            percentage). Note: due to efficiency reasons the fill states in
                            the response are not in particular order, thus the front-end has
                            to sort them by itself if necessary.</t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET CHANNEL BUFFER_FILL BYTES 4"</t>
                            <t>S: "[115]420500,[116]510300,[75]110000,[120]230700"</t>
                        </list>

                        <list>
                            <t>C: "GET CHANNEL BUFFER_FILL PERCENTAGE 4"</t>
                            <t>S: "[115]90%,[116]98%,[75]40%,[120]62%"</t>
                        </list>

                        <list>
                            <t>C: "GET CHANNEL BUFFER_FILL PERCENTAGE 4"</t>
                            <t>S: ""</t>
                        </list>
                    </t>
                </section>

                <section title="Setting audio output device" anchor="SET CHANNEL AUDIO_OUTPUT_DEVICE" lscp_cmd="true">
                    <t>The front-end can set the audio output device on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL AUDIO_OUTPUT_DEVICE &lt;sampler-channel&gt; &lt;audio-device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command and
                    &lt;audio-device-id&gt; is the numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if audio output device was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Setting audio output type" anchor="SET CHANNEL AUDIO_OUTPUT_TYPE" lscp_cmd="true">
                    <t>DEPRECATED: THIS COMMAND WILL DISAPPEAR!</t>

                    <t>The front-end can alter the audio output type on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL AUDIO_OUTPUT_TYPE &lt;sampler-channel&gt; &lt;audio-output-type&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-output-type&gt; is currently either "ALSA" or "JACK" and
                    &lt;sampler-channel&gt; is the respective sampler channel number.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if audio output type was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                    <t>Deprecated:</t>
                    <t>
                        <list>
                            <t>Should not be used anymore. This command is currently only preserved for backward compatibility.</t>
                            <t>This command is a relict from times where there was no sophisticated driver management yet. Use <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref> and <xref target="SET CHANNEL AUDIO_OUTPUT_DEVICE">"SET CHANNEL AUDIO_OUTPUT_DEVICE"</xref> instead.</t>
                        </list>
                    </t>
                </section>

                <section title="Setting audio output channel" anchor="SET CHANNEL AUDIO_OUTPUT_CHANNEL" lscp_cmd="true">
                    <t>The front-end can alter the audio output channel on a specific
                    sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL AUDIO_OUTPUT_CHANNEL &lt;sampler-chan&gt; &lt;audio-out&gt; &lt;audio-in&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command, &lt;audio-out&gt; is the
                    numerical ID of the sampler channel's audio output channel which should be
                    rerouted and &lt;audio-in&gt; is the numerical ID of the audio channel of the selected audio
                    output device where &lt;audio-out&gt; should be routed to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if audio output channel was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Add MIDI input to sampler channel" anchor="ADD CHANNEL MIDI_INPUT" lscp_cmd="true">
                    <t>The front-end can add a MIDI input on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>ADD CHANNEL MIDI_INPUT &lt;sampler-channel&gt; &lt;midi-device-id&gt; [&lt;midi-input-port&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command
                    and &lt;midi-device-id&gt; is the numerical ID of the MIDI input
                    device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref> command,
                    and &lt;midi-input-port&gt; is an optional MIDI input port number of that
                    MIDI input device. If &lt;midi-input-port&gt; is omitted,
                    then the MIDI input device's first port (port number 0) is
                    used.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input port was connected, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD CHANNEL MIDI_INPUT 0 0"</t>
                            <t>S: "OK"</t>
                            <t>C: "ADD CHANNEL MIDI_INPUT 1 0"</t>
                            <t>S: "OK"</t>
                            <t>C: "ADD CHANNEL MIDI_INPUT 1 1 1"</t>
                            <t>S: "OK"</t>
                            <t>C: "ADD CHANNEL MIDI_INPUT 1 2 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>Since:</t>
                    <t>
                        <list>
                            <t>Introduced with LSCP v1.6</t>
                        </list>
                    </t>
                </section>

                <section title="Remove MIDI input(s) from sampler channel" anchor="REMOVE CHANNEL MIDI_INPUT" lscp_cmd="true">
                    <t>The front-end can remove one ore more MIDI input(s) on a
                    specific sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE CHANNEL MIDI_INPUT &lt;sampler-channel&gt; [&lt;midi-device-id&gt; [&lt;midi-input-port&gt;]]</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command
                    and &lt;midi-device-id&gt; and &lt;midi-input-port&gt; are
                    optional numerical IDs defining the MIDI input device and
                    one of its MIDI ports as returned by the
                    <xref target="LIST CHANNEL MIDI_INPUTS">"LIST CHANNEL MIDI_INPUTS"</xref> command.
                    </t>

                    <t>
                    If &lt;midi-input-port&gt; is omitted, then all MIDI input
                    ports of &lt;midi-device-id&gt; are disconnected from this
                    sampler channel.
                    </t>

                    <t>
                    If both, &lt;midi-device-id&gt; and &lt;midi-input-port&gt;
                    are omitted, then all MIDI input ports currently connected
                    to this sampler channel are disconnected from this sampler
                    channel.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input porst were disconnected, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE CHANNEL MIDI_INPUT 0"</t>
                            <t>S: "OK"</t>
                            <t>C: "REMOVE CHANNEL MIDI_INPUT 1"</t>
                            <t>S: "OK"</t>
                            <t>C: "REMOVE CHANNEL MIDI_INPUT 1 2 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>Since:</t>
                    <t>
                        <list>
                            <t>Introduced with LSCP v1.6</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all MIDI inputs of a sampler channel" anchor="LIST CHANNEL MIDI_INPUTS" lscp_cmd="true">
                    <t>The front-end can query a list of all currently connected
                    MIDI inputs of a certain sampler channel by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>LIST CHANNEL MIDI_INPUTS &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by sending a comma separated
                            list of MIDI input device ID - MIDI input port number pairs, where
                            each pair is encapsulated into curly braces. The
                            list is returned in one single line. The MIDI input
                            device ID corresponds to the number returned by
                            <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref>
                            and the port number is the index of the respective MIDI
                            port of that MIDI input device.</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST CHANNEL MIDI_INPUTS 0"</t>
                            <t>S: "{0,0},{1,3},{2,0}"</t>
                        </list>
                    </t>

                    <t>Since:</t>
                    <t>
                        <list>
                            <t>Introduced with LSCP v1.6</t>
                        </list>
                    </t>
                </section>

                <section title="Setting MIDI input device" anchor="SET CHANNEL MIDI_INPUT_DEVICE" lscp_cmd="true">
                    <t>DEPRECATED: THIS COMMAND WILL DISAPPEAR!</t>

                    <t>The front-end can set the MIDI input device on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MIDI_INPUT_DEVICE &lt;sampler-channel&gt; &lt;midi-device-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command
                    and &lt;midi-device-id&gt; is  the numerical ID of the MIDI input device as returned by the
                    <xref target="CREATE MIDI_INPUT_DEVICE">"CREATE MIDI_INPUT_DEVICE"</xref>
                    or <xref target="LIST MIDI_INPUT_DEVICES">"LIST MIDI_INPUT_DEVICES"</xref> command.</t>

                    <t>
                    If more than 1 MIDI inputs are currently connected to this
                    sampler channel: Sending this command will disconnect ALL
                    currently connected MIDI input ports connected to this
                    sampler channel before establishing the new MIDI input
                    connection. So this command does NOT add the connection,
                    it replaces all existing ones instead. This behavior is due
                    to preserving full behavior backward compatibility.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input device was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                    <t>Deprecated:</t>
                    <t>
                        <list>
                            <t>Should not be used anymore as of LSCP v1.6 and younger. This command is currently only preserved for backward compatibility.</t>
                            <t>This command is a relict from times where only one MIDI input per sampler channel was allowed. Use <xref target="ADD CHANNEL MIDI_INPUT">"ADD CHANNEL MIDI_INPUT"</xref> and <xref target="REMOVE CHANNEL MIDI_INPUT">"REMOVE CHANNEL MIDI_INPUT"</xref> instead.</t>
                        </list>
                    </t>
                </section>

                <section title="Setting MIDI input type" anchor="SET CHANNEL MIDI_INPUT_TYPE" lscp_cmd="true">
                    <t>DEPRECATED: THIS COMMAND WILL DISAPPEAR!</t>

                    <t>The front-end can alter the MIDI input type on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MIDI_INPUT_TYPE &lt;sampler-channel&gt; &lt;midi-input-type&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;midi-input-type&gt; is currently only "ALSA" and
                    &lt;sampler-channel&gt; is the respective sampler channel number.</t>

                    <t>
                    If more than 1 MIDI inputs are currently connected to this
                    sampler channel: Sending this command will disconnect ALL
                    currently connected MIDI input ports connected to this
                    sampler channel before establishing the new MIDI input
                    connection. So this command does NOT add the connection,
                    it replaces all existing ones instead. This behavior is due
                    to preserving full behavior backward compatibility.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input type was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                    <t>Deprecated:</t>
                    <t>
                        <list>
                            <t>Should not be used anymore. This command is currently only preserved for backward compatibility.</t>
                            <t>This command is a relict from times where only 1 MIDI input per sampler channels was allowed and where no sophisticated driver management existed yet. Use <xref target="ADD CHANNEL MIDI_INPUT">"ADD CHANNEL MIDI_INPUT"</xref> and <xref target="REMOVE CHANNEL MIDI_INPUT">"REMOVE CHANNEL MIDI_INPUT"</xref> instead.</t>
                        </list>
                    </t>
                </section>

                <section title="Setting MIDI input port" anchor="SET CHANNEL MIDI_INPUT_PORT" lscp_cmd="true">
                    <t>DEPRECATED: THIS COMMAND WILL DISAPPEAR!</t>
                    
                    <t>The front-end can alter the MIDI input port on a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MIDI_INPUT_PORT &lt;sampler-channel&gt; &lt;midi-input-port&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;midi-input-port&gt; is a MIDI input port number of the
                    MIDI input device connected to the sampler channel given by
                    &lt;sampler-channel&gt;.</t>
                    
                    <t>
                    If more than 1 MIDI inputs are currently connected to this
                    sampler channel: Sending this command will switch the
                    connection of the first (and only the first) MIDI input port
                    currently being connected to this sampler channel, to
                    another port of the same MIDI input device. Or in other
                    words: the first MIDI input port currently connected to
                    this sampler channel will be disconnected, and the requested
                    other port of its MIDI input device will be connected to
                    this sampler channel instead. This behavior is due
                    to preserving full behavior backward compatibility.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input port was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                    <t>Deprecated:</t>
                    <t>
                        <list>
                            <t>Should not be used anymore. This command is currently only preserved for backward compatibility.</t>
                            <t>This command is a relict from times where only one MIDI input per sampler channel was allowed. Use <xref target="ADD CHANNEL MIDI_INPUT">"ADD CHANNEL MIDI_INPUT"</xref> and <xref target="REMOVE CHANNEL MIDI_INPUT">"REMOVE CHANNEL MIDI_INPUT"</xref> instead.</t>
                        </list>
                    </t>
                </section>

                <section title="Setting MIDI input channel" anchor="SET CHANNEL MIDI_INPUT_CHANNEL" lscp_cmd="true">
                    <t>The front-end can alter the MIDI channel a sampler channel should
                    listen to by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MIDI_INPUT_CHANNEL &lt;sampler-channel&gt; &lt;midi-input-chan&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;midi-input-chan&gt; is the number
                    of the new MIDI input channel (zero indexed!) where
                    &lt;sampler-channel&gt; should listen to, or "ALL" to listen on all 16 MIDI
                    channels.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI input channel was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "SET CHANNEL MIDI_INPUT_CHANNEL 0 0"</t>
                            <t>S: "OK"</t>
                            <t>C: "SET CHANNEL MIDI_INPUT_CHANNEL 1 ALL"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Setting channel volume" anchor="SET CHANNEL VOLUME" lscp_cmd="true">
                    <t>The front-end can alter the volume of a sampler channel by sending
                    the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL VOLUME &lt;sampler-channel&gt; &lt;volume&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;volume&gt; is an optionally dotted positive number (a value
                    smaller than 1.0 means attenuation, whereas a value greater than
                    1.0 means amplification) and &lt;sampler-channel&gt; defines the sampler
                    channel where this volume factor should be set.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if channel volume was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Muting a sampler channel" anchor="SET CHANNEL MUTE" lscp_cmd="true">
                    <t>The front-end can mute/unmute a specific sampler
                    channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MUTE &lt;sampler-channel&gt; &lt;mute&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command and
                    &lt;mute&gt; should be replaced either by "1" to mute the channel or "0"
                    to unmute the channel.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if the channel was muted/unmuted, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Soloing a sampler channel" anchor="SET CHANNEL SOLO" lscp_cmd="true">
                    <t>The front-end can solo/unsolo a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL SOLO &lt;sampler-channel&gt; &lt;solo&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command and
                    &lt;solo&gt; should be replaced either by "1" to solo the channel or "0"
                    to unsolo the channel.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if the channel was soloed/unsoloed, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Assigning a MIDI instrument map to a sampler channel" anchor="SET CHANNEL MIDI_INSTRUMENT_MAP" lscp_cmd="true">
                    <t>The front-end can assign a MIDI instrument map to a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET CHANNEL MIDI_INSTRUMENT_MAP &lt;sampler-channel&gt; &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command and
                    &lt;map&gt; can have the following possibilites:</t>
                    <t>
                        <list>
                            <t>"NONE" -
                                <list>
                                    <t>This is the default setting. In this case
                                    the sampler channel is not assigned any MIDI
                                    instrument map and thus will ignore all MIDI
                                    program change messages.</t>
                                </list>
                            </t>
                            <t>"DEFAULT" -
                                <list>
                                    <t>The sampler channel will always use the
                                    default MIDI instrument map to handle MIDI
                                    program change messages.</t>
                                </list>
                            </t>
                            <t>numeric ID -
                                <list>
                                    <t>You can assign a specific MIDI instrument map
                                    by replacing &lt;map&gt; with the respective numeric
                                    ID of the MIDI instrument map as returned by the
                                    <xref target="LIST MIDI_INSTRUMENT_MAPS">"LIST MIDI_INSTRUMENT_MAPS"</xref>
                                    command. Once that map will be deleted, the sampler
                                    channel would fall back to "NONE".</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Read chapter <xref target="MIDI Instrument Mapping">"MIDI Instrument Mapping"</xref>
                    for details regarding MIDI instrument mapping.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Adding an effect send to a sampler channel" anchor="CREATE FX_SEND" lscp_cmd="true">
                    <t>The front-end can create an additional effect send on a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>CREATE FX_SEND &lt;sampler-channel&gt; &lt;midi-ctrl&gt; [&lt;name&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command, that is the
                    sampler channel on which the effect send should be created on, &lt;midi-ctrl&gt;
                    is a number between 0..127 defining the MIDI controller which can alter the
                    effect send level and &lt;name&gt; is an optional argument defining a name
                    for the effect send entity. The name does not have to be unique, but MUST be
                    encapsulated into apostrophes and supports escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>".</t>

                    <t>Note: there are two possible approaches to apply audio effects with FX sends:
                       you can either use a) internal effects or b) external effects. 
                       By default, that is as initial routing, effect sends are automatically routed
                       directly to the sampler channel's audio output device and the effect send's
                       audio channels are by default automatically routed to the last audio channels
                       of that audio output device (for the purpose of applying effects externally that is,
                       e.g. by using another application), that way you can i.e. first increase the
                       amount of audio channels on the audio output device for having dedicated effect
                       send output channels and when "CREATE FX_SEND" is called, those channels will
                       automatically be picked. You can alter the destination channels however with
                       <xref target="SET FX_SEND AUDIO_OUTPUT_CHANNEL">"SET FX_SEND AUDIO_OUTPUT_CHANNEL"</xref>.
                       If your intention is rather to use internal effects instead of external effects,
                       then you first need to <xref target="effects">load those internal effects</xref>
                       and then assign the FX sends to the desired internal effect by sending
                       <xref target="SET FX_SEND EFFECT">"SET FX_SEND EFFECT"</xref>.
                    </t>

                    <t>Note: Create effect sends on a sampler channel only when needed, because having effect
                    sends on a sampler channel will decrease runtime performance, because for implementing channel
                    effect sends, separate (sampler channel local) audio buffers are needed to render and mix
                    the voices and route the audio signal afterwards to the master outputs and effect send
                    outputs (along with their respective effect send levels). A sampler channel without effect
                    sends however can mix its voices directly into the audio output devices's audio buffers
                    and is thus faster.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;fx-send-id&gt;]" -
                                <list>
                                    <t>in case a new effect send could be added to the
                                    sampler channel, where &lt;fx-send-id&gt; reflects the
                                    unique ID of the newly created effect send entity</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when a new effect send could not be added, i.e.
                                    due to invalid parameters</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "CREATE FX_SEND 0 91 'Reverb Send'"</t>
                            <t>S: "OK[0]"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "CREATE FX_SEND 0 93"</t>
                            <t>S: "OK[1]"</t>
                        </list>
                    </t>
                </section>

                <section title="Removing an effect send from a sampler channel" anchor="DESTROY FX_SEND" lscp_cmd="true">
                    <t>The front-end can remove an existing effect send on a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>DESTROY FX_SEND &lt;sampler-channel&gt; &lt;fx-send-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command, that is the
                    sampler channel from which the effect send should be removed from and
                    &lt;fx-send-id&gt; is the respective effect send number as returned by the
                    <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "DESTROY FX_SEND 0 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting amount of effect sends on a sampler channel" anchor="GET FX_SENDS" lscp_cmd="true">
                    <t>The front-end can ask for the amount of effect sends on a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET FX_SENDS &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning the number of effect
                            sends on the given sampler channel.</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET FX_SENDS 0"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Listing all effect sends on a sampler channel" anchor="LIST FX_SENDS" lscp_cmd="true">
                    <t>The front-end can ask for a list of effect sends on a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>LIST FX_SENDS &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the respective sampler channel
                    number as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning a comma separated list
                            with all effect sends' numerical IDs on the given sampler
                            channel.</t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "LIST FX_SENDS 0"</t>
                            <t>S: "0,1"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "LIST FX_SENDS 1"</t>
                            <t>S: ""</t>
                        </list>
                    </t>
                </section>

                <section title="Getting effect send information" anchor="GET FX_SEND INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current settings of an effect send entity
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET FX_SEND INFO &lt;sampler-channel&gt; &lt;fx-send-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command and
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
		    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command.
	           </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>NAME -
                                        <list>
                                            <t>name of the effect send entity
                                            (note that this character string may contain
                                             <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>MIDI_CONTROLLER -
                                        <list>
                                            <t>a value between 0 and 127 reflecting the MIDI controller
                                            which is able to modify the effect send's send level</t>
                                        </list>
                                    </t>
                                    <t>LEVEL -
                                        <list>
                                            <t>optionally dotted number reflecting the effect send's
                                            current send level (where a value &lt; 1.0 means attenuation
                                            and a value > 1.0 means amplification)</t>
                                        </list>
                                    </t>
                                    <t>AUDIO_OUTPUT_ROUTING -
                                        <list>
                                            <t>comma separated list which reflects to which audio
                                            channel of the selected audio output device each
                                            effect send output channel is routed to, e.g. "0,3" would
                                            mean the effect send's output channel 0 is routed to channel
                                            0 of the audio output device and the effect send's output
                                            channel 1 is routed to the channel 3 of the audio
                                            output device (see
                                            <xref target="SET FX_SEND AUDIO_OUTPUT_CHANNEL">"SET FX_SEND AUDIO_OUTPUT_CHANNEL"</xref>
                                            for details), if an internal send
                                            effect is assigned to the effect
                                            send, then this setting defines the
                                            audio channel routing to that
                                            effect instance respectively</t>
                                        </list>
                                    </t>
                                    <t>EFFECT -
                                        <list>
                                            <t>destination send effect chain ID
                                            and destination effect chain
                                            position, separated by comma in the
                                            form "&lt;effect-chain&gt;,&lt;chain-pos&gt;"
                                            or "NONE" if there is no send effect
                                            assigned to the effect send</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET FX_SEND INFO 0 0"</t>
                            <t>S: "NAME: Reverb Send"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_CONTROLLER: 91"</t>
                            <t>&nbsp;&nbsp;&nbsp;"LEVEL: 0.3"</t>
                            <t>&nbsp;&nbsp;&nbsp;"AUDIO_OUTPUT_ROUTING: 2,3"</t>
                            <t>&nbsp;&nbsp;&nbsp;"EFFECT: NONE"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET FX_SEND INFO 0 1"</t>
                            <t>S: "NAME: Delay Send (Internal)"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MIDI_CONTROLLER: 93"</t>
                            <t>&nbsp;&nbsp;&nbsp;"LEVEL: 0.51"</t>
                            <t>&nbsp;&nbsp;&nbsp;"AUDIO_OUTPUT_ROUTING: 1,2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"EFFECT: 2,0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Changing effect send's name" anchor="SET FX_SEND NAME" lscp_cmd="true">
                    <t>The front-end can alter the current name of an effect
                    send entity by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET FX_SEND NAME &lt;sampler-chan&gt; &lt;fx-send-id&gt; &lt;name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command and
                    &lt;name&gt; is the new name of the effect send entity, which
                    does not have to be unique (name MUST be encapsulated into apostrophes
                    and supports escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>").
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET FX_SEND NAME 0 0 'Fx Send 1'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Altering effect send's audio routing" anchor="SET FX_SEND AUDIO_OUTPUT_CHANNEL" lscp_cmd="true">
                    <t>The front-end can alter the destination of an effect send's audio channel on a specific
                    sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET FX_SEND AUDIO_OUTPUT_CHANNEL &lt;sampler-chan&gt; &lt;fx-send-id&gt; &lt;audio-src&gt; &lt;audio-dst&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command,
                    &lt;audio-src&gt; is the numerical ID of the effect send's audio channel
                    which should be rerouted and &lt;audio-dst&gt; is the numerical ID of
                    either a) the audio output channel of the sampler channel's audio output
                    device (i.e. if external effect shall be applied) or b) of the audio
                    input channel of an internal effect assigned to the FX send where
                    &lt;audio-src&gt; should be routed to.</t>

                    <t>Note that effect sends can only route audio to the same audio output
                    device as assigned to the effect send's sampler channel. Also note that an
                    effect send entity does always have exactly as much audio channels as its
                    sampler channel. So if the sampler channel is stereo, the effect send does
	            have two audio channels as well. Also keep in mind that the amount of audio
                    channels on a sampler channel might be dependant not only to the deployed
                    sampler engine on the sampler channel, but also dependant to the instrument
                    currently loaded. However you can (effectively) turn an i.e. stereo effect
                    send into a mono one by simply altering its audio routing appropriately.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if audio output channel was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET FX_SEND AUDIO_OUTPUT_CHANNEL 0 0 0 2"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Assigning destination effect to an effect send" anchor="SET FX_SEND EFFECT" lscp_cmd="true">
                    <t>The front-end can (re-)assign an internal destination effect to an
                    effect send by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET FX_SEND EFFECT &lt;sampler-chan&gt; &lt;fx-send-id&gt; &lt;effect-chain&gt; &lt;chain-pos&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command,
                    &lt;effect-chain&gt; by the numerical ID of the destination
                    effect chain as returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command and &lt;chain-pos&gt; reflects the exact effect
                    chain position in the effect chain which hosts the actual
                    destination effect.</t>

                    <t>Note: This command MUST NOT be used if you want to apply
                       audio effects externally! By default FX sends are routed directly
                       to the audio output device for that purpose.
                       You can also revert this command later on by sending
                       <xref target="REMOVE FX_SEND EFFECT">"REMOVE FX_SEND EFFECT"</xref>,
                       which will cause the FX send to be routed directly to the sampler channel's
                       audio output device instead (i.e. for using external effects instead of
                       internal effects).
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET FX_SEND EFFECT 0 0 2 5"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Removing destination effect from an effect send" anchor="REMOVE FX_SEND EFFECT" lscp_cmd="true">
                    <t>The front-end can (re-)assign a destination effect to an
                    effect send by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE FX_SEND EFFECT &lt;sampler-chan&gt; &lt;fx-send-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command.</t>

                    <t>After the destination effect has been removed from the
                    effect send, the audio signal of the effect send will be
                    routed directly to the audio output device, according to the
                    audio channel routing setting of the effect send.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE FX_SEND EFFECT 0 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Altering effect send's MIDI controller" anchor="SET FX_SEND MIDI_CONTROLLER" lscp_cmd="true">
                    <t>The front-end can alter the MIDI controller of an effect
                    send entity by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET FX_SEND MIDI_CONTROLLER &lt;sampler-chan&gt; &lt;fx-send-id&gt; &lt;midi-ctrl&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command and
                    &lt;midi-ctrl&gt; reflects the MIDI controller which shall be
                    able to modify the effect send's send level.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if MIDI controller was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET FX_SEND MIDI_CONTROLLER 0 0 91"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Altering effect send's send level" anchor="SET FX_SEND LEVEL" lscp_cmd="true">
                    <t>The front-end can alter the current send level of an effect
                    send entity by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET FX_SEND LEVEL &lt;sampler-chan&gt; &lt;fx-send-id&gt; &lt;volume&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;fx-send-id&gt; reflects the numerical ID of the effect send entity
                    as returned by the <xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref>
                    or <xref target="LIST FX_SENDS">"LIST FX_SENDS"</xref> command and
                    &lt;volume&gt; is an optionally dotted positive number (a value
                    smaller than 1.0 means attenuation, whereas a value greater than
                    1.0 means amplification) reflecting the new send level.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if new send level was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET FX_SEND LEVEL 0 0 0.15"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Sending MIDI messages to sampler channel" anchor="SEND CHANNEL MIDI_DATA" lscp_cmd="true">
                    <t>The front-end can send MIDI events to a specific sampler channel
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>SEND CHANNEL MIDI_DATA &lt;midi-msg&gt; &lt;sampler-chan&gt; &lt;arg1&gt; &lt;arg2&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-chan&gt; is the sampler channel number
                    as returned by the <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref> command,
                    &lt;arg1&gt; and &lt;arg2&gt; arguments depend on the &lt;midi-msg&gt; argument, which
                    specifies the MIDI message type. Currently, the following MIDI messages are supported:</t>
                    <t>
                        <list>
                            <t>"NOTE_ON" -
                                <list>
                                    <t>For turning on MIDI notes, where &lt;arg1&gt;
                                    specifies the key number and &lt;arg2&gt; the velocity
                                    as described in the MIDI specification.</t>
                                </list>
                            </t>
                            <t>"NOTE_OFF" -
                                <list>
                                    <t>For turning a currently playing MIDI note off, where &lt;arg1&gt;
                                    specifies the key number and &lt;arg2&gt; the velocity
                                    as described in the MIDI specification.</t>
                                </list>
                            </t>
                            <t>"CC" -
                                <list>
                                    <t>For changing a MIDI controller, where &lt;arg1&gt;
                                    specifies the controller number and &lt;arg2&gt; the
                                    new value of the controller as described in the Control
                                    Change section of the MIDI specification.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>CAUTION: This command is provided for implementations of virtual MIDI keyboards
                    and no realtime guarantee whatsoever will be made!</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SEND CHANNEL MIDI_DATA NOTE_ON 0 56 112"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Resetting a sampler channel" anchor="RESET CHANNEL" lscp_cmd="true">
                    <t>The front-end can reset a particular sampler channel by sending the following command:</t>
                    <t>
                        <list>
                            <t>RESET CHANNEL &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>
                    Where &lt;sampler-channel&gt; defines the sampler channel to be reset.
                    This will cause the engine on that sampler channel, its voices and
                    eventually disk streams and all control and status variables to be
                    reset.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if channel was reset, but there are noteworthy issue(s)
                                    related, providing an appropriate warning code and warning
                                    message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Controlling connection">
                <t>The following commands are used to control the connection to LinuxSampler.</t>

                <section title="Register front-end for receiving event messages" anchor="SUBSCRIBE" lscp_cmd="true">
                    <t>The front-end can register itself to the LinuxSampler application to
                    be informed about noteworthy events by sending this command:</t>
                    <t>
                        <list>
                            <t>SUBSCRIBE &lt;event-id&gt;</t>
                        </list>
                    </t>
                    <t>where &lt;event-id&gt; will be replaced by the respective event that
                    client wants to subscribe to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if registration succeeded, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Unregister front-end for not receiving event messages" anchor="UNSUBSCRIBE" lscp_cmd="true">
                    <t>The front-end can unregister itself if it doesn't want to receive event
                    messages anymore by sending the following command:</t>
                    <t>
                        <list>
                            <t>UNSUBSCRIBE &lt;event-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;event-id&gt; will be replaced by the respective event that
                    client doesn't want to receive anymore.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if unregistration succeeded, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Enable or disable echo of commands" anchor="SET ECHO" lscp_cmd="true">
                    <t>To enable or disable back sending of commands to the client the following command can be used:</t>
                    <t>
                        <list>
                            <t>SET ECHO &lt;value&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;value&gt; should be replaced either by "1" to enable echo mode
                    or "0" to disable echo mode. When echo mode is enabled, all
                    commands send to LinuxSampler will be immediately send back and
                    after this echo the actual response to the command will be
                    returned. Echo mode will only be altered for the client connection
                    that issued the "SET ECHO" command, not globally for all client
                    connections.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>usually</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>on syntax error, e.g. non boolean value</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="Close client connection" anchor="QUIT" lscp_cmd="true">
                    <t>The client can close its network connection to LinuxSampler by sending the following command:</t>
                    <t>
                        <list>
                            <t>QUIT</t>
                        </list>
                    </t>
                    <t>This is probably more interesting for manual telnet connections to
                    LinuxSampler than really useful for a front-end implementation.</t>
                </section>
            </section>

            <section title="Global commands">
                <t>The following commands have global impact on the sampler.</t>

                <section title="Current number of active voices" anchor="GET TOTAL_VOICE_COUNT" lscp_cmd="true">
                    <t>The front-end can ask for the current number of active voices on
                    the sampler by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET TOTAL_VOICE_COUNT</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number of all active
                            voices on the sampler.</t>
                        </list>
                    </t>
                </section>

                <section title="Maximum amount of active voices" anchor="GET TOTAL_VOICE_COUNT_MAX" lscp_cmd="true">
                    <t>The front-end can ask for the maximum number of active voices
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET TOTAL_VOICE_COUNT_MAX</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the maximum number
                            of active voices.</t>
                        </list>
                    </t>
                </section>

                <section title="Current number of active disk streams" anchor="GET TOTAL_STREAM_COUNT" lscp_cmd="true">
                    <t>The front-end can ask for the current number of active disk streams on
                    the sampler by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET TOTAL_STREAM_COUNT</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number of all active
                            disk streams on the sampler.</t>
                        </list>
                    </t>
                </section>

                <section title="Reset sampler" anchor="RESET">
                    <t>The front-end can reset the whole sampler by sending the following command:</t>
                    <t>
                        <list>
                            <t>RESET</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>always</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Examples:</t>
                    <t>
                        <list>
                            <t></t>
                        </list>
                    </t>
                </section>

                <section title="General sampler information" anchor="GET SERVER INFO" lscp_cmd="true">
                    <t>The client can ask for general information about the LinuxSampler
                       instance by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET SERVER INFO</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                               Each answer line begins with the information category name
                               followed by a colon and then a space character &lt;SP&gt; and finally
                               the info character string to that information category. At the
                               moment the following categories are defined:
                            </t>
                            <t>
                                <list>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>arbitrary textual description about the sampler
                                            (note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>VERSION -
                                        <list>
                                            <t>version of the sampler</t>
                                        </list>
                                    </t>
                                    <t>PROTOCOL_VERSION -
                                        <list>
                                            <t>version of the LSCP specification the sampler
                                            complies with (see <xref target="LSCP versioning" /> for details)</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENTS_DB_SUPPORT -
                                        <list>
                                            <t>either yes or no, specifies whether the
                                            sampler is build with instruments database support.</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.
                    Other fields might be added in future.</t>
                    
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET SERVER INFO"</t>
                            <t>S: "DESCRIPTION: LinuxSampler - modular, streaming capable sampler"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VERSION: 1.0.0.svn23"</t>
                            <t>&nbsp;&nbsp;&nbsp;"PROTOCOL_VERSION: 1.5"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENTS_DB_SUPPORT: no"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Getting global volume attenuation" anchor="GET VOLUME" lscp_cmd="true">
                    <t>The client can ask for the current global sampler-wide volume
                    attenuation by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET VOLUME</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will always answer by returning the optional
                            dotted floating point coefficient, reflecting the current
                            global volume attenuation.
                            </t>
                        </list>
                    </t>
                    <t>Note: it is up to the respective sampler engine whether to obey
                    that global volume parameter or not, but in general all engines SHOULD
                    use this parameter.</t>
                </section>

                <section title="Setting global volume attenuation" anchor="SET VOLUME" lscp_cmd="true">
                    <t>The client can alter the current global sampler-wide volume
                    attenuation by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET VOLUME &lt;volume&gt;</t>
                        </list>
                    </t>
                   <t>Where &lt;volume&gt; should be replaced by the optional dotted
                   floating point value, reflecting the new global volume parameter.
                   This value might usually be in the range between 0.0 and 1.0, that
                   is for attenuating the overall volume.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if the global volume was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Getting global voice limit" anchor="GET VOICES" lscp_cmd="true">
                    <t>The client can ask for the current global sampler-wide limit
                       for maximum voices by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET VOICES</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number for
                               the current limit of maximum voices.</t>
                        </list>
                    </t>

                    <t>The voice limit setting defines how many voices should maximum
                       be processed by the sampler at the same time. If the user
                       triggers new notes which would exceed that voice limit, the
                       sampler engine will react by stealing old voices for those
                       newly triggered notes. Note that the amount of voices triggered
                       by a new note can be larger than one and is dependent to the
                       respective instrument and probably further criterias.</t>
                </section>

                <section title="Setting global voice limit" anchor="SET VOICES" lscp_cmd="true">
                    <t>The client can alter the current global sampler-wide limit
                    for maximum voices by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET VOICES &lt;max-voices&gt;</t>
                        </list>
                    </t>
                   <t>Where &lt;max-voices&gt; should be replaced by the integer
                   value, reflecting the new global amount limit of maximum voices.
                   This value has to be larger than 0.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if the voice limit was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Note: the given value will be passed to all sampler engine instances.
                       The total amount of maximum voices on the running system might thus
                       be as big as the given value multiplied by the current amount of engine
                       instances.</t>

                     <t>Caution: when adjusting the voice limit, you SHOULD also
                        adjust the disk stream limit respectively and vice versa.</t>
                </section>

                <section title="Getting global disk stream limit" anchor="GET STREAMS" lscp_cmd="true">
                    <t>The client can ask for the current global sampler-wide limit
                       for maximum disk streams by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET STREAMS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by returning the number for
                               the current limit of maximum disk streams.</t>
                        </list>
                    </t>

                    <t>The disk stream limit setting defines how many disk streams should
                       maximum be processed by a sampler engine at the same time. The
                       higher this value, the more memory (RAM) will be occupied, since
                       every disk streams allocates a certain buffer size for being able
                       to perform its streaming operations.</t>
                </section>

                <section title="Setting global disk stream limit" anchor="SET STREAMS" lscp_cmd="true">
                    <t>The client can alter the current global sampler-wide limit
                    for maximum disk streams by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET STREAMS &lt;max-streams&gt;</t>
                        </list>
                    </t>
                   <t>Where &lt;max-streams&gt; should be replaced by the integer
                   value, reflecting the new global amount limit of maximum disk streams.
                   This value has to be positive.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>if the disk stream limit was set, but there are noteworthy
                                    issue(s) related, providing an appropriate warning code and
                                    warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Note: the given value will be passed to all sampler engine instances.
                       The total amount of maximum disk streams on the running system might
                       thus be as big as the given value multiplied by the current amount of
                       engine instances.</t>

                     <t>Caution: when adjusting the disk stream limit, you SHOULD also
                        adjust the voice limit respectively and vice versa.</t>
                </section>

            </section>


            <section title="MIDI Instrument Mapping" anchor="MIDI Instrument Mapping">
                <t>The MIDI protocol provides a way to switch between instruments
                by sending so called MIDI bank select and MIDI program change
                messages which are essentially just numbers. The following commands
                allow to actually map arbitrary MIDI bank select / program change
                numbers with real instruments.</t>
                <t>The sampler allows to manage an arbitrary amount of MIDI
                instrument maps which define which instrument to load on
                which MIDI program change message.</t>
                <t>By default, that is when the sampler is launched, there is no
                map, thus the sampler will simply ignore all program change
                messages. The front-end has to explicitly create at least one
                map, add entries to the map and tell the respective sampler
                channel(s) which MIDI instrument map to use, so the sampler
                knows how to react on a given program change message on the
                respective sampler channel, that is by switching to the
                respectively defined engine type and loading the respective
                instrument. See command
                <xref target="SET CHANNEL MIDI_INSTRUMENT_MAP">"SET CHANNEL MIDI_INSTRUMENT_MAP"</xref>
                for how to assign a MIDI instrument map to a sampler channel.</t>
                <t>Also note per MIDI specification a bank select message does not
                cause to switch to another instrument. Instead when receiving a
                bank select message the bank value will be stored and a subsequent
                program change message (which may occur at any time) will finally
                cause the sampler to switch to the respective instrument as
                reflected by the current MIDI instrument map.</t>

                <section title="Create a new MIDI instrument map" anchor="ADD MIDI_INSTRUMENT_MAP" lscp_cmd="true">
                    <t>The front-end can add a new MIDI instrument map by sending
                    the following command:</t>
                    <t>
                        <list>
                            <t>ADD MIDI_INSTRUMENT_MAP [&lt;name&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;name&gt; is an optional argument allowing to
                    assign a custom name to the new map. MIDI instrument Map
                    names do not have to be unique, but MUST be encapsulated
                    into apostrophes and support escape sequences as described
                    in chapter "<xref target="character_set">Character Set and Escape Sequences</xref>".
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;map&gt;]" -
                                <list>
                                    <t>in case a new MIDI instrument map could
                                    be added, where &lt;map&gt; reflects the
                                    unique ID of the newly created MIDI
                                    instrument map</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when a new map could not be created, which
                                    might never occur in practice</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD MIDI_INSTRUMENT_MAP 'Standard Map'"</t>
                            <t>S: "OK[0]"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "ADD MIDI_INSTRUMENT_MAP 'Standard Drumkit'"</t>
                            <t>S: "OK[1]"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "ADD MIDI_INSTRUMENT_MAP"</t>
                            <t>S: "OK[5]"</t>
                        </list>
                    </t>
                </section>

                <section title="Delete one particular or all MIDI instrument maps" anchor="REMOVE MIDI_INSTRUMENT_MAP" lscp_cmd="true">
                    <t>The front-end can delete a particular MIDI instrument map
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE MIDI_INSTRUMENT_MAP &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; reflects the unique ID of the map to delete
                    as returned by the <xref target="LIST MIDI_INSTRUMENT_MAPS">"LIST MIDI_INSTRUMENT_MAPS"</xref>
                    command.</t>
                    <t>The front-end can delete all MIDI instrument maps by
                    sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE MIDI_INSTRUMENT_MAP ALL</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the map(s) could be deleted</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when the given map does not exist</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE MIDI_INSTRUMENT_MAP 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "REMOVE MIDI_INSTRUMENT_MAP ALL"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Get amount of existing MIDI instrument maps" anchor="GET MIDI_INSTRUMENT_MAPS" lscp_cmd="true">
                    <t>The front-end can retrieve the current amount of MIDI
                    instrument maps by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INSTRUMENT_MAPS</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning the current
                            number of MIDI instrument maps.</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INSTRUMENT_MAPS"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting all created MIDI instrument maps" anchor="LIST MIDI_INSTRUMENT_MAPS" lscp_cmd="true">
                    <t>The number of MIDI instrument maps can change on runtime. To get the
                    current list of MIDI instrument maps, the front-end can send the
                    following command:</t>
                    <t>
                        <list>
                            <t>LIST MIDI_INSTRUMENT_MAPS</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning a comma separated list
                            with all MIDI instrument maps' numerical IDs.</t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST MIDI_INSTRUMENT_MAPS"</t>
                            <t>S: "0,1,5,12"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting MIDI instrument map information" anchor="GET MIDI_INSTRUMENT_MAP INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current settings of a MIDI
                    instrument map by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INSTRUMENT_MAP INFO &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; is the numerical ID of the map the
                    front-end is interested in as returned by the
                    <xref target="LIST MIDI_INSTRUMENT_MAPS">"LIST MIDI_INSTRUMENT_MAPS"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>NAME -
                                        <list>
                                            <t>custom name of the given map,
                                            which does not have to be unique
                                            (note that this character string may contain
                                             <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>DEFAULT -
                                        <list>
                                            <t>either true or false,
                                            defines whether this map is the default map</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INSTRUMENT_MAP INFO 0"</t>
                            <t>S: "NAME: Standard Map"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DEFAULT: true"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Renaming a MIDI instrument map" anchor="SET MIDI_INSTRUMENT_MAP NAME" lscp_cmd="true">
                    <t>The front-end can alter the custom name of a MIDI
                    instrument map by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET MIDI_INSTRUMENT_MAP NAME &lt;map&gt; &lt;name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; is the numerical ID of the map and
                    &lt;name&gt; the new custom name of the map, which does not
                    have to be unique (name MUST be encapsulated into apostrophes
                    and supports escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>").
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given map does not exist</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET MIDI_INSTRUMENT_MAP NAME 0 'Foo instruments'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Create or replace a MIDI instrument map entry" anchor="MAP MIDI_INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can create a new or replace an existing entry
                    in a sampler's MIDI instrument map by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>MAP MIDI_INSTRUMENT [NON_MODAL] &lt;map&gt;
                            &lt;midi_bank&gt; &lt;midi_prog&gt; &lt;engine_name&gt;
                            &lt;filename&gt; &lt;instrument_index&gt; &lt;volume_value&gt;
                            [&lt;instr_load_mode&gt;] [&lt;name&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; is the numeric ID of the map to alter,
                    &lt;midi_bank&gt; is an integer value between
                    0..16383 reflecting the MIDI bank select index,
                    &lt;midi_prog&gt; an
                    integer value between 0..127 reflecting the MIDI program change
                    index, &lt;engine_name&gt; a sampler engine name as returned by
                    the <xref target="LIST AVAILABLE_ENGINES">"LIST AVAILABLE_ENGINES"</xref>
                    command (not encapsulated into apostrophes), &lt;filename&gt; the name
                    of the instrument's file to be deployed (encapsulated into apostrophes,
                    supporting escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>"),
                    &lt;instrument_index&gt; the index (integer value) of the instrument
                    within the given file, &lt;volume_value&gt; reflects the master
                    volume of the instrument as optionally dotted number (where a
                    value &lt; 1.0 means attenuation and a value > 1.0 means
                    amplification). This parameter easily allows to adjust the
                    volume of all intruments within a custom instrument map
                    without having to adjust their instrument files. The
                    OPTIONAL &lt;instr_load_mode&gt; argument defines the life
                    time of the instrument, that is when the instrument should
                    be loaded, when freed and has exactly the following
                    possibilities:</t>
                    <t>
                        <list>
                            <t>"ON_DEMAND" -
                                <list>
                                    <t>The instrument will be loaded when needed,
                                    that is when demanded by at least one sampler
                                    channel. It will immediately be freed from memory
                                    when not needed by any sampler channel anymore.</t>
                                </list>
                            </t>
                            <t>"ON_DEMAND_HOLD" -
                                <list>
                                    <t>The instrument will be loaded when needed,
                                    that is when demanded by at least one sampler
                                    channel. It will be kept in memory even when
                                    not needed by any sampler channel anymore.
                                    Instruments with this mode are only freed
                                    when the sampler is reset or all mapping
                                    entries with this mode (and respective
                                    instrument) are explicitly changed to
                                    "ON_DEMAND" and no sampler channel is using
                                    the instrument anymore.</t>
                                </list>
                            </t>
                            <t>"PERSISTENT" -
                                <list>
                                    <t>The instrument will immediately be loaded
                                    into memory when this mapping
                                    command is sent and the instrument is kept all
                                    the time. Instruments with this mode are
                                    only freed when the sampler is reset or all
                                    mapping entries with this mode (and
                                    respective instrument) are explicitly
                                    changed to "ON_DEMAND" and no sampler
                                    channel is using the instrument anymore.</t>
                                </list>
                            </t>
                            <t>not supplied -
                                <list>
                                    <t>In case there is no &lt;instr_load_mode&gt;
                                    argument given, it will be up to the
                                    InstrumentManager to decide which mode to use.
                                    Usually it will use "ON_DEMAND" if an entry
                                    for the given instrument does not exist in
                                    the InstrumentManager's list yet, otherwise
                                    if an entry already exists, it will simply
                                    stick with the mode currently reflected by
                                    the already existing entry, that is it will
                                    not change the mode.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>
                    The &lt;instr_load_mode&gt; argument thus allows to define an
                    appropriate strategy (low memory consumption vs. fast
                    instrument switching) for each instrument individually. Note, the
                    following restrictions apply to this argument: "ON_DEMAND_HOLD" and
                    "PERSISTENT" have to be supported by the respective sampler engine
                    (which is technically the case when the engine provides an
                    InstrumentManager for its format). If this is not the case the
                    argument will automatically fall back to the default value
                    "ON_DEMAND". Also the load mode of one instrument may
                    automatically change the laod mode of other instrument(s), i.e.
                    because the instruments are part of the same file and the
                    engine does not allow a way to manage load modes for them
                    individually. Due to this, in case the frontend shows the
                    load modes of entries, the frontend should retrieve the actual
                    mode by i.e. sending
                    <xref target="GET MIDI_INSTRUMENT INFO">"GET MIDI_INSTRUMENT INFO"</xref>
                    command(s). Finally the OPTIONAL &lt;name&gt; argument allows to set a custom name
                    (encapsulated into apostrophes, supporting escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>") for the
                    mapping entry, useful for frontends for displaying an appropriate name for
                    mapped instruments (using
                    <xref target="GET MIDI_INSTRUMENT INFO">"GET MIDI_INSTRUMENT INFO"</xref>).
                    </t>
                    <t>
                    By default, "MAP MIDI_INSTRUMENT" commands block until the mapping is
                    completely established in the sampler. The OPTIONAL "NON_MODAL" argument
                    however causes the respective "MAP MIDI_INSTRUMENT" command to return
                    immediately, that is to let the sampler establish the mapping in the
                    background. So this argument might be especially useful for mappings with
                    a "PERSISTENT" type, because these have to load the respective instruments
                    immediately and might thus block for a very long time. It is recommended
                    however to use the OPTIONAL "NON_MODAL" argument only if really necessary,
                    because it has the following drawbacks: as "NON_MODAL" instructions return
                    immediately, they may not necessarily return an error i.e. when the given
                    instrument file turns out to be corrupt, beside that subsequent commands
                    in a LSCP instruction sequence might fail, because mandatory mappings are
                    not yet completed.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>usually</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when the given map or engine does not exist or a value
                                    is out of range</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "MAP MIDI_INSTRUMENT 0 3 0 gig '/usr/share/Steinway D.gig' 0 0.8 PERSISTENT"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "MAP MIDI_INSTRUMENT 0 4 50 gig '/home/john/foostrings.gig' 7 1.0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "MAP MIDI_INSTRUMENT 0 0 0 gig '/usr/share/piano.gig' 0 1.0 'Normal Piano'"</t>
                            <t>S: "OK"</t>
                            <t>C: "MAP MIDI_INSTRUMENT 0 1 0 gig '/usr/share/piano.gig' 0 0.25 'Silent Piano'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "MAP MIDI_INSTRUMENT NON_MODAL 1 8 120 gig '/home/joe/foodrums.gig' 0 1.0 PERSISTENT 'Foo Drumkit'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting amount of MIDI instrument map entries" anchor="GET MIDI_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can query the amount of currently existing
                    entries in a MIDI instrument map by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INSTRUMENTS &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>The front-end can query the amount of currently existing
                    entries in all MIDI instrument maps by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INSTRUMENTS ALL</t>
                        </list>
                    </t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by sending the current number of
                            entries in the MIDI instrument map(s).</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INSTRUMENTS 0"</t>
                            <t>S: "234"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INSTRUMENTS ALL"</t>
                            <t>S: "954"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting indeces of all entries of a MIDI instrument map" anchor="LIST MIDI_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can query a list of all currently existing
                    entries in a certain MIDI instrument map by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>LIST MIDI_INSTRUMENTS &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; is the numeric ID of the MIDI instrument map.</t>
                    <t>The front-end can query a list of all currently existing
                    entries of all MIDI instrument maps by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>LIST MIDI_INSTRUMENTS ALL</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by sending a comma separated
                            list of map ID - MIDI bank - MIDI program triples, where
                            each triple is encapsulated into curly braces. The
                            list is returned in one single line. Each triple
                            just reflects the key of the respective map entry,
                            thus subsequent
                            <xref target="GET MIDI_INSTRUMENT INFO">"GET MIDI_INSTRUMENT INFO"</xref>
                            command(s) are necessary to retrieve detailed information
                            about each entry.</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST MIDI_INSTRUMENTS 0"</t>
                            <t>S: "{0,0,0},{0,0,1},{0,0,3},{0,1,4},{1,127,127}"</t>
                        </list>
                    </t>
                </section>

                <section title="Remove an entry from the MIDI instrument map" anchor="UNMAP MIDI_INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can delete an entry from a MIDI instrument
                    map by sending the following command:</t>
                    <t>
                        <list>
                            <t>UNMAP MIDI_INSTRUMENT &lt;map&gt; &lt;midi_bank&gt; &lt;midi_prog&gt;</t>
                        </list>
                    </t>
                    <t>
                    Where &lt;map&gt; is the numeric ID of the MIDI instrument map,
                    &lt;midi_bank&gt; is an integer value between 0..16383
                    reflecting the MIDI bank value and
                    &lt;midi_prog&gt; an integer value between
                    0..127 reflecting the MIDI program value of the map's entrie's key
                    index triple.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>usually</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when index out of bounds</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "UNMAP MIDI_INSTRUMENT 0 2 127"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Get current settings of MIDI instrument map entry" anchor="GET MIDI_INSTRUMENT INFO" lscp_cmd="true">
                    <t>The front-end can retrieve the current settings of a certain
                    instrument map entry by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET MIDI_INSTRUMENT INFO &lt;map&gt; &lt;midi_bank&gt; &lt;midi_prog&gt;</t>
                        </list>
                    </t>
                    <t>
                    Where &lt;map&gt; is the numeric ID of the MIDI instrument map,
                    &lt;midi_bank&gt; is an integer value between 0..16383
                    reflecting the MIDI bank value, &lt;midi_bank&gt;
                    and &lt;midi_prog&gt; an integer value between
                    0..127 reflecting the MIDI program value of the map's entrie's key
                    index triple.
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt;
                            separated list. Each answer line begins with the
                            information category name followed by a colon and then
                            a space character &lt;SP&gt; and finally the info
                            character string to that info category. At the moment
                            the following categories are defined:</t>
                            <t>"NAME" -
                                <list>
                                    <t>Name for this MIDI instrument map entry (if defined).
                                    This name shall be used by frontends for displaying a
                                    name for this mapped instrument. It can be set and
                                    changed with the
                                    <xref target="MAP MIDI_INSTRUMENT">"MAP MIDI_INSTRUMENT"</xref>
                                    command and does not have to be unique.
                                    (note that this character string may contain
                                    <xref target="character_set">escape sequences</xref>)</t>
                                </list>
                            </t>
                            <t>"ENGINE_NAME" -
                                <list>
                                    <t>Name of the engine to be deployed for this
                                    instrument.</t>
                                </list>
                            </t>
                            <t>"INSTRUMENT_FILE" -
                                <list>
                                    <t>File name of the instrument
                                    (note that this path may contain
                                    <xref target="character_set">escape sequences</xref>).</t>
                                </list>
                            </t>
                            <t>"INSTRUMENT_NR" -
                                <list>
                                    <t>Index of the instrument within the file.</t>
                                </list>
                            </t>
                            <t>"INSTRUMENT_NAME" -
                                <list>
                                    <t>Name of the loaded instrument as reflected by its file.
                                    In contrast to the "NAME" field, the "INSTRUMENT_NAME" field
                                    cannot be changed (note that this character string may contain
                                    <xref target="character_set">escape sequences</xref>).</t>
                                </list>
                            </t>
                            <t>"LOAD_MODE" -
                                <list>
                                    <t>Life time of instrument
                                    (see <xref target="MAP MIDI_INSTRUMENT">"MAP MIDI_INSTRUMENT"</xref> for details about this setting).</t>
                                </list>
                            </t>
                            <t>"VOLUME" -
                                <list>
                                    <t>master volume of the instrument as optionally
                                    dotted number (where a value &lt; 1.0 means attenuation
                                    and a value > 1.0 means amplification)</t>
                                </list>
                            </t>
                            <t>The mentioned fields above don't have to be in particular order.</t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET MIDI_INSTRUMENT INFO 1 45 120"</t>
                            <t>S: "NAME: Drums for Foo Song"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ENGINE_NAME: GigEngine"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_FILE: /usr/share/joesdrumkit.gig"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_NR: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_NAME: Joe's Drumkit"</t>
                            <t>&nbsp;&nbsp;&nbsp;"LOAD_MODE: PERSISTENT"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VOLUME: 1.0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Clear MIDI instrument map" anchor="CLEAR MIDI_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can clear a whole MIDI instrument map, that
                    is delete all its entries by sending the following command:</t>
                    <t>
                        <list>
                            <t>CLEAR MIDI_INSTRUMENTS &lt;map&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;map&gt; is the numeric ID of the map to clear.</t>
                    <t>The front-end can clear all MIDI instrument maps, that
                    is delete all entries of all maps by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>CLEAR MIDI_INSTRUMENTS ALL</t>
                        </list>
                    </t>
                    <t>The command "CLEAR MIDI_INSTRUMENTS ALL" does not delete the
                    maps, only their entries, thus the map's settings like
                    custom name will be preservevd.</t>

                   <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>always</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                       <list>
                            <t>C: "CLEAR MIDI_INSTRUMENTS 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                    <t>
                       <list>
                            <t>C: "CLEAR MIDI_INSTRUMENTS ALL"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>
            </section>


            <section title="Managing Instruments Database" anchor="Managing Instruments Database">
                <t>The following commands describe how to use and manage
                the instruments database.</t>
                <t>Notice:</t>
                    <t>
                        <list>
                            <t>All command arguments representing a path or
                            instrument/directory name support escape sequences as described in chapter
                            "<xref target="character_set">Character Set and Escape Sequences</xref>".
                            </t>
                            <t>All occurrences of a forward slash in instrument and directory
                               names are escaped with its hex (\x2f) or octal (\057) escape sequence.
                            </t>
                        </list>
                    </t>

                <section title="Creating a new instrument directory" anchor="ADD DB_INSTRUMENT_DIRECTORY" lscp_cmd="true">
                    <t>The front-end can add a new instrument directory to the
                    instruments database by sending the following command:</t>
                    <t>
                        <list>
                            <t>ADD DB_INSTRUMENT_DIRECTORY &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory
                    to be created (encapsulated into apostrophes).</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when the directory could not be created, which
                                    can happen if the directory already exists or the
                                    name contains not allowed symbols</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD DB_INSTRUMENT_DIRECTORY '/Piano Collection'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Deleting an instrument directory" anchor="REMOVE DB_INSTRUMENT_DIRECTORY" lscp_cmd="true">
                    <t>The front-end can delete a particular instrument directory
                    from the instruments database by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE DB_INSTRUMENT_DIRECTORY [FORCE] &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory
                    to delete. The optional FORCE argument can be used to
                    force the deletion of a non-empty directory and all its content.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>if the directory is deleted successfully</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist, or
                                    if trying to delete a non-empty directory,
                                    without using the FORCE argument.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE DB_INSTRUMENT_DIRECTORY FORCE '/Piano Collection'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting amount of instrument directories" anchor="GET DB_INSTRUMENT_DIRECTORIES" lscp_cmd="true">
                    <t>The front-end can retrieve the current amount of
                    directories in a specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET DB_INSTRUMENT_DIRECTORIES [RECURSIVE] &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory. If RECURSIVE is specified, the number of
                    all directories, including those located in subdirectories of the
                    specified directory, will be returned.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The current number of instrument directories
                            in the specified directory.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET DB_INSTRUMENT_DIRECTORIES '/'"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Listing all directories in specific directory" anchor="LIST DB_INSTRUMENT_DIRECTORIES" lscp_cmd="true">
                    <t>The front-end can retrieve the current list of directories
                    in specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>LIST DB_INSTRUMENT_DIRECTORIES [RECURSIVE] &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory. If RECURSIVE is specified, the absolute path names
                    of all directories, including those located in subdirectories of the
                    specified directory, will be returned.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>A comma separated list of all instrument directories
                            (encapsulated into apostrophes) in the specified directory.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST DB_INSTRUMENT_DIRECTORIES '/'"</t>
                            <t>S: "'Piano Collection','Percussion Collection'"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "LIST DB_INSTRUMENT_DIRECTORIES RECURSIVE '/'"</t>
                            <t>S: "'/Piano Collection','/Piano Collection/Acoustic','/Piano Collection/Acoustic/New','/Percussion Collection'"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting instrument directory information" anchor="GET DB_INSTRUMENT_DIRECTORY INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current settings of an
                    instrument directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET DB_INSTRUMENT_DIRECTORY INFO &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory the front-end is interested in.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>A brief description of the directory content.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                    <t>CREATED -
                                        <list>
                                            <t>The creation date and time of the directory,
                                            represented in "YYYY-MM-DD HH:MM:SS" format</t>
                                        </list>
                                    </t>
                                    <t>MODIFIED -
                                        <list>
                                            <t>The date and time of the last modification of the
                                            directory, represented in "YYYY-MM-DD HH:MM:SS" format</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET DB_INSTRUMENT_DIRECTORY INFO '/Piano Collection'"</t>
                            <t>S: "DESCRIPTION: Piano collection of instruments in GigaSampler format."</t>
                            <t>&nbsp;&nbsp;&nbsp;"CREATED: 2007-02-05 10:23:12"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MODIFIED: 2007-04-07 12:50:21"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Renaming an instrument directory" anchor="SET DB_INSTRUMENT_DIRECTORY NAME" lscp_cmd="true">
                    <t>The front-end can alter the name of a specific
                    instrument directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET DB_INSTRUMENT_DIRECTORY NAME &lt;dir&gt; &lt;name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory and
                    &lt;name&gt; is the new name for that directory.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given directory does not exists,
                                    or if a directory with name equal to the new
                                    name already exists.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET DB_INSTRUMENT_DIRECTORY NAME '/Piano Collection/Acustic' 'Acoustic'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Moving an instrument directory" anchor="MOVE DB_INSTRUMENT_DIRECTORY" lscp_cmd="true">
                    <t>The front-end can move a specific
                    instrument directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>MOVE DB_INSTRUMENT_DIRECTORY &lt;dir&gt; &lt;dst&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory
                    to move and &lt;dst&gt; is the location where the directory will
                    be moved to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case a given directory does not exists,
                                    or if a directory with name equal to the name
                                    of the specified directory already exists in
                                    the destination directory. Error is also thrown
                                    when trying to move a directory to a subdirectory
                                    of itself.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "MOVE DB_INSTRUMENT_DIRECTORY '/Acoustic' '/Piano Collection/Acoustic'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Copying instrument directories" anchor="COPY DB_INSTRUMENT_DIRECTORY" lscp_cmd="true">
                    <t>The front-end can copy a specific
                    instrument directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>COPY DB_INSTRUMENT_DIRECTORY &lt;dir&gt; &lt;dst&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory
                    to copy and &lt;dst&gt; is the location where the directory will
                    be copied to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case a given directory does not exists,
                                    or if a directory with name equal to the name
                                    of the specified directory already exists in
                                    the destination directory. Error is also thrown
                                    when trying to copy a directory to a subdirectory
                                    of itself.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "COPY DB_INSTRUMENT_DIRECTORY '/Piano Collection/Acoustic' '/Acoustic/Pianos'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Changing the description of directory" anchor="SET DB_INSTRUMENT_DIRECTORY DESCRIPTION" lscp_cmd="true">
                    <t>The front-end can alter the description of a specific
                    instrument directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET DB_INSTRUMENT_DIRECTORY DESCRIPTION &lt;dir&gt; &lt;desc&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; is the absolute path name of the directory and
                    &lt;desc&gt; is the new description for the directory
                    (encapsulated into apostrophes, supporting escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given directory does not exists.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET DB_INSTRUMENT_DIRECTORY DESCRIPTION '/Piano Collection' 'A collection of piano instruments in various format.'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Finding directories" anchor="FIND DB_INSTRUMENT_DIRECTORIES" lscp_cmd="true">
                    <t>The front-end can search for directories
                    in specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>FIND DB_INSTRUMENT_DIRECTORIES [NON_RECURSIVE] &lt;dir&gt; &lt;criteria-list&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory to search in. If NON_RECURSIVE is specified, the
                    directories located in subdirectories of the specified directory will not
                    be searched. &lt;criteria-list&gt; is a list of search criterias
                    in form of "key1=val1 key2=val2 ...". The following criterias are
                    allowed:</t>
                    <t>
                      <t>NAME='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to directories, which names
                              satisfy the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>CREATED='[&lt;date-after&gt;]..[&lt;date-before&gt;]'
                          <list>
                              <t>Restricts the search to directories, which creation
                              date satisfies the specified period, where &lt;date-after&gt;
                              and &lt;date-before&gt; are in "YYYY-MM-DD HH:MM:SS" format.
                              If &lt;date-after&gt; is omitted the search is restricted to
                              directories created before &lt;date-before&gt;. If
                              &lt;date-before&gt; is omitted, the search is restricted
                              to directories created after &lt;date-after&gt;.</t>
                          </list>
                      </t>

                      <t>MODIFIED='[&lt;date-after&gt;]..[&lt;date-before&gt;]'
                          <list>
                              <t>Restricts the search to directories, which
                              date of last modification satisfies the specified period, where
                              &lt;date-after&gt; and &lt;date-before&gt; are in "YYYY-MM-DD HH:MM:SS"
                              format. If &lt;date-after&gt; is omitted the search is restricted to
                              directories, which are last modified before &lt;date-before&gt;. If
                              &lt;date-before&gt; is omitted, the search is restricted to directories,
                              which are last modified after &lt;date-after&gt;.</t>
                          </list>
                      </t>

                      <t>DESCRIPTION='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to directories with description
                              that satisfies the supplied search string
                              (encapsulated into apostrophes, supporting escape
                              sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>
                    </t>

                    <t>Where &lt;search-string&gt; is either a regular expression, or a
                    word list separated with spaces for OR search and with '+' for AND search.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>A comma separated list with the absolute path names (encapsulated into
                            apostrophes) of all directories in the specified directory that satisfy
                            the supplied search criterias.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "FIND DB_INSTRUMENT_DIRECTORIES '/' NAME='Piano'"</t>
                            <t>S: "'/Piano Collection'"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "FIND DB_INSTRUMENT_DIRECTORIES '/' CREATED='..2007-04-01 09:30:13'"</t>
                            <t>S: "'/Piano Collection','/Percussions'"</t>
                        </list>
                    </t>
                </section>

                <section title="Adding instruments to the instruments database" anchor="ADD DB_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can add one or more instruments
                    to the instruments database by sending the following command:</t>
                    <t>
                        <list>
                            <t>ADD DB_INSTRUMENTS [NON_MODAL] [&lt;mode&gt;[ FILE_AS_DIR]] &lt;db_dir&gt; &lt;file_path&gt; [&lt;instr_index&gt;]</t>
                        </list>
                    </t>
                    <t>Where &lt;db_dir&gt; is the absolute path name of a directory
                    (encapsulated into apostrophes) in the instruments database in which
                    only the new instruments (that are not already in the database) will
                    be added, &lt;file_path&gt; is the absolute path name of a file or
                    directory in the file system (encapsulated into apostrophes). In case
                    an instrument file is supplied, only the instruments in the specified
                    file will be added to the instruments database. If the optional
                    &lt;instr_index&gt; (the index of the instrument within the given file)
                    is supplied too, then only the specified instrument will be added.
                    In case a directory is supplied, the instruments in that directory
                    will be added. The OPTIONAL &lt;mode&gt; argument is only applied
                    when a directory is provided as &lt;file_path&gt; and specifies how the
                    scanning will be done and has exactly the following possibilities:</t>
                    <t>
                        <list>
                            <t>"RECURSIVE" -
                                <list>
                                    <t>All instruments will be processed, including those
                                    in the subdirectories, and the respective subdirectory
                                    tree structure will be recreated in the instruments
                                    database</t>
                                </list>
                            </t>
                            <t>"NON_RECURSIVE" -
                                <list>
                                    <t>Only the instruments in the specified directory
                                    will be added, the instruments in the subdirectories
                                    will not be processed.</t>
                                </list>
                            </t>
                            <t>"FLAT" -
                                <list>
                                    <t>All instruments will be processed, including those
                                    in the subdirectories, but the respective subdirectory
                                    structure will not be recreated in the instruments
                                    database. All instruments will be added directly in
                                    the specified database directory.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                 <t> If FILE_AS_DIR argument is supplied, all instruments in an instrument
		 file will be added to a separate directory in the instruments database, which
		 name will be the name of the instrument file with the file extension stripped off.
                 </t>
                 <t>The difference between regular and NON_MODAL versions of the command
                    is that the regular command returns when the scanning is finished
                    while NON_MODAL version returns immediately and a background process is launched.
                    The <xref target="GET DB_INSTRUMENTS_JOB INFO">GET DB_INSTRUMENTS_JOB INFO</xref>
                    command can be used to monitor the scanning progress.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success when NON_MODAL is not supplied</t>
                                </list>
                            </t>
                            <t>"OK[&lt;job-id&gt;]" -
                                <list>
                                    <t>on success when NON_MODAL is supplied, where &lt;job-id&gt;
                                    is a numerical ID used to obtain status information about the job progress.
                                    See <xref target="GET DB_INSTRUMENTS_JOB INFO">GET DB_INSTRUMENTS_JOB INFO</xref>
                                    </t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if an invalid path is specified.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD DB_INSTRUMENTS '/Piano Collection' '/home/me/gigs/PMI Bosendorfer 290.gig' 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Removing an instrument" anchor="REMOVE DB_INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can remove a particular instrument
                    from the instruments database by sending the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE DB_INSTRUMENT &lt;instr_path&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr_path&gt; is the absolute path name
                    (in the instruments database) of the instrument to remove.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>if the instrument is removed successfully</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given path does not exist or
                                    is a directory.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE DB_INSTRUMENT '/Piano Collection/Bosendorfer 290'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting amount of instruments" anchor="GET DB_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can retrieve the current amount of
                    instruments in a specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET DB_INSTRUMENTS [RECURSIVE] &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path name
                    of the directory. If RECURSIVE is specified, the number of all
                    instruments, including those located in subdirectories of the
                    specified directory, will be returned.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The current number of instruments
                            in the specified directory.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET DB_INSTRUMENTS '/Piano Collection'"</t>
                            <t>S: "2"</t>
                        </list>
                    </t>
                </section>

                <section title="Listing all instruments in specific directory" anchor="LIST DB_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can retrieve the current list of instruments
                    in specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>LIST DB_INSTRUMENTS [RECURSIVE] &lt;dir&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory. If RECURSIVE is specified, the absolute path
                    names of all instruments, including those located in subdirectories
                    of the specified directory, will be returned.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>A comma separated list of all instruments
                            (encapsulated into apostrophes) in the specified directory.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST DB_INSTRUMENTS '/Piano Collection'"</t>
                            <t>S: "'Bosendorfer 290','Steinway D'"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "LIST DB_INSTRUMENTS RECURSIVE '/Piano Collection'"</t>
                            <t>S: "'/Piano Collection/Bosendorfer 290','/Piano Collection/Steinway D','/Piano Collection/Lite/Free Piano'"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting instrument information" anchor="GET DB_INSTRUMENT INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current settings of an
                    instrument by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET DB_INSTRUMENT INFO &lt;instr_path&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr_path&gt; should be replaced by the absolute path
                    name of the instrument the front-end is interested in.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>INSTRUMENT_FILE -
                                        <list>
                                            <t>File name of the instrument.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                    <t>INSTRUMENT_NR -
                                        <list>
                                            <t>Index of the instrument within the file.</t>
                                        </list>
                                    </t>
                                    <t>FORMAT_FAMILY -
                                        <list>
                                            <t>The format family of the instrument.</t>
                                        </list>
                                    </t>
                                    <t>FORMAT_VERSION -
                                        <list>
                                            <t>The format version of the instrument.</t>
                                        </list>
                                    </t>
                                    <t>SIZE -
                                        <list>
                                            <t>The size of the instrument in bytes.</t>
                                        </list>
                                    </t>
                                    <t>CREATED -
                                        <list>
                                            <t>The date and time when the instrument is added
                                            in the instruments database, represented in
                                           "YYYY-MM-DD HH:MM:SS" format</t>
                                        </list>
                                    </t>
                                    <t>MODIFIED -
                                        <list>
                                            <t>The date and time of the last modification of the
                                            instrument's database settings, represented in
                                            "YYYY-MM-DD HH:MM:SS" format</t>
                                        </list>
                                    </t>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>A brief description of the instrument.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                    <t>IS_DRUM -
                                        <list>
                                            <t>either true or false, determines whether the
                                            instrument is a drumkit or a chromatic instrument</t>
                                        </list>
                                    </t>
                                    <t>PRODUCT -
                                        <list>
                                            <t>The product title of the instrument.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                    <t>ARTISTS -
                                        <list>
                                            <t>Lists the artist names.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                    <t>KEYWORDS -
                                        <list>
                                            <t>Provides a list of keywords that refer to the instrument.
                                            Keywords are separated with semicolon and blank.
                                            Note that the character string may contain
                                            <xref target="character_set">escape sequences</xref>.</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET DB_INSTRUMENT INFO '/Piano Collection/Bosendorfer 290'"</t>
                            <t>S: "INSTRUMENT_FILE: /home/me/gigs/Bosendorfer 290.gig"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INSTRUMENT_NR: 0"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FORMAT_FAMILY: GIG"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FORMAT_VERSION: 2"</t>
                            <t>&nbsp;&nbsp;&nbsp;"SIZE: 2050871870"</t>
                            <t>&nbsp;&nbsp;&nbsp;"CREATED: 2007-02-05 10:23:12"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MODIFIED: 2007-04-07 12:50:21"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DESCRIPTION: "</t>
                            <t>&nbsp;&nbsp;&nbsp;"IS_DRUM: false"</t>
                            <t>&nbsp;&nbsp;&nbsp;"PRODUCT: GRANDIOSO Bosendorfer 290"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ARTISTS: Post Musical Instruments"</t>
                            <t>&nbsp;&nbsp;&nbsp;"KEYWORDS: Bosendorfer"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Renaming an instrument" anchor="SET DB_INSTRUMENT NAME" lscp_cmd="true">
                    <t>The front-end can alter the name of a specific
                    instrument by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET DB_INSTRUMENT NAME &lt;instr&gt; &lt;name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr&gt; is the absolute path name of the instrument and
                    &lt;name&gt; is the new name for that instrument.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given instrument does not exists,
                                    or if an instrument with name equal to the new
                                    name already exists.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET DB_INSTRUMENT NAME '/Piano Collection/Bosendorfer' 'Bosendorfer 290'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Moving an instrument" anchor="MOVE DB_INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can move a specific instrument to another directory by
                    sending the following command:</t>
                    <t>
                        <list>
                            <t>MOVE DB_INSTRUMENT &lt;instr&gt; &lt;dst&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr&gt; is the absolute path name of the instrument
                    to move and &lt;dst&gt; is the directory where the instrument will
                    be moved to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given instrument does not exists,
                                    or if an instrument with name equal to the name of the
                                    specified instrument already exists in the destination
                                    directory.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "MOVE DB_INSTRUMENT '/Piano Collection/Bosendorfer 290' '/Piano Collection/Acoustic'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Copying instruments" anchor="COPY DB_INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can copy a specific instrument to another directory by
                    sending the following command:</t>
                    <t>
                        <list>
                            <t>COPY DB_INSTRUMENT &lt;instr&gt; &lt;dst&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr&gt; is the absolute path name of the instrument
                    to copy and &lt;dst&gt; is the directory where the instrument will
                    be copied to.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given instrument does not exists,
                                    or if an instrument with name equal to the name of the
                                    specified instrument already exists in the destination
                                    directory.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "COPY DB_INSTRUMENT '/Piano Collection/Bosendorfer 290' '/Acoustic/Pianos/'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Changing the description of instrument" anchor="SET DB_INSTRUMENT DESCRIPTION" lscp_cmd="true">
                    <t>The front-end can alter the description of a specific
                    instrument by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET DB_INSTRUMENT DESCRIPTION &lt;instr&gt; &lt;desc&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;instr&gt; is the absolute path name of the instrument and
                    &lt;desc&gt; is the new description for the instrument
                    (encapsulated into apostrophes, supporting escape sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case the given instrument does not exists.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET DB_INSTRUMENT DESCRIPTION '/Piano Collection/Acoustic/Bosendorfer 290' 'No comment :)'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Finding instruments" anchor="FIND DB_INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can search for instruments
                    in specific directory by sending the following command:</t>
                    <t>
                        <list>
                            <t>FIND DB_INSTRUMENTS [NON_RECURSIVE] &lt;dir&gt; &lt;criteria-list&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;dir&gt; should be replaced by the absolute path
                    name of the directory to search in. If NON_RECURSIVE is specified, the
                    directories located in subdirectories of the specified directory will not
                    be searched. &lt;criteria-list&gt; is a list of search criterias
                    in form of "key1=val1 key2=val2 ...". The following criterias are
                    allowed:</t>
                    <t>
                      <t>NAME='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to instruments, which names
                              satisfy the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>SIZE=[&lt;min&gt;]..[&lt;max&gt;]
                          <list>
                              <t>Restricts the search to instruments, which
                              size is in the specified range. If &lt;min&gt; is omitted,
                              the search results are restricted to instruments with size less then
                              or equal to &lt;max&gt;. If &lt;max&gt; is omitted, the
                              search is restricted to instruments with size greater then
                              or equal to &lt;min&gt;.</t>
                          </list>
                      </t>

                      <t>CREATED='[&lt;date-after&gt;]..[&lt;date-before&gt;]'
                          <list>
                              <t>Restricts the search to instruments, which creation
                              date satisfies the specified period, where &lt;date-after&gt;
                              and &lt;date-before&gt; are in "YYYY-MM-DD HH:MM:SS" format.
                              If &lt;date-after&gt; is omitted the search is restricted to
                              instruments created before &lt;date-before&gt;. If
                              &lt;date-before&gt; is omitted, the search is restricted
                              to instruments created after &lt;date-after&gt;.</t>
                          </list>
                      </t>

                      <t>MODIFIED='[&lt;date-after&gt;]..[&lt;date-before&gt;]'
                          <list>
                              <t>Restricts the search to instruments, which
                              date of last modification satisfies the specified period, where
                              &lt;date-after&gt; and &lt;date-before&gt; are in "YYYY-MM-DD HH:MM:SS"
                              format. If &lt;date-after&gt; is omitted the search is restricted to
                              instruments, which are last modified before &lt;date-before&gt;. If
                              &lt;date-before&gt; is omitted, the search is restricted to instruments,
                              which are last modified after &lt;date-after&gt;.</t>
                          </list>
                      </t>

                      <t>DESCRIPTION='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to instruments with description
                              that satisfies the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>PRODUCT='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to instruments with product info
                              that satisfies the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>ARTISTS='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to instruments with artists info
                              that satisfies the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>KEYWORDS='&lt;search-string&gt;'
                          <list>
                              <t>Restricts the search to instruments with keyword list
                              that satisfies the supplied search string (encapsulated into apostrophes,
                              supporting escape sequences as described in chapter
                              "<xref target="character_set">Character Set and Escape Sequences</xref>").</t>
                          </list>
                      </t>

                      <t>IS_DRUM=true | false
                          <list>
                              <t>Either true or false. Restricts the search to
                              drum kits or chromatic instruments.</t>
                          </list>
                      </t>

                      <t>FORMAT_FAMILIES='&lt;format-list&gt;'
                          <list>
                              <t>Restricts the search to instruments of the supplied format families,
                              where &lt;format-list&gt; is a comma separated list of format families.</t>
                          </list>
                      </t>
                    </t>

                    <t>Where &lt;search-string&gt; is either a regular expression, or a
                    word list separated with spaces for OR search and with '+' for AND search.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>A comma separated list with the absolute path names (encapsulated into
                            apostrophes) of all instruments in the specified directory that satisfy
                            the supplied search criterias.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the given directory does not exist.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "FIND DB_INSTRUMENTS '/Piano Collection' NAME='bosendorfer+290'"</t>
                            <t>S: "'/Piano Collection/Bosendorfer 290'"</t>
                        </list>
                    </t>
                    <t>
                        <list>
                            <t>C: "FIND DB_INSTRUMENTS '/Piano Collection' CREATED='2007-04-01 09:30:13..'"</t>
                            <t>S: "'/Piano Collection/Bosendorfer 290','/Piano Collection/Steinway D'"</t>
                        </list>
                    </t>
                </section>

                <section title="Getting job status information" anchor="GET DB_INSTRUMENTS_JOB INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current status of a
                    particular database instruments job by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET DB_INSTRUMENTS_JOB INFO &lt;job-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;job-id&gt; should be replaced by the numerical ID
                    of the job the front-end is interested in.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>FILES_TOTAL -
                                        <list>
                                            <t>The total number of files scheduled for scanning</t>
                                        </list>
                                    </t>
                                    <t>FILES_SCANNED -
                                        <list>
                                            <t>The current number of scanned files</t>
                                        </list>
                                    </t>
                                    <t>SCANNING -
                                        <list>
                                            <t>The absolute path name of the file which is currently
                                            being scanned</t>
                                        </list>
                                    </t>
                                    <t>STATUS -
                                        <list>
                                            <t>An integer value between 0 and 100 indicating the
                                            scanning progress percentage of the file which is
                                            currently being scanned</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET DB_INSTRUMENTS_JOB INFO 2"</t>
                            <t>S: "FILES_TOTAL: 12"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FILES_SCANNED: 7"</t>
                            <t>&nbsp;&nbsp;&nbsp;"SCANNING: /home/me/gigs/Bosendorfer 290.gig"</t>
                            <t>&nbsp;&nbsp;&nbsp;"STATUS: 42"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Formatting the instruments database" anchor="FORMAT INSTRUMENTS_DB" lscp_cmd="true">
                    <t>The front-end can remove all instruments and directories and re-create
                    the instruments database structure (e.g., in case of a database corruption)
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>FORMAT INSTRUMENTS_DB</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>If the formatting of the instruments database
                                    failed.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                </section>

                <section title="Checking for lost instrument files" anchor="FIND LOST DB_INSTRUMENT_FILES" lscp_cmd="true">
                    <t>The front-end can retrieve the list of all instrument files in the instruments database
                    that don't exist in the filesystem by sending the following command:</t>
                    <t>
                        <list>
                            <t>FIND LOST DB_INSTRUMENT_FILES</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>A comma separated list with the absolute path names
                            (encapsulated into apostrophes) of all lost instrument files.</t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message.</t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "FIND LOST DB_INSTRUMENT_FILES"</t>
                            <t>S: "'/gigs/Bosendorfer 290.gig','/gigs/Steinway D.gig','/gigs/Free Piano.gig'"</t>
                        </list>
                    </t>
                </section>

                <section title="Replacing an instrument file" anchor="SET DB_INSTRUMENT FILE_PATH" lscp_cmd="true">
                    <t>The front-end can substitute all occurrences of an instrument file
                    in the instruments database with a new one by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET DB_INSTRUMENT FILE_PATH &lt;old_path&gt; &lt;new_path&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;old_path&gt; is the absolute path name of the instrument file
                    to substitute with &lt;new_path&gt;.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>on success</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and error message.</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "SET DB_INSTRUMENT FILE_PATH '/gigs/Bosendorfer 290.gig' '/gigs/pianos/Bosendorfer 290.gig'"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

            </section>



            <section title="Editing Instruments" anchor="editing_instruments">
                <t>The sampler allows to edit instruments while playing with the
                sampler by spawning an external (3rd party) instrument editor
                application for a given instrument. The 3rd party instrument
                editor applications have to place a respective plugin DLL file
                into the sampler's plugins directory. The sampler will
                automatically try to load all plugin DLLs in that directory on
                startup and only on startup!</t>
                <t>At the moment there is only one command for this feature set,
                but this will most probably change in future.</t>

                <section title="Opening an appropriate instrument editor application" anchor="EDIT INSTRUMENT" lscp_cmd="true">
                    <t>The front-end can request to open an appropriate instrument
                    editor application by sending the following command:</t>
                    <t>
                        <list>
                            <t>EDIT CHANNEL INSTRUMENT &lt;sampler-channel&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;sampler-channel&gt; should be replaced by the
                    number of the sampler channel as given by the
                    <xref target="ADD CHANNEL">"ADD CHANNEL"</xref>
                    or <xref target="LIST CHANNELS">"LIST CHANNELS"</xref>
                    command.</t>

                    <t>The sampler will try to ask all registered instrument
                    editors (or to be more specific: their sampler plugins)
                    whether they are capable to handle the instrument on the
                    given sampler channel. The sampler will simply use the first
                    instrument editor application which replied with a positive
                    answer and spawn that instrument editor application within
                    the sampler's process and provide that application access
                    to the instrument's data structures, so both applications
                    can share and access the same instruments data at the same
                    time, thus allowing to immediately hear changes with the
                    sampler made by the instrument editor.</t>

                    <t>Note: consequently instrument editors are always spawned
                    locally on the same machine where the sampler is running
                    on!</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>when an appropriate instrument editor was
                                    launched</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>when an appropriate instrument editor was
                                    launched, but there are noteworthy issues</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>when an appropriate instrument editor
                                    could not be launched</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "EDIT CHANNEL INSTRUMENT 0"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>
            </section>

            <section title="Managing Files" anchor="file_management">
                <t>You can query detailed information about files located
                at the same system where the sampler instance is running on.
                Using this command set allows to retrieve file information
                even remotely from another machine.</t>

                <section title="Retrieving amount of instruments of a file" anchor="GET FILE INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can retrieve the amount of instruments
                    within a given instrument file by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>GET FILE INSTRUMENTS &lt;filename&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;filename&gt; is the name of the instrument
                    file (encapsulated into apostrophes, supporting escape
                    sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape
	                Sequences</xref>").</t>

                    <t>The sampler will try to ask all sampler engines,
                    whether they support the given file and ask the first
                    engine with a positive answer for the amount of
                    instruments.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>On success, the sampler will answer by
                               returning the amount of instruments.
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the file could not be handled</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET FILE INSTRUMENTS 'D:/Sounds/Foo.gig'"</t>
                            <t>S: "10"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving all instruments of a file" anchor="LIST FILE INSTRUMENTS" lscp_cmd="true">
                    <t>The front-end can retrieve a list of all instruments
                    within a given instrument file by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>LIST FILE INSTRUMENTS &lt;filename&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;filename&gt; is the name of the instrument
                    file (encapsulated into apostrophes, supporting escape
                    sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape
	                Sequences</xref>").</t>

                    <t>The sampler will try to ask all sampler engines,
                    whether they support the given file and ask the first
                    engine with a positive answer for a list of IDs for the
                    instruments in the given file.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>On success, the sampler will answer by
                               returning a comma separated list of
                               instrument IDs.
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the file could not be handled</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "LIST FILE INSTRUMENTS 'D:/Sounds/Foo.gig'"</t>
                            <t>S: "0,1,2,3,4,5,6,7,8,9"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving information about one instrument in a file" anchor="GET FILE INSTRUMENT INFO" lscp_cmd="true">
                    <t>The front-end can retrieve detailed information
                    about a specific instrument within a given instrument
                    file by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET FILE INSTRUMENT INFO &lt;filename&gt;
                            &lt;instr-id&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;filename&gt; is the name of the instrument
                    file (encapsulated into apostrophes, supporting escape
                    sequences as described in chapter
                    "<xref target="character_set">Character Set and Escape
	                Sequences</xref>") and &lt;instr-id&gt; is the numeric
                    instrument ID as returned by the
                    <xref target="LIST FILE INSTRUMENTS">
                    "LIST FILE INSTRUMENTS"</xref> command.</t>

                    <t>The sampler will try to ask all sampler engines,
                    whether they support the given file and ask the first
                    engine with a positive answer for information about the
                    specific instrument in the given file.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the settings category name
                            followed by a colon and then a space character &lt;SP&gt; and finally
                            the info character string to that setting category. At the
                            moment the following categories are defined:</t>

                            <t>
                                <list>
                                    <t>NAME -
                                        <list>
                                            <t>name of the instrument as
                                            stored in the instrument file</t>
                                        </list>
                                    </t>
                                    <t>FORMAT_FAMILY -
                                        <list>
                                            <t>name of the sampler format
                                            of the given instrument</t>
                                        </list>
                                    </t>
                                    <t>FORMAT_VERSION -
                                        <list>
                                            <t>version of the sampler format
                                            the instrumen is stored as</t>
                                        </list>
                                    </t>
                                    <t>PRODUCT -
                                        <list>
                                            <t>official product name of the
                                            instrument as stored in the file
                                            </t>
                                        </list>
                                    </t>
                                    <t>ARTISTS -
                                        <list>
                                            <t>artists / sample library
                                            vendor of the instrument</t>
                                        </list>
                                    </t>
                                    <t>KEY_BINDINGS -
                                        <list>
                                            <t>comma separated list of integer values representing
                                               the instrument's key mapping in the range between 0 .. 127,
                                               reflecting the analog meaning of the MIDI specification.</t>
                                        </list>
                                    </t>
                                    <t>KEYSWITCH_BINDINGS -
                                        <list>
                                            <t>comma separated list of integer values representing
                                               the instrument's keyswitch mapping in the range between 0 .. 127,
                                               reflecting the analog meaning of the MIDI specification.</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET FILE INSTRUMENT INFO 'D:/Sounds/Foo.gig' 0"</t>
                            <t>S: "NAME: Lunatic Loops"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FORMAT_FAMILY: GIG"</t>
                            <t>&nbsp;&nbsp;&nbsp;"FORMAT_VERSION: 3"</t>
                            <t>&nbsp;&nbsp;&nbsp;"PRODUCT: The Backbone Bongo Beats"</t>
                            <t>&nbsp;&nbsp;&nbsp;"ARTISTS: Jimmy the Fish"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>
            </section>
            <section title="Managing Effects" anchor="effects">
                <t>There are two possible approaches to apply audio effects
                (e.g. reverb, delay, compression).
                You can either a) load and apply internal effects or you can b) route
                effect sends directly to dedicated output channels of your
                audio device and apply effects externally (e.g. by routing
                those dedicated output channels to another application).</t>
                <t>This chapter describes how to load and manage internal effects.
                If your intention is rather to apply effects externally, then
                you can omit this chapter. For applying effects externally, you
                just need to <xref target="CREATE FX_SEND">create FX sends</xref>
                on the respective sampler channel(s)
                and <xref target="SET FX_SEND AUDIO_OUTPUT_CHANNEL">adjust their destination audio channels</xref>
                appropriately, because by default FX sends are automatically routed
                directly to the audio output device.</t>
                <t>The sampler usually provides a set of internal audio effects.
                The exact set of effects depends on the availability
                of third party effect plugins installed on the system where the
                sampler runs on (e.g. LADSPA plugins).</t>
                <t>At the moment only "send effects" are supported. Support for
                "insert effects" and "master effects" is planned to be added at
                a later point.</t>
                <t>The following commands allow to retrieve the set of internal
                effects available to the sampler, detailed information about
                those effects and to create and destroy instances of such
                effects. After an instance of an effect is created, the effect
                instance can be inserted into the audio signal path of the
                sampler, e.g. as send effect.</t>
                <t>The sampler allows to create an arbitrary amount of so called
                send effect chains. Each effect chain can host an arbitrary
                amount of effect instances. The output of the first effect
                instance in an effect chain is fed to the input of the second
                effect instance of the chain and so on. So effects in one chain
                are processed sequentially. Send effect chains however are
                processed in parallel to other send effect chains. Audio signals
                of sampler channels are fed to send effects by creating FX sends
                to the respective sampler channel and assigning a destination
                send effect to that FX by using the
                <xref target="SET FX_SEND EFFECT">"SET FX_SEND EFFECT"</xref>
                command. The latter allows to route the FX send to the beginning
                of a send effect chain, as well as directly to any other
                position of the send effect chain.</t>

                <section title="Retrieve amount of available effects" anchor="GET AVAILABLE_EFFECTS" lscp_cmd="true">
                    <t>The front-end can retrieve the amount of internal
                    effects, available to the sampler by sending
                    the following command:</t>
                    <t>
                        <list>
                            <t>GET AVAILABLE_EFFECTS</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning the current
                            number of effects available to the sampler.</t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET AVAILABLE_EFFECTS"</t>
                            <t>S: "129"</t>
                        </list>
                    </t>
                </section>

                <section title="Get list of available effects" anchor="LIST AVAILABLE_EFFECTS" lscp_cmd="true">
                    <t>The set of available internal effects can change at
                    runtime. The front-end can retrieve the list of internal
                    effects, available to the sampler by sending the following
                    command:</t>
                    <t>
                        <list>
                            <t>LIST AVAILABLE_EFFECTS</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning a comma
                            separated list with numerical IDs of effects. Note:
                            the numercial ID of an effect is generated by the
                            sampler for the current moment. The numerical ID of
                            the same effect can change at runtime, e.g. when the
                            user requests a rescan of available effect plugins.
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST AVAILABLE_EFFECTS"</t>
                            <t>S: "5,6,7,120,121,122,123,124"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving general information about an effect" anchor="GET EFFECT INFO" lscp_cmd="true">
                    <t>The front-end can ask for general information about an
                    effect by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET EFFECT INFO &lt;effect-index&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-index&gt; is the numerical ID of an
                    effect as returned by the
                    <xref target="LIST AVAILABLE_EFFECTS">"LIST AVAILABLE_EFFECTS"</xref>
                    command.</t>
                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the effect information
                            category name, followed by a colon and then a space
                            character &lt;SP&gt; and finally the info character
                            string to that effect information category. At the
                            moment the following categories are defined:</t>
                            <t>
                                <list>
                                    <t>SYSTEM -
                                        <list>
                                            <t>name of the effect plugin system
                                            the effect is based on
                                            (e.g. "LADSPA")</t>
                                        </list>
                                    </t>
                                    <t>MODULE -
                                        <list>
                                            <t>module of the effect plugin
                                            system that contains this effect,
                                            the module is usually the
                                            dynamic-linked library (DLL)
                                            filename of the effect plugin,
                                            including full path (note that this
                                            filename may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>NAME -
                                        <list>
                                            <t>character string defining the
                                            unique name of the effect within its
                                            module (note that the character
                                            string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>human readable name of the
                                            effect, intended to be displayed in
                                            user interfaces (note that the
                                            character string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET EFFECT INFO 121"</t>
                            <t>S: "SYSTEM: LADSPA"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MODULE: /usr/lib/ladspa/lowpass_iir_1891.so"</t>
                            <t>&nbsp;&nbsp;&nbsp;"NAME: lowpass_iir"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DESCRIPTION: Glame Lowpass Filter"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Creating an instance of an effect by its portable ID" anchor="CREATE EFFECT_INSTANCE" lscp_cmd="true">
                    <t>The front-end can spawn an instance of the desired
                    effect by sending the following command:</t>
                    <t>
                        <list>
                            <t>CREATE EFFECT_INSTANCE &lt;effect-system&gt; &lt;module&gt; &lt;effect-name&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-system&gt; is the "SYSTEM" field,
                    &lt;module&gt; the "MODULE" field and &lt;effect-name&gt;
                    the "NAME" field as returned by the
                    <xref target="GET EFFECT INFO">"GET EFFECT INFO"</xref>
                    command. The filename of argument &lt;module&gt; and the
                    character string of argument &lt;effect-name&gt; may contain
                    <xref target="character_set">escape sequences</xref>.</t>

                    <t>The sampler will try to load the requested effect and to
                    create an instance of it. To allow loading the same effect
                    on a different machine, probably even running a completely
                    different operating system (e.g. Linux vs. Windows), the
                    sampler tries to match &lt;module&gt; "softly". That means
                    it first tries to find an effect that exactly matches the
                    given &lt;module&gt; argument. If there is no exact match,
                    the sampler will try to lower the restrictions on matching
                    the &lt;module&gt; argument more and more, e.g. by ignoring
                    upper / lower case differences and by ignoring the path of
                    the DLL filename and file extension. If there is still no
                    match at the end, the sampler will try to ignore the
                    &lt;module&gt; argument completely and as a last resort
                    search for an effect that only matches the given
                    &lt;effect-system&gt; and &lt;effect-name&gt; arguments.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;effect-instance&gt;]" -
                                <list>
                                    <t>in case the effect instance was
                                    successfully created, where
                                    &lt;effect-instance&gt; is the numerical ID
                                    of the new effect instance</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the effect instance was spawned
                                    successfully, but there are noteworthy
                                    issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the effect could not be instantiated</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "CREATE EFFECT_INSTANCE LADSPA '/usr/lib/ladspa/mod_delay_1419.so' 'modDelay'"</t>
                            <t>S: "OK[0]"</t>
                        </list>
                    </t>
                </section>

                <section title="Creating an instance of an effect by its numerical ID" anchor="CREATE EFFECT_INSTANCE (non-portable)">
                    <t>The front-end can spawn an instance of the desired
                    effect by sending the following command:</t>
                    <t>
                        <list>
                            <t>CREATE EFFECT_INSTANCE &lt;effect-index&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-index&gt; is the numerical ID of the
                    effect as returned by the
                    <xref target="LIST AVAILABLE_EFFECTS">"LIST AVAILABLE_EFFECTS"</xref>
                    command.</t>

                    <t>The sampler will try to load the requested effect and to
                    create an instance of it.</t>

                    <t>Note: Since the numerical ID of a certain effect can
                    change at any time, you should not use this command in
                    LSCP files to restore a certain effect at a later time! To
                    store a sampler session including all its effects, use the
                    <xref target="CREATE EFFECT_INSTANCE">portable text-based
                    version of "CREATE EFFECT_INSTANCE"</xref> instead! This
                    allows to restore a sampler session with all its effects
                    also on other machines, possibly even running a completely
                    different operating system (e.g. Linux vs. Windows), with
                    different plugin directories or plugin DLL names.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;effect-instance&gt;]" -
                                <list>
                                    <t>in case the effect instance was
                                    successfully created, where
                                    &lt;effect-instance&gt; is the numerical ID
                                    of the new effect instance</t>
                                </list>
                            </t>
                            <t>"WRN:&lt;warning-code&gt;:&lt;warning-message&gt;" -
                                <list>
                                    <t>in case the effect instance was spawned
                                    successfully, but there are noteworthy
                                    issue(s) related, providing an appropriate
                                    warning code and warning message</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the effect could not be instantiated</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "CREATE EFFECT_INSTANCE 72"</t>
                            <t>S: "OK[5]"</t>
                        </list>
                    </t>
                </section>

                <section title="Destroy an effect instance" anchor="DESTROY EFFECT_INSTANCE" lscp_cmd="true">
                    <t>The front-end can destroy an unusued effect instance and
                    thus freeing it from memory by sending the following command:</t>
                    <t>
                        <list>
                            <t>DESTROY EFFECT_INSTANCE &lt;effect-instance&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-instance&gt; is the numerical ID of the
                    effect instance as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref> or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command.</t>

                    <t>The effect instance can only be destroyed if it's not
                    used in any part of the sampler's audio signal path anymore.
                    If the effect instance is still in use somewhere, trying to
                    destroy the effect instance will result in an error
                    message.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the effect instance was successfully destroyed</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "DESTROY EFFECT_INSTANCE 5"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieve amount of effect instances" anchor="GET EFFECT_INSTANCES" lscp_cmd="true">
                    <t>The front-end can retrieve the current amount of effect
                    instances by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET EFFECT_INSTANCES</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning the current
                            number of effect instances created and not yet
                            destroyed in the current sampler session.</t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET EFFECT_INSTANCES"</t>
                            <t>S: "14"</t>
                        </list>
                    </t>
                </section>

                <section title="Get list of effect instances" anchor="LIST EFFECT_INSTANCES" lscp_cmd="true">
                    <t>The front-end can retrieve the current list of effect
                    instances by sending the following command:</t>
                    <t>
                        <list>
                            <t>LIST EFFECT_INSTANCES</t>
                        </list>
                    </t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning a comma
                            separated list with numerical IDs of effects
                            instances.
                            </t>
                        </list>
                    </t>
                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "LIST EFFECT_INSTANCES"</t>
                            <t>S: "9,11,14,15,16,17,25"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving current information about an effect instance" anchor="GET EFFECT_INSTANCE INFO" lscp_cmd="true">
                    <t>The front-end can ask for the current information about
                    a particular effect instance by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET EFFECT_INSTANCE INFO &lt;effect-instance&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-instance&gt; is the numerical ID of an
                    effect instance as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref>
                    or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information
                            category name, followed by a colon and then a space
                            character &lt;SP&gt; and finally the info character
                            string to that information category. At the
                            moment the following categories are defined:</t>
                            <t>
                                <list>
                                    <t>SYSTEM -
                                        <list>
                                            <t>name of the effect plugin system
                                            the effect is based on
                                            (e.g. "LADSPA")</t>
                                        </list>
                                    </t>
                                    <t>MODULE -
                                        <list>
                                            <t>module of the effect plugin
                                            system that contains this effect,
                                            the module is usually the
                                            dynamic-linked library (DLL)
                                            filename of the effect plugin,
                                            including full path (note that this
                                            filename may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>NAME -
                                        <list>
                                            <t>character string defining the
                                            unique name of the effect within its
                                            module (note that the character
                                            string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>human readable name of the
                                            effect, intended to be displayed in
                                            user interfaces (note that the
                                            character string may contain
                                            <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>INPUT_CONTROLS -
                                        <list>
                                            <t>amount of input controls the
                                            effect instance provides, to allow
                                            controlling the effect parameters in
                                            realtime</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET EFFECT_INSTANCE INFO 3"</t>
                            <t>S: "SYSTEM: LADSPA"</t>
                            <t>&nbsp;&nbsp;&nbsp;"MODULE: /usr/lib/ladspa/mod_delay_1419.so"</t>
                            <t>&nbsp;&nbsp;&nbsp;"NAME: modDelay"</t>
                            <t>&nbsp;&nbsp;&nbsp;"DESCRIPTION: Modulatable delay"</t>
                            <t>&nbsp;&nbsp;&nbsp;"INPUT_CONTROLS: 1"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving information about an effect parameter" anchor="GET EFFECT_INSTANCE_INPUT_CONTROL INFO" lscp_cmd="true">
                    <t>Effects typically provide a certain set of effect
                    parameters which can be altered by the user in realtime
                    (e.g. depth of a reverb effect, duration of a delay effect,
                    dry / wet signal ratio). Those controllable effect parameters
                    are called "input controls". The front-end can ask for the
                    current information of an effect instance's input control
                    by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET EFFECT_INSTANCE_INPUT_CONTROL INFO &lt;effect-instance&gt; &lt;input-control&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-instance&gt; is the numerical ID of an
                    effect instance as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref>
                    or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command and &lt;input-control&gt; is the index of the input
                    control within the numerical bounds as returned by the
                    "INPUT_CONTROLS" field of the
                    <xref target="GET EFFECT_INSTANCE INFO">"GET EFFECT_INSTANCE INFO"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information
                            category name, followed by a colon and then a space
                            character &lt;SP&gt; and finally the info character
                            string to that information category. There are
                            information categories which are always returned,
                            independent of the respective effect parameter and
                            there are optional information categories
                            which are only shown for certain effect parameters.
                            At the moment the following categories are defined:</t>
                            <t>
                                <list>
                                    <t>DESCRIPTION -
                                        <list>
                                            <t>(always returned)
                                            human readable name of the
                                            effect parameter, intended to be
                                            displayed in user interfaces (note
                                            that the character string may
                                            contain <xref target="character_set">escape sequences</xref>)</t>
                                        </list>
                                    </t>
                                    <t>VALUE -
                                        <list>
                                            <t>
                                            (always returned)
                                            current (optional dotted)
                                            floating point value of this effect
                                            parameter</t>
                                        </list>
                                    </t>
                                    <t>RANGE_MIN -
                                        <list>
                                            <t>
                                            (optionally returned)
                                            minimum allowed value for this
                                            effect parameter</t>
                                        </list>
                                    </t>
                                    <t>RANGE_MAX -
                                        <list>
                                            <t>
                                            (optionally returned)
                                            maximum allowed value for this
                                            effect parameter</t>
                                        </list>
                                    </t>
                                    <t>POSSIBILITIES -
                                        <list>
                                            <t>
                                            (optionally returned)
                                            comma separated list of
                                            (optional dotted) floating point
                                            numbers, reflecting the exact set of
                                            possible values for this effect
                                            parameter</t>
                                        </list>
                                    </t>
                                    <t>DEFAULT -
                                        <list>
                                            <t>
                                            (optionally returned)
                                            default value of this effect
                                            parameter</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET EFFECT_INSTANCE_INPUT_CONTROL INFO 1 0"</t>
                            <t>S: "DESCRIPTION: Base delay (s)"</t>
                            <t>&nbsp;&nbsp;&nbsp;"VALUE: 0.500"</t>
                            <t>&nbsp;&nbsp;&nbsp;"RANGE_MIN: 0.000"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Altering an effect parameter" anchor="SET EFFECT_INSTANCE_INPUT_CONTROL VALUE" lscp_cmd="true">
                    <t>The front-end can alter the current value of an effect
                    parameter by sending the following command:</t>
                    <t>
                        <list>
                            <t>SET EFFECT_INSTANCE_INPUT_CONTROL VALUE &lt;effect-instance&gt; &lt;input-control&gt; &lt;value&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;effect-instance&gt; is the numerical ID of the
                    effect instance as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref> or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command, &lt;input-control&gt; is the index of the input
                    control within the numerical bounds as returned by the
                    "INPUT_CONTROLS" field of the
                    <xref target="GET EFFECT_INSTANCE INFO">"GET EFFECT_INSTANCE INFO"</xref>
                    command and &lt;value&gt; is the new (optional dotted)
                    floating point value for this effect parameter.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the effect was altered successfully</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>in case it failed, providing an appropriate error code and
                                    error message</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "SET EFFECT_INSTANCE_INPUT_CONTROL VALUE 0 1 0.5"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieve amount of send effect chains" anchor="GET SEND_EFFECT_CHAINS" lscp_cmd="true">
                    <t>The front-end can retrieve the current amount of send
                    effect chains of an audio output device by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>GET SEND_EFFECT_CHAINS &lt;audio-device&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning the current
                            number of send effect chains of the supplied audio
                            output device.</t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "GET SEND_EFFECT_CHAINS 0"</t>
                            <t>S: "4"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieve list of send effect chains" anchor="LIST SEND_EFFECT_CHAINS" lscp_cmd="true">
                    <t>The front-end can retrieve the current list of send
                    effect chains of an audio output device by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>LIST SEND_EFFECT_CHAINS &lt;audio-device&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>The sampler will answer by returning a comma
                            separated list with numerical IDs of send effect
                            chains of the supplied audio output device.
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "LIST SEND_EFFECT_CHAINS 0"</t>
                            <t>S: "3,4,7"</t>
                        </list>
                    </t>
                </section>

                <section title="Add send effect chain" anchor="ADD SEND_EFFECT_CHAIN" lscp_cmd="true">
                    <t>The front-end can add a send effect chain by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>ADD SEND_EFFECT_CHAIN &lt;audio-device&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK[&lt;effect-chain&gt;]" -
                                <list>
                                    <t>in case the send effect chain was
                                    added successfully, where
                                    &lt;effect-chain&gt; is the numerical ID
                                    of the new send effect chain</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the send effect chain could not be added</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "ADD SEND_EFFECT_CHAIN 0"</t>
                            <t>S: "OK[2]"</t>
                        </list>
                    </t>
                </section>

                <section title="Remove send effect chain" anchor="REMOVE SEND_EFFECT_CHAIN" lscp_cmd="true">
                    <t>The front-end can remove a send effect chain by sending
                    the following command:</t>
                    <t>
                        <list>
                            <t>REMOVE SEND_EFFECT_CHAIN &lt;audio-device&gt; &lt;effect-chain&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command and &lt;effect-chain&gt; by the numerical ID as
                    returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the send effect chain was
                                    removed successfully</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the send effect chain could not be removed</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE SEND_EFFECT_CHAIN 0 2"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Retrieving information about a send effect chain" anchor="GET SEND_EFFECT_CHAIN INFO" lscp_cmd="true">
                    <t>The front-end can ask for information of a send effect
                    chain by sending the following command:</t>
                    <t>
                        <list>
                            <t>GET SEND_EFFECT_CHAIN INFO &lt;audio-device&gt; &lt;effect-chain&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command and &lt;effect-chain&gt; by the numerical ID as
                    returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>LinuxSampler will answer by sending a &lt;CRLF&gt; separated list.
                            Each answer line begins with the information
                            category name, followed by a colon and then a space
                            character &lt;SP&gt; and finally the info character
                            string to that information category.
                            At the moment the following categories are defined:</t>
                            <t>
                                <list>
                                    <t>EFFECT_COUNT -
                                        <list>
                                            <t>amount of effects in this send
                                            effect chain</t>
                                        </list>
                                    </t>
                                    <t>EFFECT_SEQUENCE -
                                        <list>
                                            <t>comma separated list of the
                                            numerical IDs of the effect
                                            instances in this send effect chain,
                                            in the order as they are procssed in
                                            the effect chain</t>
                                        </list>
                                    </t>
                                </list>
                            </t>
                        </list>
                    </t>
                    <t>The mentioned fields above don't have to be in particular order.</t>

                    <t>Example:</t>
                    <t>
                        <list>
                            <t>C: "GET SEND_EFFECT_CHAIN INFO 0 2"</t>
                            <t>S: "EFFECT_COUNT: 3"</t>
                            <t>&nbsp;&nbsp;&nbsp;"EFFECT_SEQUENCE: 31,4,7"</t>
                            <t>&nbsp;&nbsp;&nbsp;"."</t>
                        </list>
                    </t>
                </section>

                <section title="Append effect instance to a send effect chain" anchor="APPEND SEND_EFFECT_CHAIN EFFECT" lscp_cmd="true">
                    <t>The front-end can add an unused effect instance to the
                    end of a send effect chain by sending the following command:</t>
                    <t>
                        <list>
                            <t>APPEND SEND_EFFECT_CHAIN EFFECT &lt;audio-device&gt; &lt;effect-chain&gt; &lt;effect-instance&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command and &lt;effect-chain&gt; by the numerical ID as
                    returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command and &lt;effect-instance&gt; as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref> or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command.</t>
                    <t>Only unused effect instances can be added to the effect
                    chain. Trying to add an effect instance which is already in
                    use somewhere in the audio signal path of the sampler will
                    result in an error.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the effect instance was
                                    added successfully to the chain</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the effect instance could not be added</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "APPEND SEND_EFFECT_CHAIN EFFECT 0 2 38"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Insert effect instance to a send effect chain" anchor="INSERT SEND_EFFECT_CHAIN EFFECT" lscp_cmd="true">
                    <t>The front-end can add an unused effect instance to a
                    certain position of a send effect chain by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>INSERT SEND_EFFECT_CHAIN EFFECT &lt;audio-device&gt; &lt;effect-chain&gt; &lt;chain-pos&gt; &lt;effect-instance&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command, &lt;effect-chain&gt; by the numerical ID as
                    returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command, &lt;effect-instance&gt; as returned by the
                    <xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref> or
                    <xref target="LIST EFFECT_INSTANCES">"LIST EFFECT_INSTANCES"</xref>
                    command and &lt;chain-pos&gt; the exact position of the
                    effect chain where the supplied effect shall be inserted
                    to.</t>
                    <t>Only unused effect instances can be added to the effect
                    chain. Trying to add an effect instance which is already in
                    use somewhere in the audio signal path of the sampler will
                    result in an error.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the effect instance was
                                    added successfully to the chain</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the effect instance could not be added</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "INSERT SEND_EFFECT_CHAIN EFFECT 0 2 4 38"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

                <section title="Remove effect instance from send effect chain" anchor="REMOVE SEND_EFFECT_CHAIN EFFECT" lscp_cmd="true">
                    <t>The front-end can remove an effect instance from a
                    certain position of a send effect chain by sending the
                    following command:</t>
                    <t>
                        <list>
                            <t>REMOVE SEND_EFFECT_CHAIN EFFECT &lt;audio-device&gt; &lt;effect-chain&gt; &lt;chain-pos&gt;</t>
                        </list>
                    </t>
                    <t>Where &lt;audio-device&gt; should be replaced by the
                    numerical ID of the audio output device as given by the
                    <xref target="CREATE AUDIO_OUTPUT_DEVICE">"CREATE AUDIO_OUTPUT_DEVICE"</xref>
                    or <xref target="LIST AUDIO_OUTPUT_DEVICES">"LIST AUDIO_OUTPUT_DEVICES"</xref>
                    command, &lt;effect-chain&gt; by the numerical ID as
                    returned by the
                    <xref target="ADD SEND_EFFECT_CHAIN">"ADD SEND_EFFECT_CHAIN"</xref>
                    or
                    <xref target="LIST SEND_EFFECT_CHAINS">"LIST SEND_EFFECT_CHAINS"</xref>
                    command and &lt;chain-pos&gt; the exact position of the
                    effect instance to be removed from the effect chain.</t>

                    <t>Possible Answers:</t>
                    <t>
                        <list>
                            <t>"OK" -
                                <list>
                                    <t>in case the effect instance was
                                    removed successfully</t>
                                </list>
                            </t>
                            <t>"ERR:&lt;error-code&gt;:&lt;error-message&gt;" -
                                <list>
                                    <t>if the effect instance could not be removed</t>
                                </list>
                            </t>
                        </list>
                    </t>

                    <t>Examples:</t>
                    <t>
                        <list>
                            <t>C: "REMOVE SEND_EFFECT_CHAIN EFFECT 0 2 4"</t>
                            <t>S: "OK"</t>
                        </list>
                    </t>
                </section>

            </section>
        </section>

        <section title="Command Syntax" anchor="command_syntax">
            <t>The grammar of the control protocol as descibed in <xref target="control_commands"/>
            is defined below using Backus-Naur Form (BNF as described in <xref target="RFC2234"/>)
            where applicable.
            </t>
            <!--
                This section is automatically generated by scripts/update_grammar.pl
                from src/network/lscp.y (yacc input file). Do not modify this section
                manually !
            -->
            <!-- GRAMMAR_BNF_BEGIN - do NOT delete or modify this line !!! -->

<t>input =
	<list>
		<t>line
		</t>
		<t>/ error
		</t>
	</list>
</t>
<t>line =
	<list>
		<t>statement LF
		</t>
		<t>/ statement CR LF
		</t>
	</list>
</t>
<t>statement =
	<list>
		<t>/* epsilon (empty statement/line ignored) */
		</t>
		<t>/ comment
		</t>
		<t>/ command
		</t>
	</list>
</t>
<t>comment =
	<list>
		<t>'#'
		</t>
		<t>/ comment '#'
		</t>
		<t>/ comment SP
		</t>
		<t>/ comment number
		</t>
		<t>/ comment string
		</t>
	</list>
</t>
<t>command =
	<list>
		<t>ADD SP add_instruction
		</t>
		<t>/ MAP SP map_instruction
		</t>
		<t>/ UNMAP SP unmap_instruction
		</t>
		<t>/ GET SP get_instruction
		</t>
		<t>/ CREATE SP create_instruction
		</t>
		<t>/ DESTROY SP destroy_instruction
		</t>
		<t>/ LIST SP list_instruction
		</t>
		<t>/ LOAD SP load_instruction
		</t>
		<t>/ REMOVE SP remove_instruction
		</t>
		<t>/ SET SP set_instruction
		</t>
		<t>/ SUBSCRIBE SP subscribe_event
		</t>
		<t>/ UNSUBSCRIBE SP unsubscribe_event
		</t>
		<t>/ RESET SP reset_instruction
		</t>
		<t>/ CLEAR SP clear_instruction
		</t>
		<t>/ FIND SP find_instruction
		</t>
		<t>/ MOVE SP move_instruction
		</t>
		<t>/ COPY SP copy_instruction
		</t>
		<t>/ EDIT SP edit_instruction
		</t>
		<t>/ FORMAT SP format_instruction
		</t>
		<t>/ SEND SP send_instruction
		</t>
		<t>/ APPEND SP append_instruction
		</t>
		<t>/ INSERT SP insert_instruction
		</t>
		<t>/ RESET
		</t>
		<t>/ QUIT
		</t>
	</list>
</t>
<t>add_instruction =
	<list>
		<t>CHANNEL
		</t>
		<t>/ CHANNEL SP MIDI_INPUT SP sampler_channel SP device_index
		</t>
		<t>/ CHANNEL SP MIDI_INPUT SP sampler_channel SP device_index SP midi_input_port_index
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP db_path
		</t>
		<t>/ DB_INSTRUMENTS SP NON_MODAL SP scan_mode SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP NON_MODAL SP scan_mode SP FILE_AS_DIR SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP scan_mode SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP scan_mode SP FILE_AS_DIR SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP NON_MODAL SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP NON_MODAL SP db_path SP filename SP instrument_index
		</t>
		<t>/ DB_INSTRUMENTS SP db_path SP filename
		</t>
		<t>/ DB_INSTRUMENTS SP db_path SP filename SP instrument_index
		</t>
		<t>/ MIDI_INSTRUMENT_MAP
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP map_name
		</t>
		<t>/ SEND_EFFECT_CHAIN SP device_index
		</t>
	</list>
</t>
<t>subscribe_event =
	<list>
		<t>AUDIO_OUTPUT_DEVICE_COUNT
		</t>
		<t>/ AUDIO_OUTPUT_DEVICE_INFO
		</t>
		<t>/ MIDI_INPUT_DEVICE_COUNT
		</t>
		<t>/ MIDI_INPUT_DEVICE_INFO
		</t>
		<t>/ CHANNEL_COUNT
		</t>
		<t>/ CHANNEL_MIDI
		</t>
		<t>/ DEVICE_MIDI
		</t>
		<t>/ VOICE_COUNT
		</t>
		<t>/ STREAM_COUNT
		</t>
		<t>/ BUFFER_FILL
		</t>
		<t>/ CHANNEL_INFO
		</t>
		<t>/ FX_SEND_COUNT
		</t>
		<t>/ FX_SEND_INFO
		</t>
		<t>/ MIDI_INSTRUMENT_MAP_COUNT
		</t>
		<t>/ MIDI_INSTRUMENT_MAP_INFO
		</t>
		<t>/ MIDI_INSTRUMENT_COUNT
		</t>
		<t>/ MIDI_INSTRUMENT_INFO
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY_COUNT
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY_INFO
		</t>
		<t>/ DB_INSTRUMENT_COUNT
		</t>
		<t>/ DB_INSTRUMENT_INFO
		</t>
		<t>/ DB_INSTRUMENTS_JOB_INFO
		</t>
		<t>/ MISCELLANEOUS
		</t>
		<t>/ TOTAL_STREAM_COUNT
		</t>
		<t>/ TOTAL_VOICE_COUNT
		</t>
		<t>/ GLOBAL_INFO
		</t>
		<t>/ EFFECT_INSTANCE_COUNT
		</t>
		<t>/ EFFECT_INSTANCE_INFO
		</t>
		<t>/ SEND_EFFECT_CHAIN_COUNT
		</t>
		<t>/ SEND_EFFECT_CHAIN_INFO
		</t>
	</list>
</t>
<t>unsubscribe_event =
	<list>
		<t>AUDIO_OUTPUT_DEVICE_COUNT
		</t>
		<t>/ AUDIO_OUTPUT_DEVICE_INFO
		</t>
		<t>/ MIDI_INPUT_DEVICE_COUNT
		</t>
		<t>/ MIDI_INPUT_DEVICE_INFO
		</t>
		<t>/ CHANNEL_COUNT
		</t>
		<t>/ CHANNEL_MIDI
		</t>
		<t>/ DEVICE_MIDI
		</t>
		<t>/ VOICE_COUNT
		</t>
		<t>/ STREAM_COUNT
		</t>
		<t>/ BUFFER_FILL
		</t>
		<t>/ CHANNEL_INFO
		</t>
		<t>/ FX_SEND_COUNT
		</t>
		<t>/ FX_SEND_INFO
		</t>
		<t>/ MIDI_INSTRUMENT_MAP_COUNT
		</t>
		<t>/ MIDI_INSTRUMENT_MAP_INFO
		</t>
		<t>/ MIDI_INSTRUMENT_COUNT
		</t>
		<t>/ MIDI_INSTRUMENT_INFO
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY_COUNT
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY_INFO
		</t>
		<t>/ DB_INSTRUMENT_COUNT
		</t>
		<t>/ DB_INSTRUMENT_INFO
		</t>
		<t>/ DB_INSTRUMENTS_JOB_INFO
		</t>
		<t>/ MISCELLANEOUS
		</t>
		<t>/ TOTAL_STREAM_COUNT
		</t>
		<t>/ TOTAL_VOICE_COUNT
		</t>
		<t>/ GLOBAL_INFO
		</t>
		<t>/ EFFECT_INSTANCE_COUNT
		</t>
		<t>/ EFFECT_INSTANCE_INFO
		</t>
		<t>/ SEND_EFFECT_CHAIN_COUNT
		</t>
		<t>/ SEND_EFFECT_CHAIN_INFO
		</t>
	</list>
</t>
<t>map_instruction =
	<list>
		<t>MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog SP engine_name SP filename SP instrument_index SP volume_value
		</t>
		<t>/ MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog SP engine_name SP filename SP instrument_index SP volume_value SP instr_load_mode
		</t>
		<t>/ MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog SP engine_name SP filename SP instrument_index SP volume_value SP entry_name
		</t>
		<t>/ MIDI_INSTRUMENT SP modal_arg midi_map SP midi_bank SP midi_prog SP engine_name SP filename SP instrument_index SP volume_value SP instr_load_mode SP entry_name
		</t>
	</list>
</t>
<t>unmap_instruction =
	<list>
		<t>MIDI_INSTRUMENT SP midi_map SP midi_bank SP midi_prog
		</t>
	</list>
</t>
<t>remove_instruction =
	<list>
		<t>CHANNEL SP sampler_channel
		</t>
		<t>/ CHANNEL SP MIDI_INPUT SP sampler_channel
		</t>
		<t>/ CHANNEL SP MIDI_INPUT SP sampler_channel SP device_index
		</t>
		<t>/ CHANNEL SP MIDI_INPUT SP sampler_channel SP device_index SP midi_input_port_index
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP midi_map
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP ALL
		</t>
		<t>/ SEND_EFFECT_CHAIN SP device_index SP effect_chain
		</t>
		<t>/ SEND_EFFECT_CHAIN SP EFFECT SP device_index SP effect_chain SP chain_pos
		</t>
		<t>/ FX_SEND SP EFFECT SP sampler_channel SP fx_send_id
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP FORCE SP db_path
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP db_path
		</t>
		<t>/ DB_INSTRUMENT SP db_path
		</t>
	</list>
</t>
<t>get_instruction =
	<list>
		<t>AVAILABLE_ENGINES
		</t>
		<t>/ AVAILABLE_EFFECTS
		</t>
		<t>/ EFFECT_INSTANCES
		</t>
		<t>/ EFFECT SP INFO SP effect_index
		</t>
		<t>/ EFFECT_INSTANCE SP INFO SP effect_instance
		</t>
		<t>/ EFFECT_INSTANCE_INPUT_CONTROL SP INFO SP effect_instance SP input_control
		</t>
		<t>/ SEND_EFFECT_CHAINS SP device_index
		</t>
		<t>/ SEND_EFFECT_CHAIN SP INFO SP device_index SP effect_chain
		</t>
		<t>/ AVAILABLE_MIDI_INPUT_DRIVERS
		</t>
		<t>/ MIDI_INPUT_DRIVER SP INFO SP string
		</t>
		<t>/ MIDI_INPUT_DRIVER_PARAMETER SP INFO SP string SP string
		</t>
		<t>/ MIDI_INPUT_DRIVER_PARAMETER SP INFO SP string SP string SP key_val_list
		</t>
		<t>/ AVAILABLE_AUDIO_OUTPUT_DRIVERS
		</t>
		<t>/ AUDIO_OUTPUT_DRIVER SP INFO SP string
		</t>
		<t>/ AUDIO_OUTPUT_DRIVER_PARAMETER SP INFO SP string SP string
		</t>
		<t>/ AUDIO_OUTPUT_DRIVER_PARAMETER SP INFO SP string SP string SP key_val_list
		</t>
		<t>/ AUDIO_OUTPUT_DEVICES
		</t>
		<t>/ MIDI_INPUT_DEVICES
		</t>
		<t>/ AUDIO_OUTPUT_DEVICE SP INFO SP number
		</t>
		<t>/ MIDI_INPUT_DEVICE SP INFO SP number
		</t>
		<t>/ MIDI_INPUT_PORT SP INFO SP number SP number
		</t>
		<t>/ MIDI_INPUT_PORT_PARAMETER SP INFO SP number SP number SP string
		</t>
		<t>/ AUDIO_OUTPUT_CHANNEL SP INFO SP number SP number
		</t>
		<t>/ AUDIO_OUTPUT_CHANNEL_PARAMETER SP INFO SP number SP number SP string
		</t>
		<t>/ CHANNELS
		</t>
		<t>/ CHANNEL SP INFO SP sampler_channel
		</t>
		<t>/ CHANNEL SP BUFFER_FILL SP buffer_size_type SP sampler_channel
		</t>
		<t>/ CHANNEL SP STREAM_COUNT SP sampler_channel
		</t>
		<t>/ CHANNEL SP VOICE_COUNT SP sampler_channel
		</t>
		<t>/ ENGINE SP INFO SP engine_name
		</t>
		<t>/ SERVER SP INFO
		</t>
		<t>/ TOTAL_STREAM_COUNT
		</t>
		<t>/ TOTAL_VOICE_COUNT
		</t>
		<t>/ TOTAL_VOICE_COUNT_MAX
		</t>
		<t>/ MIDI_INSTRUMENTS SP midi_map
		</t>
		<t>/ MIDI_INSTRUMENTS SP ALL
		</t>
		<t>/ MIDI_INSTRUMENT SP INFO SP midi_map SP midi_bank SP midi_prog
		</t>
		<t>/ MIDI_INSTRUMENT_MAPS
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP INFO SP midi_map
		</t>
		<t>/ FX_SENDS SP sampler_channel
		</t>
		<t>/ FX_SEND SP INFO SP sampler_channel SP fx_send_id
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP RECURSIVE SP db_path
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP db_path
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP INFO SP db_path
		</t>
		<t>/ DB_INSTRUMENTS SP RECURSIVE SP db_path
		</t>
		<t>/ DB_INSTRUMENTS SP db_path
		</t>
		<t>/ DB_INSTRUMENT SP INFO SP db_path
		</t>
		<t>/ DB_INSTRUMENTS_JOB SP INFO SP number
		</t>
		<t>/ VOLUME
		</t>
		<t>/ VOICES
		</t>
		<t>/ STREAMS
		</t>
		<t>/ FILE SP INSTRUMENTS SP filename
		</t>
		<t>/ FILE SP INSTRUMENT SP INFO SP filename SP instrument_index
		</t>
	</list>
</t>
<t>set_instruction =
	<list>
		<t>AUDIO_OUTPUT_DEVICE_PARAMETER SP number SP string '=' param_val_list
		</t>
		<t>/ AUDIO_OUTPUT_CHANNEL_PARAMETER SP number SP number SP string '=' param_val_list
		</t>
		<t>/ MIDI_INPUT_DEVICE_PARAMETER SP number SP string '=' param_val_list
		</t>
		<t>/ MIDI_INPUT_PORT_PARAMETER SP number SP number SP string '=' NONE
		</t>
		<t>/ MIDI_INPUT_PORT_PARAMETER SP number SP number SP string '=' param_val_list
		</t>
		<t>/ EFFECT_INSTANCE_INPUT_CONTROL SP VALUE SP effect_instance SP input_control SP control_value
		</t>
		<t>/ CHANNEL SP set_chan_instruction
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP NAME SP midi_map SP map_name
		</t>
		<t>/ FX_SEND SP NAME SP sampler_channel SP fx_send_id SP fx_send_name
		</t>
		<t>/ FX_SEND SP AUDIO_OUTPUT_CHANNEL SP sampler_channel SP fx_send_id SP audio_channel_index SP audio_channel_index
		</t>
		<t>/ FX_SEND SP MIDI_CONTROLLER SP sampler_channel SP fx_send_id SP midi_ctrl
		</t>
		<t>/ FX_SEND SP LEVEL SP sampler_channel SP fx_send_id SP volume_value
		</t>
		<t>/ FX_SEND SP EFFECT SP sampler_channel SP fx_send_id SP effect_chain SP chain_pos
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP NAME SP db_path SP stringval_escaped
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORY SP DESCRIPTION SP db_path SP stringval_escaped
		</t>
		<t>/ DB_INSTRUMENT SP NAME SP db_path SP stringval_escaped
		</t>
		<t>/ DB_INSTRUMENT SP DESCRIPTION SP db_path SP stringval_escaped
		</t>
		<t>/ DB_INSTRUMENT SP FILE_PATH SP filename SP filename
		</t>
		<t>/ ECHO SP boolean
		</t>
		<t>/ SHELL SP INTERACT SP boolean
		</t>
		<t>/ SHELL SP AUTO_CORRECT SP boolean
		</t>
		<t>/ SHELL SP DOC SP boolean
		</t>
		<t>/ VOLUME SP volume_value
		</t>
		<t>/ VOICES SP number
		</t>
		<t>/ STREAMS SP number
		</t>
	</list>
</t>
<t>create_instruction =
	<list>
		<t>AUDIO_OUTPUT_DEVICE SP string SP key_val_list
		</t>
		<t>/ AUDIO_OUTPUT_DEVICE SP string
		</t>
		<t>/ MIDI_INPUT_DEVICE SP string SP key_val_list
		</t>
		<t>/ MIDI_INPUT_DEVICE SP string
		</t>
		<t>/ FX_SEND SP sampler_channel SP midi_ctrl
		</t>
		<t>/ FX_SEND SP sampler_channel SP midi_ctrl SP fx_send_name
		</t>
		<t>/ EFFECT_INSTANCE SP effect_index
		</t>
		<t>/ EFFECT_INSTANCE SP effect_system SP module SP effect_name
		</t>
	</list>
</t>
<t>reset_instruction =
	<list>
		<t>CHANNEL SP sampler_channel
		</t>
	</list>
</t>
<t>clear_instruction =
	<list>
		<t>MIDI_INSTRUMENTS SP midi_map
		</t>
		<t>/ MIDI_INSTRUMENTS SP ALL
		</t>
	</list>
</t>
<t>find_instruction =
	<list>
		<t>DB_INSTRUMENTS SP NON_RECURSIVE SP db_path SP query_val_list
		</t>
		<t>/ DB_INSTRUMENTS SP db_path SP query_val_list
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP NON_RECURSIVE SP db_path SP query_val_list
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP db_path SP query_val_list
		</t>
		<t>/ LOST SP DB_INSTRUMENT_FILES
		</t>
	</list>
</t>
<t>move_instruction =
	<list>
		<t>DB_INSTRUMENT_DIRECTORY SP db_path SP db_path
		</t>
		<t>/ DB_INSTRUMENT SP db_path SP db_path
		</t>
	</list>
</t>
<t>copy_instruction =
	<list>
		<t>DB_INSTRUMENT_DIRECTORY SP db_path SP db_path
		</t>
		<t>/ DB_INSTRUMENT SP db_path SP db_path
		</t>
	</list>
</t>
<t>destroy_instruction =
	<list>
		<t>AUDIO_OUTPUT_DEVICE SP number
		</t>
		<t>/ MIDI_INPUT_DEVICE SP number
		</t>
		<t>/ FX_SEND SP sampler_channel SP fx_send_id
		</t>
		<t>/ EFFECT_INSTANCE SP number
		</t>
	</list>
</t>
<t>load_instruction =
	<list>
		<t>INSTRUMENT SP load_instr_args
		</t>
		<t>/ ENGINE SP load_engine_args
		</t>
	</list>
</t>
<t>append_instruction =
	<list>
		<t>SEND_EFFECT_CHAIN SP EFFECT SP device_index SP effect_chain SP effect_instance
		</t>
	</list>
</t>
<t>insert_instruction =
	<list>
		<t>SEND_EFFECT_CHAIN SP EFFECT SP device_index SP effect_chain SP chain_pos SP effect_instance
		</t>
	</list>
</t>
<t>set_chan_instruction =
	<list>
		<t>AUDIO_OUTPUT_DEVICE SP sampler_channel SP device_index
		</t>
		<t>/ AUDIO_OUTPUT_CHANNEL SP sampler_channel SP audio_channel_index SP audio_channel_index
		</t>
		<t>/ AUDIO_OUTPUT_TYPE SP sampler_channel SP audio_output_type_name
		</t>
		<t>/ MIDI_INPUT SP sampler_channel SP device_index SP midi_input_port_index SP midi_input_channel_index
		</t>
		<t>/ MIDI_INPUT_DEVICE SP sampler_channel SP device_index
		</t>
		<t>/ MIDI_INPUT_PORT SP sampler_channel SP midi_input_port_index
		</t>
		<t>/ MIDI_INPUT_CHANNEL SP sampler_channel SP midi_input_channel_index
		</t>
		<t>/ MIDI_INPUT_TYPE SP sampler_channel SP midi_input_type_name
		</t>
		<t>/ VOLUME SP sampler_channel SP volume_value
		</t>
		<t>/ MUTE SP sampler_channel SP boolean
		</t>
		<t>/ SOLO SP sampler_channel SP boolean
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP sampler_channel SP midi_map
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP sampler_channel SP NONE
		</t>
		<t>/ MIDI_INSTRUMENT_MAP SP sampler_channel SP DEFAULT
		</t>
	</list>
</t>
<t>edit_instruction =
	<list>
		<t>CHANNEL SP INSTRUMENT SP sampler_channel
		</t>
	</list>
</t>
<t>format_instruction =
	<list>
		<t>INSTRUMENTS_DB
		</t>
	</list>
</t>
<t>modal_arg =
	<list>
		<t>/* epsilon (empty argument) */
		</t>
		<t>/ NON_MODAL SP
		</t>
	</list>
</t>
<t>key_val_list =
	<list>
		<t>string '=' param_val_list
		</t>
		<t>/ key_val_list SP string '=' param_val_list
		</t>
	</list>
</t>
<t>buffer_size_type =
	<list>
		<t>BYTES
		</t>
		<t>/ PERCENTAGE
		</t>
	</list>
</t>
<t>list_instruction =
	<list>
		<t>AUDIO_OUTPUT_DEVICES
		</t>
		<t>/ MIDI_INPUT_DEVICES
		</t>
		<t>/ CHANNELS
		</t>
		<t>/ CHANNEL SP MIDI_INPUTS SP sampler_channel
		</t>
		<t>/ AVAILABLE_ENGINES
		</t>
		<t>/ AVAILABLE_EFFECTS
		</t>
		<t>/ EFFECT_INSTANCES
		</t>
		<t>/ SEND_EFFECT_CHAINS SP number
		</t>
		<t>/ AVAILABLE_MIDI_INPUT_DRIVERS
		</t>
		<t>/ AVAILABLE_AUDIO_OUTPUT_DRIVERS
		</t>
		<t>/ MIDI_INSTRUMENTS SP midi_map
		</t>
		<t>/ MIDI_INSTRUMENTS SP ALL
		</t>
		<t>/ MIDI_INSTRUMENT_MAPS
		</t>
		<t>/ FX_SENDS SP sampler_channel
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP RECURSIVE SP db_path
		</t>
		<t>/ DB_INSTRUMENT_DIRECTORIES SP db_path
		</t>
		<t>/ DB_INSTRUMENTS SP RECURSIVE SP db_path
		</t>
		<t>/ DB_INSTRUMENTS SP db_path
		</t>
		<t>/ FILE SP INSTRUMENTS SP filename
		</t>
	</list>
</t>
<t>send_instruction =
	<list>
		<t>CHANNEL SP MIDI_DATA SP string SP sampler_channel SP number SP number
		</t>
	</list>
</t>
<t>load_instr_args =
	<list>
		<t>filename SP instrument_index SP sampler_channel
		</t>
		<t>/ NON_MODAL SP filename SP instrument_index SP sampler_channel
		</t>
	</list>
</t>
<t>load_engine_args =
	<list>
		<t>engine_name SP sampler_channel
		</t>
	</list>
</t>
<t>instr_load_mode =
	<list>
		<t>ON_DEMAND
		</t>
		<t>/ ON_DEMAND_HOLD
		</t>
		<t>/ PERSISTENT
		</t>
	</list>
</t>
<t>effect_instance =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>device_index =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>audio_channel_index =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>audio_output_type_name =
	<list>
		<t>string
		</t>
	</list>
</t>
<t>midi_input_port_index =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>midi_input_channel_index =
	<list>
		<t>number
		</t>
		<t>/ ALL
		</t>
	</list>
</t>
<t>midi_input_type_name =
	<list>
		<t>string
		</t>
	</list>
</t>
<t>midi_map =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>midi_bank =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>midi_prog =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>midi_ctrl =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>volume_value =
	<list>
		<t>dotnum
		</t>
		<t>/ number
		</t>
	</list>
</t>
<t>control_value =
	<list>
		<t>real
		</t>
	</list>
</t>
<t>sampler_channel =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>instrument_index =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>fx_send_id =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>engine_name =
	<list>
		<t>string
		</t>
	</list>
</t>
<t>filename =
	<list>
		<t>path
		</t>
	</list>
</t>
<t>db_path =
	<list>
		<t>path
		</t>
	</list>
</t>
<t>map_name =
	<list>
		<t>stringval_escaped
		</t>
	</list>
</t>
<t>entry_name =
	<list>
		<t>stringval_escaped
		</t>
	</list>
</t>
<t>fx_send_name =
	<list>
		<t>stringval_escaped
		</t>
	</list>
</t>
<t>effect_name =
	<list>
		<t>stringval_escaped
		</t>
	</list>
</t>
<t>effect_index =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>effect_chain =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>chain_pos =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>input_control =
	<list>
		<t>number
		</t>
	</list>
</t>
<t>param_val_list =
	<list>
		<t>param_val
		</t>
		<t>/ param_val_list','param_val
		</t>
	</list>
</t>

<t>param_val =
	<list>
		<t>string
		</t>
		<t>/ stringval
		</t>
		<t>/ number
		</t>
		<t>/ dotnum
		</t>
	</list>
</t>
<t>query_val_list =
	<list>
		<t>string '=' query_val
		</t>
		<t>/ query_val_list SP string '=' query_val
		</t>
	</list>
</t>
<t>query_val =
	<list>
		<t>text_escaped
		</t>
		<t>/ stringval_escaped
		</t>
	</list>
</t>
<t>scan_mode =
	<list>
		<t>RECURSIVE
		</t>
		<t>/ NON_RECURSIVE
		</t>
		<t>/ FLAT
		</t>
	</list>
</t>
<t>effect_system =
	<list>
		<t>string
		</t>
	</list>
</t>
<t>module =
	<list>
		<t>filename
		</t>
	</list>
</t>

            <!-- GRAMMAR_BNF_END - do NOT delete or modify this line !!! -->

            <section title="Character Set and Escape Sequences" anchor="character_set">
                <t>Older versions of this protocol up to and including v1.1 only
                supported the standard ASCII character set (ASCII code 0 - 127)
                <xref target="RFC20"/>, all younger versions of this protocol
                however support the Extended ASCII character set (ASCII code
                0 - 255). The same group of younger protocols also support
                escape sequences, but only for certain, explicitly declared
                parts of the protocol. The supported escape sequences are
                defined as follows:</t>
                <texttable>
                    <ttcol>ASCII Character Sequence</ttcol>
                    <ttcol>Translated into (Name)</ttcol>
                    <c>\n</c> <c>new line</c>
                    <c>\r</c> <c>carriage return</c>
                    <c>\f</c> <c>form feed</c>
                    <c>\t</c> <c>horizontal tab</c>
                    <c>\v</c> <c>vertical tab</c>
                    <c>\'</c> <c>apostrophe</c>
                    <c>\"</c> <c>quotation mark</c>
                    <c>\\</c> <c>backslash</c>
                    <c>\OOO</c> <c>three digit octal ASCII code of the character</c>
                    <c>\xHH</c> <c>two digit hex ASCII code of the character</c>
                </texttable>
                <t>Notice: due to the transition of certain parts of the
                protocol which now support escape sequences, a slight backward
                incompatibility to protocols version v1.1 and younger has been
                introduced. The only difference is that in parts of the protocol
                where escape characters are now supported, a backslash characters
                MUST be escaped as well (that is as double backslash), whereas
                in the old versions a single backslash was sufficient.</t>

                <t>The following LSCP commands support escape sequences as part
                of their filename / path based arguments and / or may contain
                a filename / path with escape sequences in their response:
                <list>
                    <t><xref target="LOAD INSTRUMENT">"LOAD INSTRUMENT"</xref></t>
                    <t><xref target="GET CHANNEL INFO">"GET CHANNEL INFO"</xref></t>
                    <t><xref target="MAP MIDI_INSTRUMENT">"MAP MIDI_INSTRUMENT"</xref></t>
                    <t><xref target="GET MIDI_INSTRUMENT INFO">"GET MIDI_INSTRUMENT INFO"</xref></t>
                    <t><xref target="ADD DB_INSTRUMENT_DIRECTORY">"ADD DB_INSTRUMENT_DIRECTORY"</xref></t>
                    <t><xref target="ADD DB_INSTRUMENTS">"ADD DB_INSTRUMENTS"</xref></t>
                    <t><xref target="REMOVE DB_INSTRUMENT_DIRECTORY">"REMOVE DB_INSTRUMENT_DIRECTORY"</xref></t>
                    <t><xref target="REMOVE DB_INSTRUMENT">"REMOVE DB_INSTRUMENT"</xref></t>
                    <t><xref target="GET DB_INSTRUMENT_DIRECTORIES">"GET DB_INSTRUMENT_DIRECTORIES"</xref></t>
                    <t><xref target="LIST DB_INSTRUMENT_DIRECTORIES">"LIST DB_INSTRUMENT_DIRECTORIES"</xref></t>
                    <t><xref target="GET DB_INSTRUMENT_DIRECTORY INFO">"GET DB_INSTRUMENT_DIRECTORY INFO"</xref></t>
                    <t><xref target="GET DB_INSTRUMENTS">"GET DB_INSTRUMENTS"</xref></t>
                    <t><xref target="LIST DB_INSTRUMENTS">"LIST DB_INSTRUMENTS"</xref></t>
                    <t><xref target="GET DB_INSTRUMENT INFO">"GET DB_INSTRUMENT INFO"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT_DIRECTORY NAME">"SET DB_INSTRUMENT_DIRECTORY NAME"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT_DIRECTORY DESCRIPTION">"SET DB_INSTRUMENT_DIRECTORY DESCRIPTION"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT NAME">"SET DB_INSTRUMENT NAME"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT DESCRIPTION">"SET DB_INSTRUMENT DESCRIPTION"</xref></t>
                    <t><xref target="FIND DB_INSTRUMENTS">"FIND DB_INSTRUMENTS"</xref></t>
                    <t><xref target="FIND DB_INSTRUMENT_DIRECTORIES">"FIND DB_INSTRUMENT_DIRECTORIES"</xref></t>
                    <t><xref target="MOVE DB_INSTRUMENT">"MOVE DB_INSTRUMENT"</xref></t>
                    <t><xref target="MOVE DB_INSTRUMENT_DIRECTORY">"MOVE DB_INSTRUMENT_DIRECTORY"</xref></t>
                    <t><xref target="COPY DB_INSTRUMENT">"COPY DB_INSTRUMENT"</xref></t>
                    <t><xref target="COPY DB_INSTRUMENT_DIRECTORY">"COPY DB_INSTRUMENT_DIRECTORY"</xref></t>
                    <t><xref target="FIND LOST DB_INSTRUMENT_FILES">"FIND LOST DB_INSTRUMENT_FILES"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT FILE_PATH">"SET DB_INSTRUMENT FILE_PATH"</xref></t>
                    <t><xref target="GET FILE INSTRUMENTS">"GET FILE INSTRUMENTS"</xref></t>
                    <t><xref target="LIST FILE INSTRUMENTS">"LIST FILE INSTRUMENTS"</xref></t>
                    <t><xref target="GET FILE INSTRUMENT INFO">"GET FILE INSTRUMENT INFO"</xref></t>
                    <t><xref target="GET EFFECT INFO">"GET EFFECT INFO"</xref></t>
                    <t><xref target="GET EFFECT_INSTANCE INFO">"GET EFFECT_INSTANCE INFO"</xref></t>
                    <t><xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref></t>
                </list>
                Note that the forward slash character ('/') has a special meaning in
                filename / path based arguments: it acts as separator of the nodes in
                the path, thus if a directory- or filename includes a forward slash
                (not intended as path node separator), you MUST escape that slash
                either with the respective hex escape sequence ("\x2f") or with the
                respective octal escape sequence ("\057").
                </t>

                <t>
                Note for Windows: file path arguments in LSCP are expected
                to use forward slashes as directory node separator similar
                to Unix based operating systems. In contrast to Unix however
                a Windows typical drive character is expected to be
                prefixed to the path. That is an original Windows file path
                like "D:\Sounds\My.gig" would become in LSCP:
                "D:/Sounds/My.gig".
                </t>

                <t>
                The following LSCP commands even support escape sequences as
                part of at least one of their text-based arguments (i.e. entity name,
                description) and / or may contain escape sequences in at least one of
                their text-based fields in their response:
                <list>
                    <t><xref target="GET SERVER INFO">"GET SERVER INFO"</xref></t>
                    <t><xref target="GET ENGINE INFO">"GET ENGINE INFO"</xref></t>
                    <t><xref target="GET CHANNEL INFO">"GET CHANNEL INFO"</xref></t>
                    <t><xref target="CREATE FX_SEND">"CREATE FX_SEND"</xref></t>
                    <t><xref target="GET FX_SEND INFO">"GET FX_SEND INFO"</xref></t>
                    <t><xref target="SET FX_SEND NAME">"SET FX_SEND NAME"</xref></t>
                    <t><xref target="GET MIDI_INSTRUMENT INFO">"GET MIDI_INSTRUMENT INFO"</xref></t>
                    <t><xref target="GET MIDI_INSTRUMENT_MAP INFO">"GET MIDI_INSTRUMENT_MAP INFO"</xref></t>
                    <t><xref target="ADD MIDI_INSTRUMENT_MAP">"ADD MIDI_INSTRUMENT_MAP"</xref></t>
                    <t><xref target="MAP MIDI_INSTRUMENT">"MAP MIDI_INSTRUMENT"</xref></t>
                    <t><xref target="SET MIDI_INSTRUMENT_MAP NAME">"SET MIDI_INSTRUMENT_MAP NAME"</xref></t>
                    <t><xref target="GET DB_INSTRUMENT_DIRECTORY INFO">"GET DB_INSTRUMENT_DIRECTORY INFO"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT_DIRECTORY NAME">"SET DB_INSTRUMENT_DIRECTORY NAME"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT_DIRECTORY DESCRIPTION">"SET DB_INSTRUMENT_DIRECTORY DESCRIPTION"</xref></t>
                    <t><xref target="FIND DB_INSTRUMENT_DIRECTORIES">"FIND DB_INSTRUMENT_DIRECTORIES"</xref></t>
                    <t><xref target="GET DB_INSTRUMENT INFO">"GET DB_INSTRUMENT INFO"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT NAME">"SET DB_INSTRUMENT NAME"</xref></t>
                    <t><xref target="SET DB_INSTRUMENT DESCRIPTION">"SET DB_INSTRUMENT DESCRIPTION"</xref></t>
                    <t><xref target="FIND DB_INSTRUMENTS">"FIND DB_INSTRUMENTS"</xref></t>
                    <t><xref target="GET EFFECT INFO">"GET EFFECT INFO"</xref></t>
                    <t><xref target="GET EFFECT_INSTANCE INFO">"GET EFFECT_INSTANCE INFO"</xref></t>
                    <t><xref target="CREATE EFFECT_INSTANCE">"CREATE EFFECT_INSTANCE"</xref></t>
                </list>
                Please note that these lists are manually maintained. If you
                find a command that also supports escape sequences we forgot to
                mention here, please report it!
                </t>
            </section>
        </section>

        <section title="Events" anchor="events">
            <t>This chapter will describe all currently defined events supported by LinuxSampler.</t>

            <section title="Number of audio output devices changed" anchor="SUBSCRIBE AUDIO_OUTPUT_DEVICE_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the total number of audio output devices on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE AUDIO_OUTPUT_DEVICE_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:AUDIO_OUTPUT_DEVICE_COUNT:&lt;devices&gt;"</t>
                    </list>
                </t>
                <t>where &lt;devices&gt; will be replaced by the new number
                of audio output devices.</t>
            </section>

            <section title="Audio output device's settings changed" anchor="SUBSCRIBE AUDIO_OUTPUT_DEVICE_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to audio output devices on the
                back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE AUDIO_OUTPUT_DEVICE_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:AUDIO_OUTPUT_DEVICE_INFO:&lt;device-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;device-id&gt; will be replaced by the numerical ID of the audio output device,
                which settings has been changed. The front-end will have to send
                the respective command to actually get the audio output device info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Number of MIDI input devices changed" anchor="SUBSCRIBE MIDI_INPUT_DEVICE_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the total number of MIDI input devices on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INPUT_DEVICE_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INPUT_DEVICE_COUNT:&lt;devices&gt;"</t>
                    </list>
                </t>
                <t>where &lt;devices&gt; will be replaced by the new number
                of MIDI input devices.</t>
            </section>

            <section title="MIDI input device's settings changed" anchor="SUBSCRIBE MIDI_INPUT_DEVICE_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to MIDI input devices on the
                back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INPUT_DEVICE_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INPUT_DEVICE_INFO:&lt;device-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;device-id&gt; will be replaced by the numerical ID of the MIDI input device,
                which settings has been changed. The front-end will have to send
                the respective command to actually get the MIDI input device info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Number of sampler channels changed" anchor="SUBSCRIBE CHANNEL_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the total number of channels on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE CHANNEL_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:CHANNEL_COUNT:&lt;channels&gt;"</t>
                    </list>
                </t>
                <t>where &lt;channels&gt; will be replaced by the new number
                of sampler channels.</t>
            </section>

            <section title="MIDI data on a sampler channel arrived" anchor="SUBSCRIBE CHANNEL_MIDI" lscp_cmd="true">
                <t>Client may want to be notified when MIDI data arrive on sampler channels on
                back-end side, by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE CHANNEL_MIDI</t>
                    </list>
                </t>
                <t>Server will start sending one of the the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:CHANNEL_MIDI:&lt;channel-id&gt; NOTE_ON  &lt;note&gt; &lt;velocity&gt;"</t>
                        <t>"NOTIFY:CHANNEL_MIDI:&lt;channel-id&gt; NOTE_OFF &lt;note&gt; &lt;velocity&gt;"</t>
                    </list>
                </t>
                <t>where &lt;channel-id&gt; will be replaced by the ID of the sampler channel where the MIDI
                data arrived. &lt;note&gt; and &lt;velocity&gt; are integer values in the range between
                0 .. 127, reflecting the analog meaning of the MIDI specification.
                </t>
                <t>CAUTION: no guarantee whatsoever will be made that MIDI events are actually all
                delivered by this mechanism! With other words: events could be lost at any time!
                This restriction was made to keep the RT-safeness of the backend's MIDI and audio
                thread unaffected by this feature.</t>
            </section>

	    <section title="MIDI data on a MIDI input device arrived" anchor="SUBSCRIBE DEVICE_MIDI" lscp_cmd="true">
		    <t>Client may want to be notified when MIDI data arrive on MIDI input devices by issuing the following command:</t>
		    <t>
			    <list>
				    <t>SUBSCRIBE DEVICE_MIDI</t>
			    </list>
		    </t>
		    <t>Server will start sending one of the the following notification messages:</t>
		    <t>
			    <list>
				    <t>"NOTIFY:DEVICE_MIDI:&lt;device-id&gt; &lt;port-id&gt; NOTE_ON &lt;note&gt; &lt;velocity&gt;"</t>
				    <t>"NOTIFY:DEVICE_MIDI:&lt;device-id&gt; &lt;port-id&gt; NOTE_OFF &lt;note&gt; &lt;velocity&gt;"</t>
			    </list>
		    </t>
		    <t>where &lt;device-id&gt; &lt;port-id&gt; will be replaced
		       by the IDs of the respective MIDI input device and the device's MIDI port where the MIDI
		       data arrived. &lt;note&gt; and &lt;velocity&gt; are integer values in the range between
		       0 .. 127, reflecting the analog meaning of the MIDI specification.
		    </t>
		    <t>CAUTION: no guarantee whatsoever will be made that MIDI events are actually all
		       delivered by this mechanism! With other words: events could be lost at any time!
		       This restriction was made to keep the RT-safeness of the backend's MIDI and audio
		       thread unaffected by this feature.</t>
            </section>

            <section title="Number of active voices changed" anchor="SUBSCRIBE VOICE_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of voices on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE VOICE_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:VOICE_COUNT:&lt;sampler-channel&gt; &lt;voices&gt;"</t>
                    </list>
                </t>
                <t>where &lt;sampler-channel&gt; will be replaced by the sampler channel the
                voice count change occurred and &lt;voices&gt; by the new number of
                active voices on that channel.</t>
            </section>

            <section title="Number of active disk streams changed" anchor="SUBSCRIBE STREAM_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of streams on the back-end
                changes by issuing the following command: SUBSCRIBE STREAM_COUNT</t>
                <t>
                    <list>
                        <t>SUBSCRIBE STREAM_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:STREAM_COUNT:&lt;sampler-channel&gt; &lt;streams&gt;"</t>
                    </list>
                </t>
                <t>where &lt;sampler-channel&gt; will be replaced by the sampler channel the
                stream count change occurred and &lt;streams&gt; by the new number of
                active disk streams on that channel.</t>
            </section>

            <section title="Disk stream buffer fill state changed" anchor="SUBSCRIBE BUFFER_FILL" lscp_cmd="true">
                <t>Client may want to be notified when the buffer fill state of a disk stream
                on the back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE BUFFER_FILL</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:BUFFER_FILL:&lt;sampler-channel&gt; &lt;fill-data&gt;"</t>
                    </list>
                </t>
                <t>where &lt;sampler-channel&gt; will be replaced by the sampler channel the
                buffer fill state change occurred on and &lt;fill-data&gt; will be replaced by the
                buffer fill data for this channel as described in <xref target="GET CHANNEL BUFFER_FILL" />
                as if the <xref target="GET CHANNEL BUFFER_FILL">
                "GET CHANNEL BUFFER_FILL PERCENTAGE"</xref> command was issued on this channel.</t>
            </section>

            <section title="Channel information changed" anchor="SUBSCRIBE CHANNEL_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to sampler channels on the
                back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE CHANNEL_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:CHANNEL_INFO:&lt;sampler-channel&gt;"</t>
                    </list>
                </t>
                <t>where &lt;sampler-channel&gt; will be replaced by the sampler channel the
                channel info change occurred. The front-end will have to send
                the respective command to actually get the channel info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Number of effect sends changed" anchor="SUBSCRIBE FX_SEND_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of effect sends on
                a particular sampler channel is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE FX_SEND_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:FX_SEND_COUNT:&lt;channel-id&gt; &lt;fx-sends&gt;"</t>
                    </list>
                </t>
                <t>where &lt;channel-id&gt; will be replaced by the numerical ID of the sampler
                channel, on which the effect sends number is changed and &lt;fx-sends&gt; will
                be replaced by the new number of effect sends on that channel.</t>
            </section>

            <section title="Effect send information changed" anchor="SUBSCRIBE FX_SEND_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to effect sends on a
                a particular sampler channel by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE FX_SEND_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:FX_SEND_INFO:&lt;channel-id&gt; &lt;fx-send-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;channel-id&gt; will be replaced by the numerical ID of the sampler
                channel, on which an effect send entity is changed and &lt;fx-send-id&gt; will
                be replaced by the numerical ID of the changed effect send.</t>
            </section>

            <section title="Total number of active voices changed" anchor="SUBSCRIBE TOTAL_VOICE_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the total number of voices on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE TOTAL_VOICE_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:TOTAL_VOICE_COUNT:&lt;voices&gt;"</t>
                    </list>
                </t>
                <t>where &lt;voices&gt; will be replaced by the new number of
                all currently active voices.</t>
            </section>

            <section title="Total number of active disk streams changed" anchor="SUBSCRIBE TOTAL_STREAM_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the total number of disk streams on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE TOTAL_STREAM_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:TOTAL_STREAM_COUNT:&lt;streams&gt;"</t>
                    </list>
                </t>
                <t>where &lt;streams&gt; will be replaced by the new number of
                all currently active disk streams.</t>
            </section>

            <section title="Number of MIDI instrument maps changed" anchor="SUBSCRIBE MIDI_INSTRUMENT_MAP_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of MIDI instrument maps on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INSTRUMENT_MAP_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INSTRUMENT_MAP_COUNT:&lt;maps&gt;"</t>
                    </list>
                </t>
                <t>where &lt;maps&gt; will be replaced by the new number
                of MIDI instrument maps.</t>
            </section>

            <section title="MIDI instrument map information changed" anchor="SUBSCRIBE MIDI_INSTRUMENT_MAP_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to MIDI instrument maps on the
                back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INSTRUMENT_MAP_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INSTRUMENT_MAP_INFO:&lt;map-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;map-id&gt; will be replaced by the numerical ID of the MIDI instrument map,
                for which information changes occurred. The front-end will have to send
                the respective command to actually get the MIDI instrument map info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Number of MIDI instruments changed" anchor="SUBSCRIBE MIDI_INSTRUMENT_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of MIDI instrument maps on the
                back-end changes by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INSTRUMENT_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INSTRUMENT_COUNT:&lt;map-id&gt; &lt;instruments&gt;"</t>
                    </list>
                </t>
                <t>where &lt;map-id&gt; is the numerical ID of the MIDI instrument map, in which
                the nuber of instruments has changed and &lt;instruments&gt; will be replaced by
                the new number of MIDI instruments in the specified map.</t>
            </section>

            <section title="MIDI instrument information changed" anchor="SUBSCRIBE MIDI_INSTRUMENT_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to MIDI instruments on the
                back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MIDI_INSTRUMENT_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MIDI_INSTRUMENT_INFO:&lt;map-id&gt; &lt;bank&gt; &lt;program&gt;"</t>
                    </list>
                </t>
                <t>where &lt;map-id&gt; will be replaced by the numerical ID of the MIDI instrument map,
                in which a MIDI instrument is changed. &lt;bank&gt; and &lt;program&gt; specifies
                the location of the changed MIDI instrument in the map. The front-end will have to send
                the respective command to actually get the MIDI instrument info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Global settings changed" anchor="SUBSCRIBE GLOBAL_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes to the global settings
                of the sampler were made by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE GLOBAL_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following types of notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:GLOBAL_INFO:VOLUME &lt;volume&gt;" - Notifies that the
                        golbal volume of the sampler is changed, where &lt;volume&gt; will be
                        replaced by the optional dotted floating point value, reflecting the
                        new global volume parameter.</t>
                    </list>
                    <list>
                        <t>"NOTIFY:GLOBAL_INFO:VOICES &lt;max-voices&gt;" - Notifies that the
                        golbal limit of the sampler for maximum voices is changed, where
                        &lt;max-voices&gt; will be an integer value, reflecting the
                        new global voice limit parameter.</t>
                    </list>
                    <list>
                        <t>"NOTIFY:GLOBAL_INFO:STREAMS &lt;max-streams&gt;" - Notifies that the
                        golbal limit of the sampler for maximum disk streams is changed, where
                        &lt;max-streams&gt; will be an integer value, reflecting the
                        new global disk streams limit parameter.</t>
                    </list>
                </t>
            </section>

            <section title="Number of database instrument directories changed" anchor="SUBSCRIBE DB_INSTRUMENT_DIRECTORY_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of instrument
                directories in a particular directory in the instruments database
                is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE DB_INSTRUMENT_DIRECTORY_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_DIRECTORY_COUNT:&lt;dir-path&gt;"</t>
                    </list>
                </t>
                <t>where &lt;dir-path&gt; will be replaced by the absolute path
                name of the directory in the instruments database,
                in which the number of directories is changed.</t>
                <t>Note that when a non-empty directory is removed, this event
                is not sent for the subdirectories in that directory.</t>
            </section>

            <section title="Database instrument directory information changed" anchor="SUBSCRIBE DB_INSTRUMENT_DIRECTORY_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to directories
                in the instruments database by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE DB_INSTRUMENT_DIRECTORY_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_DIRECTORY_INFO:&lt;dir-path&gt;"</t>
                    </list>
                </t>
                <t>where &lt;dir-path&gt; will be replaced by the absolute path name
                of the directory, for which information changes occurred. The front-end will have to send
                the respective command to actually get the updated directory info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_DIRECTORY_INFO:NAME &lt;old-dir-path&gt; &lt;new-name&gt;"</t>
                    </list>
                </t>
                <t>where &lt;old-dir-path&gt; is the old absolute path name of the directory
                (encapsulated into apostrophes), which name is changes and &lt;new-name&gt; is
                the new name of the directory, encapsulated into apostrophes.</t>
            </section>

            <section title="Number of database instruments changed" anchor="SUBSCRIBE DB_INSTRUMENT_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of instruments
                in a particular directory in the instruments database
                is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE DB_INSTRUMENT_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_COUNT:&lt;dir-path&gt;"</t>
                    </list>
                </t>
                <t>where &lt;dir-path&gt; will be replaced by the absolute path
                name of the directory in the instruments database,
                in which the number of instruments is changed.</t>
                <t>Note that when a non-empty directory is removed, this event
                is not sent for the instruments in that directory.</t>
            </section>

            <section title="Database instrument information changed" anchor="SUBSCRIBE DB_INSTRUMENT_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to instruments
                in the instruments database by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE DB_INSTRUMENT_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_INFO:&lt;instr-path&gt;"</t>
                    </list>
                </t>
                <t>where &lt;instr-path&gt; will be replaced by the absolute path name
                of the instrument, which settings are changed. The front-end will have to send
                the respective command to actually get the updated directory info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENT_INFO:NAME &lt;old-instr-path&gt; &lt;new-name&gt;"</t>
                    </list>
                </t>
                <t>where &lt;old-instr-path&gt; is the old absolute path name of the instrument
                (encapsulated into apostrophes), which name is changes and &lt;new-name&gt; is
                the new name of the instrument, encapsulated into apostrophes.</t>
            </section>

            <section title="Database job status information changed" anchor="SUBSCRIBE DB_INSTRUMENTS_JOB_INFO" lscp_cmd="true">
                <t>Client may want to be notified when the status of particular database
                instruments job is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE DB_INSTRUMENTS_JOB_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:DB_INSTRUMENTS_JOB_INFO:&lt;job-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;job-id&gt; will be replaced by the numerical ID of the job,
                which status is changed. The front-end will have to send the respective
                command to actually get the status info. Because these messages
                will be triggered by LSCP commands issued by other clients rather than real
                time events happening on the server, it is believed that an empty notification
                message is sufficient here.</t>
            </section>

            <section title="Number of effect instances changed" anchor="SUBSCRIBE EFFECT_INSTANCE_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of effect instances
                is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE EFFECT_INSTANCE_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"EFFECT_INSTANCE_COUNT:&lt;instances&gt;"</t>
                    </list>
                </t>
                <t>where &lt;instances&gt; will be replaced by the new number
                of effect instances.</t>
            </section>

            <section title="Effect instance information changed" anchor="SUBSCRIBE EFFECT_INSTANCE_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to effect instances
                on the back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE EFFECT_INSTANCE_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                   <list>
                        <t>"EFFECT_INSTANCE_INFO:&lt;instance-id&gt;"</t>
                    </list>
                </t>
                <t>where &lt;instance-id&gt; will be replaced by the numerical ID
                of the effect instance.</t>
            </section>

            <section title="Number of send effect chains changed" anchor="SUBSCRIBE SEND_EFFECT_CHAIN_COUNT" lscp_cmd="true">
                <t>Client may want to be notified when the number of send effect chains
                is changed by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE SEND_EFFECT_CHAIN_COUNT</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:SEND_EFFECT_CHAIN_COUNT:&lt;device-id&gt; &lt;chains&gt;"</t>
                    </list>
                </t>
                <t>where &lt;device-id&gt; will be replaced by the numerical ID of the audio
                output device, in which the number of send effect chains is changed and
                &lt;chains&gt; will be replaced by the new number of send effect chains.</t>
            </section>

            <section title="Send effect chain information changed" anchor="SUBSCRIBE SEND_EFFECT_CHAIN_INFO" lscp_cmd="true">
                <t>Client may want to be notified when changes were made to send effect chains
                on the back-end by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE SEND_EFFECT_CHAIN_INFO</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                   <list>
                        <t>"SEND_EFFECT_CHAIN_INFO:&lt;device-id&gt; &lt;chain-id&gt; &lt;instances&gt;" -
                        Notifies that the number of effect instances in a particular send effect chain
                        is changed, where &lt;device-id&gt; will be replaced by the numerical ID of the audio
                        output device the send effect chain belongs to, &lt;chain-id&gt; will be replaced
                        by the numerical ID of the send effect chain in which the number of effect instances
                        has changed and &lt;instances&gt; will be replaced by the new number
                        of effect instances in the specified send effect chain.</t>
                    </list>
                </t>
            </section>

            <section title="Miscellaneous and debugging events" anchor="SUBSCRIBE MISCELLANEOUS" lscp_cmd="true">
                <t>Client may want to be notified of miscellaneous and debugging events occurring at
                the server by issuing the following command:</t>
                <t>
                    <list>
                        <t>SUBSCRIBE MISCELLANEOUS</t>
                    </list>
                </t>
                <t>Server will start sending the following notification messages:</t>
                <t>
                    <list>
                        <t>"NOTIFY:MISCELLANEOUS:&lt;string&gt;"</t>
                    </list>
                </t>
                <t>where &lt;string&gt; will be replaced by whatever data server
                wants to send to the client. Client MAY display this data to the
                user AS IS to facilitate debugging.</t>
            </section>
        </section>

        <section title="Security Considerations">
            <t>As there is so far no method of authentication and authorization
            defined and so not required for a client applications to succeed to
            connect, running LinuxSampler might be a security risk for the host
            system the LinuxSampler instance is running on.</t>
        </section>

        <section title="Acknowledgments">
            <t>This document has benefited greatly from the comments of the
            following people, discussed on the LinuxSampler developer's mailing
            list:</t>
            <t>
                <list>
                    <t>Rui Nuno Capela</t>
                    <t>Vladimir Senkov</t>
                    <t>Mark Knecht</t>
                    <t>Grigor Iliev</t>
                </list>
            </t>
        </section>

    </middle>

    <back>
        <references>
            <reference anchor="RFC2119">
                <front>
                    <title>Key words for use in RFCs to Indicate Requirement Levels</title>
                    <author initials="S." surname="Bradner" fullname="Scott Bradner">
                        <organization>Harvard University</organization>
                    </author>
                    <date year="1997"></date>
                </front>
                <seriesInfo name="RFC" value="2119" />
            </reference>
            <reference anchor="RFC793">
                <front>
                    <title>TRANSMISSION CONTROL PROTOCOL</title>
                    <author>
                        <organization>Defense Advanced Research Projects Agency</organization>
                    </author>
                    <date year="1981"></date>
                </front>
                <seriesInfo name="RFC" value="793" />
            </reference>
            <reference anchor="RFC2234">
                <front>
                    <title>Augmented BNF for Syntax Specifications</title>
                    <author initials="D.H." surname="Crocker" fullname="David H. Crocker">
                        <organization>Internet Mail Consortium</organization>
                    </author>
                    <author initials="P." surname="Overell" fullname="Paul Overell">
                        <organization>Demon Internet Ltd</organization>
                    </author>
                    <date year="1997"></date>
                </front>
                <seriesInfo name="RFC" value="2234" />
            </reference>
            <reference anchor="RFC20">
                <front>
                    <title>ASCII format for Network Interchange</title>
                    <author>
                        <organization>UCLA</organization>
                    </author>
                    <date year="1969"></date>
                </front>
                <seriesInfo name="RFC" value="20" />
            </reference>
         </references>
    </back>

</rfc>
