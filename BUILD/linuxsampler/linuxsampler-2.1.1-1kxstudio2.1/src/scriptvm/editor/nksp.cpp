
#line 3 "lex.Nksp_.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define Nksp__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer Nksp__create_buffer
#endif

#ifdef yy_delete_buffer
#define Nksp__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer Nksp__delete_buffer
#endif

#ifdef yy_scan_buffer
#define Nksp__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer Nksp__scan_buffer
#endif

#ifdef yy_scan_string
#define Nksp__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string Nksp__scan_string
#endif

#ifdef yy_scan_bytes
#define Nksp__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes Nksp__scan_bytes
#endif

#ifdef yy_init_buffer
#define Nksp__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer Nksp__init_buffer
#endif

#ifdef yy_flush_buffer
#define Nksp__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer Nksp__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define Nksp__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state Nksp__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define Nksp__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer Nksp__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define Nksp_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state Nksp_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define Nksp_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state Nksp_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define Nksp_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack Nksp_ensure_buffer_stack
#endif

#ifdef yylex
#define Nksp_lex_ALREADY_DEFINED
#else
#define yylex Nksp_lex
#endif

#ifdef yyrestart
#define Nksp_restart_ALREADY_DEFINED
#else
#define yyrestart Nksp_restart
#endif

#ifdef yylex_init
#define Nksp_lex_init_ALREADY_DEFINED
#else
#define yylex_init Nksp_lex_init
#endif

#ifdef yylex_init_extra
#define Nksp_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra Nksp_lex_init_extra
#endif

#ifdef yylex_destroy
#define Nksp_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy Nksp_lex_destroy
#endif

#ifdef yyget_debug
#define Nksp_get_debug_ALREADY_DEFINED
#else
#define yyget_debug Nksp_get_debug
#endif

#ifdef yyset_debug
#define Nksp_set_debug_ALREADY_DEFINED
#else
#define yyset_debug Nksp_set_debug
#endif

#ifdef yyget_extra
#define Nksp_get_extra_ALREADY_DEFINED
#else
#define yyget_extra Nksp_get_extra
#endif

#ifdef yyset_extra
#define Nksp_set_extra_ALREADY_DEFINED
#else
#define yyset_extra Nksp_set_extra
#endif

#ifdef yyget_in
#define Nksp_get_in_ALREADY_DEFINED
#else
#define yyget_in Nksp_get_in
#endif

#ifdef yyset_in
#define Nksp_set_in_ALREADY_DEFINED
#else
#define yyset_in Nksp_set_in
#endif

#ifdef yyget_out
#define Nksp_get_out_ALREADY_DEFINED
#else
#define yyget_out Nksp_get_out
#endif

#ifdef yyset_out
#define Nksp_set_out_ALREADY_DEFINED
#else
#define yyset_out Nksp_set_out
#endif

#ifdef yyget_leng
#define Nksp_get_leng_ALREADY_DEFINED
#else
#define yyget_leng Nksp_get_leng
#endif

#ifdef yyget_text
#define Nksp_get_text_ALREADY_DEFINED
#else
#define yyget_text Nksp_get_text
#endif

#ifdef yyget_lineno
#define Nksp_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno Nksp_get_lineno
#endif

#ifdef yyset_lineno
#define Nksp_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno Nksp_set_lineno
#endif

#ifdef yyget_column
#define Nksp_get_column_ALREADY_DEFINED
#else
#define yyget_column Nksp_get_column
#endif

#ifdef yyset_column
#define Nksp_set_column_ALREADY_DEFINED
#else
#define yyset_column Nksp_set_column
#endif

#ifdef yywrap
#define Nksp_wrap_ALREADY_DEFINED
#else
#define yywrap Nksp_wrap
#endif

#ifdef yyalloc
#define Nksp_alloc_ALREADY_DEFINED
#else
#define yyalloc Nksp_alloc
#endif

#ifdef yyrealloc
#define Nksp_realloc_ALREADY_DEFINED
#else
#define yyrealloc Nksp_realloc
#endif

#ifdef yyfree
#define Nksp_free_ALREADY_DEFINED
#else
#define yyfree Nksp_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define Nksp_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 34
#define YY_END_OF_BUFFER 35
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[758] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   16,   16,    0,    0,    0,    0,    0,    0,
       22,   22,   35,   33,   31,   29,   32,   33,   33,   33,
       33,    2,   33,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   33,   28,   28,   28,   28,   28,   31,   33,    5,
        4,    4,    4,    4,    4,   31,   33,    8,    7,    7,
        7,    7,    7,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   17,   16,   16,   16,   17,   17,   17,
       17,   31,   33,   13,   33,   33,   33,   33,   31,   33,

       14,   31,   33,   20,   20,   20,   20,   20,   22,   22,
       33,   33,   33,   33,   33,    0,    0,   32,    0,    0,
        1,    0,   25,   25,   27,   27,    0,    0,    0,    2,
       28,   28,   26,   26,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   24,   28,   28,   19,   28,
       28,   28,   28,    0,    0,    0,   30,   28,   28,   28,
       28,   28,   28,   28,   28,   28,    0,    5,    4,    4,
        4,    4,    4,    4,    0,    8,    7,    7,    7,    7,
        7,    7,   11,   11,   11,   11,   11,   11,   12,   12,
       12,   12,   12,   12,   17,   17,   16,   16,   17,   17,

       17,   17,    0,   13,    0,    0,    0,    0,    0,   14,
        0,   20,   20,   20,   20,   20,   20,   22,    0,    0,
        0,    0,    0,    0,   22,    0,    0,    0,    1,    0,
       25,   27,    0,    0,    0,   26,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   21,   28,   28,   28,   28,
       28,   30,    0,   28,   28,   24,   28,   28,   28,    4,
        4,    4,    4,    7,    7,    7,    7,   11,   11,   11,
       11,   12,   12,   12,   12,   17,   17,   17,   17,    0,
        0,    0,    0,   20,   20,   20,   20,    0,    0,    0,
        0,    0,   25,   27,    0,    0,   23,   26,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,    0,
       28,   18,   28,   28,   28,    4,    4,    4,    4,    7,
        7,    7,    7,   11,   11,   11,   11,   12,   12,   12,
       12,   17,   17,   17,   17,    0,    0,    0,    0,   20,
       20,   20,   20,    0,    0,    0,    0,    0,   25,   27,
       26,   28,   28,   28,   28,   28,   28,   28,   28,   28,
        0,   28,   28,    4,    4,    4,    4,    7,    7,    7,
        7,   11,   11,   11,   11,   12,   12,   12,   12,   17,
       17,   17,   17,    0,    0,    0,    0,   20,   20,   20,
       20,    0,    0,    0,    0,   25,   27,   26,   28,   28,

       28,   28,   28,   28,   28,   28,    0,   28,   28,    4,
        4,    4,    4,    7,    7,    7,    7,   11,   11,   11,
       11,   12,   12,   12,   12,   17,   17,   17,   17,    0,
        0,    0,    0,   20,   20,   20,   20,    0,    0,    0,
       25,   27,   26,   28,   28,   28,   28,   28,   28,   28,
        0,   28,    4,    4,    4,    4,    7,    7,    7,    7,
       11,   11,   11,   11,   12,   12,   12,   12,   17,   17,
       17,   17,    0,    0,    0,    0,   20,   20,   20,   20,
        0,    0,    0,   25,   27,   26,   28,   28,   28,   28,
       28,   28,    0,   28,    4,    4,    4,    4,    7,    7,

        7,    7,   11,   11,   11,   11,   12,   12,   12,   12,
       17,   17,   17,   17,    0,    0,    0,    0,   20,   20,
       20,   20,    0,    0,   25,   27,   26,   28,   28,   28,
       28,   28,   28,    0,   28,    4,    4,    4,    4,    7,
        7,    7,    7,   11,   11,   11,   11,   12,   12,   12,
       12,   17,   17,   17,   17,    0,    0,    0,    0,   20,
       20,   20,   20,    0,    0,   25,   27,   26,   28,   28,
       28,   28,   28,    0,    4,    4,    4,    4,    7,    7,
        7,    7,   11,   11,   11,   11,   12,   12,   12,   12,
       17,   17,   17,   17,    0,    0,    0,    0,   20,   20,

       20,   20,    0,    0,   25,   27,   26,   28,   28,   28,
       28,   28,    0,    4,    4,    4,    4,    7,    7,    7,
        7,   11,   11,   11,   11,   12,   12,   12,   12,   17,
       17,   17,   17,    0,    0,    0,    0,   20,   20,   20,
       20,    0,    0,   25,   27,   26,   15,   28,   28,    0,
        9,   28,    0,    4,    4,    4,    4,    7,    7,    7,
        7,   11,   11,   11,   11,   12,   12,   12,   12,   15,
       17,   17,   17,    9,   17,   15,    0,    0,    0,   15,
       20,   20,   20,   15,   15,   15,   15,   28,   28,   28,
       15,    4,    4,    4,    7,    7,    7,   11,   11,   11,

       12,   12,   12,   17,   17,   17,    0,    0,    0,   20,
       20,   20,   28,    0,    3,   28,    4,    4,    7,    7,
       11,   11,   12,   12,   17,   17,    3,   17,    0,    0,
       20,   20,   28,   28,    4,    4,    7,    7,   11,   11,
       12,   12,   17,   17,    0,    0,   20,   20,    0,    6,
        0,   10,   17,    6,   17,   10,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    1,    6,    1,    7,    8,    1,    1,    9,
       10,    1,    1,    1,    1,   11,    1,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,    1,    1,    1,
        1,    1,    1,   13,   14,   14,   15,   16,   17,   18,
       14,   14,   19,   14,   14,   14,   14,   20,   21,   14,
       14,   22,   23,   24,   25,   14,   14,   14,   14,   14,
        1,    1,    1,    1,   26,    1,   27,   14,   28,   29,

       30,   31,   14,   32,   33,   14,   14,   34,   35,   36,
       37,   38,   14,   39,   40,   41,   42,   14,   43,   14,
       44,   45,   46,    1,   47,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[48] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static const flex_int16_t yy_base[780] =
    {   0,
        0,   20,    0,   22,   62,  109,  156,  203,  250,  297,
      344,  391,  437,  461,  485,  509,  533,  557,  582,  629,
      675,    0, 2000, 1982, 1981, 2001,   72,   71,  718,  765,
       63,  812,  859,  906, 1977, 1979, 1978, 1971, 1957,   54,
     1962,   15, 1949, 1959, 1952, 1951,   18, 1950,   48, 1949,
     1953,   80,   59,   62, 1947, 1953,  100,  133,  166, 1965,
      953, 1000,   84,   85,   83,  170,  172, 1964, 1047, 1094,
      104,  125,  126, 1141, 1188,  131,  168,  170, 1235, 1282,
      174,  175,  176, 1963,  219,  227,  266,  180, 1962, 1961,
      106,  272,  274, 1960,  181, 1959, 1958,  124,  276,  307,

     1957, 1329, 1376,  213,  242,  311,  313,  241, 1422, 1464,
       65,  153,  202,  312,  120, 1956,  217,  223,  320, 1966,
     1954,  356, 1507, 1950, 1554, 1949,  249,  228,  200, 1956,
        0, 1947, 1601, 1946, 1949,  267,  268, 1947, 1934,  201,
     1926, 1933, 1920, 1930, 1922,    0, 1928, 1915,    0, 1921,
     1920, 1917, 1919,  318, 1904,  360, 1933, 1913, 1915, 1906,
     1912, 1908, 1908, 1906, 1912,  342,  369, 1924, 1920,    0,
      311, 1916, 1914,  316,  401, 1920, 1916,    0,  318, 1912,
     1910,  367, 1913,    0,  344, 1909, 1907,  368, 1910,    0,
      352, 1906, 1904,  392, 1910,  400,  419,  423,   78,  412,

      426, 1909,  451, 1908,  137,  428,  450, 1907,  475, 1906,
        0,  428,  429,  442,  471,  477,  498, 1647,  341,  263,
      435,  476,  216,  481, 1905,  438,  482,  278, 2001,  524,
     1905, 1904,  440,  464,  505, 1903, 1892, 1900, 1890,  503,
     1881, 1884, 1873, 1878, 1881,    0, 1882, 1865, 1878, 1879,
     1872, 2001,  530,  299, 1864, 1874, 1873, 1866, 1860,  519,
      504,  522, 1874,  531,  508,  543, 1873,  544,  532,  545,
     1872,  546,  556,  555, 1871,  315, 1879,  393,  577,  487,
     1878,  527,  589,  596,  606,  615,  642,  585,  479,  593,
      520,  647, 1868, 1867,  601,  608, 1875, 1865, 1865,  576,

     1874, 1873, 1846, 1859, 1844, 1846, 1855, 1850, 1851,  640,
     1841,    0, 1852, 1837, 1847,  635, 1852,  641,  643,  645,
     1851,  652,  654,  659, 1850,  666,  668,  665, 1849,  674,
      676,  599,  685,  678,  684,  686,  690,  715,  719,  735,
      737,  736,  741,  704,  631,  716,  597,  774, 1847, 1846,
     1845, 1846, 1842, 1846, 1845, 1826, 1831, 1831, 1821, 1822,
      780, 1823, 1819,  693,  724,  732,  734,  739,  759,  766,
      768,  761,  770,  772,  774,  778,  780,  782,  787,  787,
      732,  628,  809,  792,  811,  814,  815,  839,  845,  852,
      872,  372,  834,  665,  875, 1835, 1834, 1833, 1838, 1839,

     1833, 1836, 1821, 1813, 1812, 1811,  877, 1813, 1816,  822,
      748, 1825,  818,  823,  833, 1824,  829,  835,  864, 1823,
      866,  868,  875, 1822,  867, 1824,  874,  879,  885, 1823,
      903,  905,  887,  924,  925,  926,  931,  928,  931,  932,
     1822, 1821, 1820,  917, 1815, 1819, 1793, 1773, 1772, 1771,
      939, 1771, 1776,  930,  951,  952, 1769,  953,  959,  960,
     1761,  961,  967,  968, 1757,  969,  975,  976,  977,  995,
      998, 1759, 1001, 1002, 1008, 1757, 1024, 1038, 1026, 1028,
     1005, 1044, 1059,  958,  972, 1012, 1757, 1745, 1742, 1043,
     1727, 1726, 1071, 1726,  919, 1731, 1015, 1721, 1051, 1726,

     1017, 1716, 1052, 1721, 1058, 1714, 1053, 1717, 1062, 1706,
     1069, 1070, 1089, 1093, 1100, 1072, 1103, 1104, 1121, 1107,
     1151, 1155, 1099, 1122, 1713, 1712, 1708, 1701, 1705, 1694,
     1694, 1681, 1660, 1156, 1664, 1113, 1115, 1141, 1143, 1146,
     1148, 1152, 1158, 1159, 1166, 1180, 1164, 1186, 1193, 1190,
     1192, 1198, 1200,  544, 1201, 1204, 1206, 1207, 1209, 1228,
     1245, 1227, 1251, 1157, 1251, 1674, 1662, 1654, 1639, 1626,
     1617, 1597, 1574, 1256, 1242, 1244, 1246, 1249, 1255, 1259,
     1277, 1256, 1278, 1281, 1285, 1288, 1291, 1290, 1293, 1296,
     1301, 1302, 1303, 1306, 1309, 1324, 1328, 1331, 1348, 1349,

     1350, 1354,  816, 1354, 1573, 1552, 1541, 1535, 1507, 1502,
     1386, 1476, 1387, 1341, 1342, 1353, 1400, 1377, 1343, 1378,
     1405, 1391, 1372, 1380, 1428, 1396, 1395, 1397, 1438, 1470,
     1404, 1415, 1458, 1435, 1418, 1424, 1468, 1444, 1466, 1477,
     1484,  880, 1485, 1427, 1421, 1412, 1386, 1360, 1345, 1517,
     1327, 1312, 1489,    0, 1431, 1307, 1295,    0, 1437, 1265,
     1260,    0, 1480, 1240, 1235,    0, 1508, 1218, 1207, 1463,
     1455, 1512, 1528, 1174, 1518, 1522, 1459, 1523, 1524, 1546,
     1567, 1568, 1572, 1573, 1165, 1149, 1135, 1123, 1573, 1117,
     1577, 1526, 1611, 1529, 1563, 1617, 1575, 1578, 1623, 1609,

     1613, 1633, 1619, 1504, 1649, 1564, 1570, 1654, 1600, 1639,
     1660, 1665, 1109, 1672, 1066, 1051, 1050, 1603, 1019, 1626,
      956, 1637,  924, 1648, 1656, 1683,  915, 1479, 1662, 1674,
     1691, 1692, 1697, 1699, 1705, 1710, 1715, 1724, 1729, 1734,
     1743, 1748, 1753, 1762, 1764, 1773, 1775, 1783, 1784,  904,
     1789,  839, 1794,  730, 1795,  700, 2001, 1812, 1814, 1816,
     1818, 1820, 1822, 1824,  670, 1826,  625,  577,  488,  474,
     1828,  414,  324,  241,  185,  124,   51, 1830, 1832
    } ;

static const flex_int16_t yy_def[780] =
    {   0,
      757,    1,    1,    1,  758,  758,  759,  759,  760,  760,
      761,  761,  762,  762,  763,  763,  763,  763,  764,  764,
      763,   21,  757,  765,  765,  757,  765,  766,  767,  768,
      765,  769,  770,  769,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  771,   34,   34,   34,   34,   34,  765,  765,  765,
      772,  772,   62,   62,   62,  765,  765,  765,  773,  773,
       70,   70,   70,  774,  774,   75,   75,   75,  775,  775,
       80,   80,   80,  776,  776,  757,  776,  776,  776,  776,
      776,  765,  765,  765,  765,  765,  765,  765,  765,  765,

      765,  777,  777,  103,  103,  103,  103,  103,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  766,  778,
      765,  766,  767,  123,  768,  125,  765,  765,  765,   34,
       34,   34,  770,  133,   34,   34,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,   34,   34,  771,  779,  771,  765,   34,   34,   34,
       34,   34,   34,   34,   34,   34,  765,  765,   62,   62,
       62,   62,   62,   62,  765,  765,   70,   70,   70,   70,
       70,   70,   75,   75,   75,   75,   75,   75,   80,   80,
       80,   80,   80,   80,  776,  776,  776,  757,  776,  776,

      776,  776,  765,  765,  765,  765,  765,  765,  765,  765,
      103,  103,  103,  103,  103,  103,  103,  765,  765,  765,
      765,  765,  765,  765,  765,  765,  765,  765,  757,  766,
      123,  125,  765,  765,  765,  133,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   34,   34,   34,   34,   34,
       34,  757,  771,   34,   34,   34,   34,   34,   34,   62,
       62,   62,   62,   70,   70,   70,   70,   75,   75,   75,
       75,   80,   80,   80,   80,  776,  776,  776,  776,  765,
      765,  765,  765,  103,  103,  103,  103,  765,  765,  765,
      765,  766,  123,  125,  765,  765,  765,  133,   34,   34,

       34,   34,   34,   34,   34,   34,   34,   34,   34,  771,
       34,   34,   34,   34,   34,   62,   62,   62,   62,   70,
       70,   70,   70,   75,   75,   75,   75,   80,   80,   80,
       80,  776,  776,  776,  776,  765,  765,  765,  765,  103,
      103,  103,  103,  765,  765,  765,  765,  766,  123,  125,
      133,   34,   34,   34,   34,   34,   34,   34,   34,   34,
      771,   34,   34,   62,   62,   62,   62,   70,   70,   70,
       70,   75,   75,   75,   75,   80,   80,   80,   80,  776,
      776,  776,  776,  765,  765,  765,  765,  103,  103,  103,
      103,  765,  765,  765,  766,  123,  125,  133,   34,   34,

       34,   34,   34,   34,   34,   34,  771,   34,   34,   62,
       62,   62,   62,   70,   70,   70,   70,   75,   75,   75,
       75,   80,   80,   80,   80,  776,  776,  776,  776,  765,
      765,  765,  765,  103,  103,  103,  103,  765,  765,  766,
      123,  125,  133,   34,   34,   34,   34,   34,   34,   34,
      771,   34,   62,   62,   62,   62,   70,   70,   70,   70,
       75,   75,   75,   75,   80,   80,   80,   80,  776,  776,
      776,  776,  765,  765,  765,  765,  103,  103,  103,  103,
      765,  765,  766,  123,  125,  133,   34,   34,   34,   34,
       34,   34,  771,   34,   62,   62,   62,   62,   70,   70,

       70,   70,   75,   75,   75,   75,   80,   80,   80,   80,
      776,  776,  776,  776,  765,  765,  765,  765,  103,  103,
      103,  103,  765,  766,  123,  125,  133,   34,   34,   34,
       34,   34,   34,  771,   34,   62,   62,   62,   62,   70,
       70,   70,   70,   75,   75,   75,   75,   80,   80,   80,
       80,  776,  776,  776,  776,  765,  765,  765,  765,  103,
      103,  103,  103,  765,  766,  123,  125,  133,   34,   34,
       34,   34,   34,  771,   62,   62,   62,   62,   70,   70,
       70,   70,   75,   75,   75,   75,   80,   80,   80,   80,
      776,  776,  776,  776,  765,  765,  765,  765,  103,  103,

      103,  103,  765,  766,  123,  125,  133,   34,   34,   34,
       34,   34,  771,   62,   62,   62,   62,   70,   70,   70,
       70,   75,   75,   75,   75,   80,   80,   80,   80,  776,
      776,  776,  776,  765,  765,  765,  765,  103,  103,  103,
      103,  765,  766,  123,  125,  133,   34,   34,   34,  765,
      765,   34,  771,   62,   62,   62,   62,   70,   70,   70,
       70,   75,   75,   75,   75,   80,   80,   80,   80,  776,
      776,  776,  776,  776,  776,  765,  765,  765,  765,  103,
      103,  103,  103,  766,  123,  125,  133,   34,   34,   34,
      771,   62,   62,   62,   70,   70,   70,   75,   75,   75,

       80,   80,   80,  776,  776,  776,  765,  765,  765,  103,
      103,  103,   34,  765,  765,   34,   62,   62,   70,   70,
       75,   75,   80,   80,  776,  776,  776,  776,  765,  765,
      103,  103,   34,   34,   62,   62,   70,   70,   75,   75,
       80,   80,  776,  776,  765,  765,  103,  103,  765,  765,
      765,  765,  776,  776,  776,  776,    0,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757
    } ;

static const flex_int16_t yy_nxt[2049] =
    {   0,
       24,   25,   26,   27,   24,   28,   29,   30,   24,   24,
       31,   32,   33,   34,   34,   34,   35,   34,   34,   34,
       34,   36,   37,   34,   38,   34,   39,   40,   41,   42,
       43,   34,   44,   34,   45,   46,   47,   48,   34,   49,
       50,   34,   51,   34,   34,   52,   24,   53,  143,   53,
      144,  212,   54,  149,   54,   55,  146,   55,   56,   57,
       56,   57,   24,   58,   26,   24,   59,   24,   24,   24,
       24,   60,   24,  120,   24,  118,  121,  151,   62,  117,
      140,  117,  155,   63,   64,  140,   65,  122,  117,  127,
      141,  152,  146,  276,  196,  158,  156,  159,  128,  129,

      172,  173,  169,  169,  169,  174,  224,   24,   24,   24,
       58,   26,   24,   59,   24,   24,   24,   24,   60,   24,
      180,   24,  196,  177,  195,   62,  157,  162,  202,  151,
       63,   64,  163,   65,  167,  164,  117,  167,  165,  166,
      117,  181,  168,  152,  177,  177,  208,  186,  182,  117,
      183,  228,  280,  117,   24,   24,   24,   66,   26,   24,
       67,   24,   24,   24,   24,   68,   24,  167,   24,  117,
      167,  175,   70,  175,  175,  168,  175,   71,   72,  176,
       73,  176,  117,  225,  187,  189,  117,  183,  117,  183,
      192,  193,  188,  189,  189,  189,  196,  117,  194,  199,

      205,   24,   24,   24,   66,   26,   24,   67,   24,   24,
       24,   24,   68,   24,  116,   24,  117,  116,  117,   70,
      197,  198,  197,  197,   71,   72,  118,   73,  198,  198,
      198,  198,  117,  117,  241,  196,  205,  225,  235,  117,
      242,  183,  116,  116,  117,  116,  116,  228,   24,   24,
       24,   25,   26,   24,   24,   24,   24,   24,   24,   24,
       24,  214,   24,  217,  234,  117,   75,  197,  198,  197,
      197,   76,   77,  203,   78,  203,  203,  209,  203,  117,
      209,  204,  196,  204,  233,  210,  135,  135,  117,  238,
      117,  239,  117,  225,  117,   24,   24,   24,   25,   26,

       24,   24,   24,   24,   24,   24,   24,   24,  209,   24,
      291,  209,  116,   75,  116,  116,  210,  116,   76,   77,
      155,   78,  120,  117,  177,  121,  260,  215,  117,  216,
      169,  196,  263,  264,  156,  169,  122,  177,  303,  311,
      332,  226,   24,   24,   24,   25,   26,   24,   24,   24,
       24,   24,   24,   24,   24,  227,   24,  117,  120,  268,
       80,  121,  155,  183,  157,   81,   82,  272,   83,  162,
      167,  189,  122,  167,  163,  230,  156,  164,  168,  253,
      165,  166,  224,  267,  271,  117,  177,  183,  117,   24,
       24,   24,   25,   26,   24,   24,   24,   24,   24,   24,

       24,   24,  175,   24,  438,  175,  157,   80,  275,  196,
      176,  189,   81,   82,  169,   83,  196,  117,  334,  199,
      197,  198,  197,  197,  198,  198,  198,  198,  196,  116,
      116,  199,  116,  116,  277,  196,   24,   24,   85,   86,
       87,   87,  196,  116,  117,  199,  116,  205,  214,  278,
      281,  117,  203,   88,  117,  203,  117,  284,   89,   90,
      204,   91,   85,   86,   87,   87,  117,  117,  295,  205,
      225,  289,  116,  282,  133,  116,  209,   88,  116,  209,
      117,  116,   89,   90,  210,   91,   92,   26,  131,   93,
      214,  117,  117,  285,   94,  117,  214,  117,  117,  116,

      286,   95,  116,  117,  296,  226,   96,   97,  345,   98,
       92,   26,  336,   93,  287,  297,  288,  290,   94,  227,
      317,  117,  135,  169,  321,   95,  120,  177,  302,  121,
       96,   97,  155,   98,   99,   26,  117,  100,  169,  292,
      122,  169,  101,  117,  316,  310,  156,  318,  325,   95,
      177,  183,  338,  347,   96,   97,  320,   98,   99,   26,
      196,  100,  177,  183,  183,  189,  101,  593,  322,  324,
      326,  328,  329,   95,  189,  189,  157,  125,   96,   97,
      330,   98,   24,  102,   26,   24,  103,   24,   24,   24,
       24,   24,   24,  196,   24,  135,  199,  116,  105,  353,

      116,  117,  335,  106,  107,  117,  108,  116,  205,  117,
      116,  297,  344,  117,  339,  196,  116,  117,  297,  116,
      346,  340,  341,  380,  117,  123,  225,   24,   24,   24,
      102,   26,   24,  103,   24,   24,   24,   24,   24,   24,
      342,   24,  155,  116,  196,  105,  116,  117,  428,  120,
      106,  107,  121,  108,  169,  366,  156,  367,  393,  364,
      169,  214,  169,  122,  177,  361,  370,  343,  371,  368,
      116,  177,  348,  177,   24,   24,  109,   26,  183,  110,
      374,  117,  375,  372,  189,  183,  157,  183,  378,  376,
      379,   95,  382,  189,  196,  189,   96,   97,  383,   98,

      196,  196,  117,  439,  199,  111,  117,  112,  381,  205,
      384,  113,  169,  385,  114,  410,  196,  115,  116,  116,
      117,  116,  116,  116,  116,  116,  116,  116,  116,  386,
      116,  117,  117,  387,  124,  117,  116,  116,  116,  116,
      116,  116,  116,  169,  392,  116,  196,  394,  196,  411,
      390,  169,  412,  169,  413,  391,  214,  427,  177,  388,
      389,  414,  454,  116,  116,  116,  116,  169,  116,  116,
      116,  116,  116,  116,  116,  116,  120,  116,  177,  121,
      183,  126,  155,  418,  415,  177,  416,  177,  417,  183,
      122,  183,  420,  183,  421,  419,  156,  189,  395,  189,

      422,  189,  424,  196,  407,  423,  189,  425,  117,  426,
      116,  116,  116,  116,  430,  116,  116,  116,  116,  116,
      116,  116,  116,  130,  116,  196,  157,  117,  132,  429,
      117,  117,  117,  456,  432,  433,  431,  169,  453,  457,
      116,  169,  177,  116,  460,  642,  116,  458,  177,  116,
      117,  461,  177,  116,  183,  117,  116,  116,  116,  116,
      116,  434,  116,  116,  116,  116,  116,  116,  116,  116,
      435,  116,  436,  116,  225,  134,  116,  120,  462,  155,
      121,  464,  468,  183,  465,  183,  189,  189,  470,  466,
      196,  122,  437,  156,  189,  196,  117,  440,  471,  451,

      472,  196,  476,  117,  116,  116,  116,  116,  225,  116,
      116,  116,  116,  116,  116,  116,  116,  474,  116,  117,
      117,  117,  132,  157,  475,  116,  116,  116,  116,  116,
      116,  196,  116,  536,  120,  116,  135,  121,  169,  478,
      477,  155,  487,  741,  117,  479,  480,  117,  483,  169,
      496,  116,  116,  116,  116,  493,  116,  116,  116,  116,
      116,  116,  116,  116,  481,  116,  497,  482,  498,  170,
      169,  169,  177,  500,  501,  739,  502,  231,  177,  177,
      183,  504,  505,  525,  506,  157,  183,  183,  189,  508,
      509,  232,  510,  196,  189,  189,  199,  526,  116,  116,

      116,  116,  511,  116,  116,  116,  116,  116,  116,  116,
      116,  196,  116,  513,  196,  512,  170,  117,  117,  171,
      205,  117,  516,  517,  117,  116,  515,  116,  116,  116,
      116,  236,  116,  538,  169,  542,  177,  527,  737,  116,
      225,  521,  116,  214,  522,  116,  116,  116,  116,  519,
      116,  116,  116,  116,  116,  116,  116,  116,  520,  116,
      117,  120,  135,  178,  121,  540,  544,  548,  531,  735,
      177,  183,  189,  155,  734,  122,  546,  183,  230,  523,
      550,  189,  117,  552,  524,  196,  196,  156,  117,  553,
      253,  557,  116,  116,  116,  116,  534,  116,  116,  116,

      116,  116,  116,  116,  116,  196,  116,  554,  116,  196,
      178,  116,  199,  179,  556,  117,  117,  157,  555,  117,
      117,  558,  116,  205,  120,  116,  561,  121,  733,  559,
      576,  564,  169,  575,  169,  560,  565,  716,  122,  116,
      116,  116,  116,  713,  116,  116,  116,  116,  116,  116,
      116,  116,  116,  116,  236,  116,  116,  184,  155,  116,
      169,  578,  169,  580,  577,  177,  579,  177,  232,  562,
      574,  177,  156,  117,  214,  581,  582,  177,  183,  583,
      563,  584,  586,  183,  231,  183,  116,  116,  116,  116,
      196,  116,  116,  116,  116,  116,  116,  116,  116,  183,

      116,  603,  157,  585,  184,  189,  587,  185,  588,  189,
      590,  189,  189,  589,  196,  592,  196,  196,  591,  594,
      117,  596,  117,  117,  595,  117,  703,  598,  116,  116,
      597,  116,  116,  116,  116,  116,  116,  702,  116,  116,
      116,  116,  116,  116,  116,  116,  116,  116,  599,  116,
      601,  190,  116,  120,  700,  116,  121,  614,  155,  699,
      600,  169,  615,  169,  616,  169,  617,  122,  169,  602,
      618,  604,  156,  621,  177,  177,  613,  619,  177,  697,
      116,  116,  116,  116,  696,  116,  116,  116,  116,  116,
      116,  116,  116,  622,  116,  620,  177,  183,  190,  623,

      183,  191,  157,  624,  183,  625,  626,  183,  627,  189,
      189,  628,  189,  629,  694,  189,  630,  196,  196,  196,
      631,  632,  196,  633,  634,  117,  693,  116,  116,  116,
      211,  690,  116,  211,  116,  116,  116,  116,  116,  116,
      117,  116,  635,  117,  117,  213,  636,  117,  637,  116,
      116,  116,  116,  116,  116,  116,  120,  654,  116,  121,
      169,  169,  177,  638,  689,  655,  659,  639,  640,  643,
      122,  641,  169,  656,  116,  116,  116,  211,  688,  116,
      211,  116,  116,  116,  116,  116,  116,  650,  116,  155,
      650,  183,  213,  658,  651,  663,  177,  177,  660,  183,

      664,  650,  653,  156,  650,  135,  650,  662,  651,  650,
      183,  652,  666,  651,  189,  189,  189,  668,  667,  169,
      196,  116,  116,  218,  177,  657,  218,  671,  687,  650,
      661,  196,  650,  157,  117,  672,  651,  686,  117,  650,
      117,  677,  650,  685,  678,  116,  651,  183,  116,  692,
      169,  676,  219,  665,  220,  695,  177,  189,  221,  673,
      680,  222,  673,  669,  223,  218,  674,  116,  218,  650,
      116,  196,  650,  704,  196,  117,  651,  707,  116,  196,
      117,  116,  199,  675,  117,  650,  670,  120,  650,  681,
      121,  155,  651,  679,  219,  196,  220,  682,  698,  183,

      221,  684,  744,  222,  146,  691,  223,  116,  116,  683,
      116,  116,  116,  116,  116,  116,  116,  116,  650,  116,
      196,  650,  649,  124,  725,  651,  701,  189,  196,  673,
      648,  705,  673,  117,  196,  157,  674,  706,  117,  117,
      117,  205,  708,  709,  196,  169,  717,  116,  169,  718,
      116,  647,  116,  116,  116,  116,  646,  116,  116,  116,
      116,  116,  116,  116,  116,  214,  116,  645,  116,  116,
      126,  116,  116,  116,  714,  120,  116,  714,  121,  155,
      196,  715,  177,  719,  728,  710,  117,  711,  644,  122,
      729,  712,  230,  156,  177,  720,  253,  183,  721,  116,

      116,  116,  116,  612,  116,  116,  116,  116,  116,  116,
      116,  116,  714,  116,  611,  714,  117,  134,  714,  715,
      730,  714,  169,  157,  714,  715,  736,  714,  183,  722,
      169,  715,  189,  723,  714,  610,  177,  714,  189,  724,
      116,  715,  183,  116,  609,  177,  116,  116,  218,  738,
      726,  218,  189,  726,  608,  714,  183,  727,  714,  731,
      740,  714,  715,  117,  714,  196,  116,  189,  715,  116,
      117,  742,  196,  714,  607,  743,  714,  219,  117,  220,
      715,  745,  606,  221,  726,  732,  222,  726,  117,  223,
      117,  727,  116,  116,  605,  116,  116,  746,  749,  196,

      751,  749,  312,  751,  573,  750,  749,  752,  146,  749,
      747,  751,  572,  750,  751,  748,  749,  571,  752,  749,
      570,  569,  568,  750,  169,  751,  567,  566,  751,  169,
      749,  551,  752,  749,  177,  751,  549,  750,  751,  547,
      545,  543,  752,  177,  749,  541,  539,  749,  183,  751,
      537,  750,  751,  183,  753,  535,  752,  753,  533,  532,
      530,  754,  189,  755,  529,  749,  755,  189,  749,  196,
      756,  528,  750,  518,  751,  514,  749,  751,  196,  749,
      117,  752,  507,  750,  751,  749,  503,  751,  749,  117,
      751,  752,  750,  751,  499,  753,  755,  752,  753,  755,

      117,  495,  754,  756,  494,  117,  492,  491,  146,  490,
      196,  196,   61,   61,   69,   69,   74,   74,   79,   79,
       84,   84,   24,   24,  104,  104,  119,  119,  154,  154,
      120,  120,  155,  155,  489,  488,  486,  485,  484,  473,
      469,  467,  463,  459,  455,  312,  452,  450,  449,  448,
      146,  447,  446,  445,  444,  443,  442,  441,  409,  408,
      406,  146,  405,  404,  403,  402,  401,  400,  399,  398,
      397,  396,  377,  373,  369,  365,  312,  311,  363,  362,
      146,  360,  359,  358,  357,  356,  146,  355,  354,  352,
      351,  117,  350,  349,  337,  333,  331,  327,  323,  319,

      315,  314,  313,  312,  312,  309,  308,  307,  306,  305,
      146,  304,  303,  146,  146,  301,  300,  299,  298,  294,
      293,  117,  117,  283,  117,  279,  196,  274,  273,  189,
      270,  269,  183,  266,  265,  177,  117,  262,  261,  169,
      117,  161,  259,  159,  258,  257,  256,  255,  254,  117,
      252,  251,  250,  249,  248,  146,  146,  247,  246,  245,
      244,  243,  146,  240,  237,  236,  135,  130,  232,  231,
      117,  229,  117,  117,  207,  206,  117,  201,  200,  196,
      117,  117,  161,  160,  153,  146,  150,  148,  147,  146,
      145,  142,  139,  138,  137,  136,  135,  117,  117,  757,

       23,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757
    } ;

static const flex_int16_t yy_chk[2049] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    2,   42,    4,
       42,  777,    2,   47,    4,    2,   47,    4,    2,    2,
        4,    4,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,   28,    5,   27,   28,   49,    5,   31,
       40,  111,   52,    5,    5,   53,    5,   28,   27,   31,
       40,   49,   54,  199,  199,   53,   52,   54,   31,   31,

       63,   64,   65,   63,   64,   65,  111,    5,    5,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
       71,    6,   91,   71,  776,    6,   52,   57,   91,   57,
        6,    6,   57,    6,   58,   57,  115,   58,   57,   57,
       98,   72,   58,   57,   72,   73,   98,   76,   73,   58,
       76,  115,  205,  205,    6,    6,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,   59,    7,  112,
       59,   66,    7,   67,   66,   59,   67,    7,    7,   66,
        7,   67,   59,  112,   77,  775,   66,   77,   67,   78,
       81,   82,   78,   81,   82,   83,   88,   95,   83,   88,

       95,    7,    7,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,  104,    8,  129,  104,  113,    8,
       85,   85,   85,   85,    8,    8,  118,    8,   86,   86,
       86,   86,  223,  117,  140,   85,  117,  113,  129,  118,
      140,  774,  108,  105,  128,  108,  105,  223,    8,    8,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,  105,    9,  108,  128,  127,    9,   87,   87,   87,
       87,    9,    9,   92,    9,   93,   92,   99,   93,  220,
       99,   92,   87,   93,  127,   99,  136,  137,   92,  136,
       93,  137,   99,  220,  228,    9,    9,   10,   10,   10,

       10,   10,   10,   10,   10,   10,   10,   10,  100,   10,
      228,  100,  106,   10,  107,  106,  100,  107,   10,   10,
      154,   10,  119,  100,  773,  119,  171,  106,  114,  107,
      171,  276,  174,  179,  154,  174,  119,  179,  254,  254,
      276,  114,   10,   10,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,  114,   11,  219,  122,  185,
       11,  122,  156,  185,  154,   11,   11,  191,   11,  166,
      167,  191,  122,  167,  166,  122,  156,  166,  167,  156,
      166,  166,  219,  182,  188,  167,  182,  188,  392,   11,
       11,   12,   12,   12,   12,   12,   12,   12,   12,   12,

       12,   12,  175,   12,  392,  175,  156,   12,  194,  278,
      175,  194,   12,   12,  772,   12,  196,  175,  278,  196,
      197,  197,  197,  197,  198,  198,  198,  198,  200,  212,
      213,  200,  212,  213,  200,  197,   12,   12,   13,   13,
       13,   13,  201,  214,  206,  201,  214,  206,  213,  201,
      206,  221,  203,   13,  226,  203,  233,  214,   13,   13,
      203,   13,   14,   14,   14,   14,  207,  203,  233,  207,
      221,  226,  215,  207,  770,  215,  209,   14,  216,  209,
      234,  216,   14,   14,  209,   14,   15,   15,  769,   15,
      215,  209,  222,  215,   15,  289,  216,  224,  227,  217,

      216,   15,  217,  280,  234,  222,   15,   15,  289,   15,
       16,   16,  280,   16,  217,  235,  224,  227,   16,  222,
      261,  235,  240,  261,  265,   16,  230,  265,  240,  230,
       16,   16,  253,   16,   17,   17,  291,   17,  260,  230,
      230,  262,   17,  282,  260,  253,  253,  262,  269,   17,
      264,  269,  282,  291,   17,   17,  264,   17,   18,   18,
      554,   18,  266,  268,  270,  272,   18,  554,  266,  268,
      270,  272,  273,   18,  274,  273,  253,  768,   18,   18,
      274,   18,   19,   19,   19,   19,   19,   19,   19,   19,
       19,   19,   19,  279,   19,  300,  279,  284,   19,  300,

      284,  288,  279,   19,   19,  283,   19,  285,  283,  290,
      285,  295,  288,  347,  283,  332,  286,  295,  296,  286,
      290,  284,  285,  332,  296,  767,  347,   19,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
      286,   20,  310,  287,  382,   20,  287,  345,  382,  292,
       20,   20,  292,   20,  316,  318,  310,  319,  345,  316,
      318,  287,  319,  292,  320,  310,  322,  287,  323,  320,
      765,  322,  292,  323,   20,   20,   21,   21,  324,   21,
      326,  394,  327,  324,  328,  326,  310,  327,  330,  328,
      331,   21,  334,  330,  334,  331,   21,   21,  335,   21,

      335,  333,  336,  394,  333,   21,  337,   21,  333,  337,
      336,   21,  364,  337,   21,  364,  756,   21,   29,   29,
      344,   29,   29,   29,   29,   29,   29,   29,   29,  338,
       29,  338,  346,  339,   29,  339,  340,  342,  341,  340,
      342,  341,  343,  365,  344,  343,  754,  346,  381,  365,
      342,  366,  366,  367,  367,  343,  341,  381,  368,  340,
      341,  368,  411,   29,   29,   30,   30,  411,   30,   30,
       30,   30,   30,   30,   30,   30,  348,   30,  369,  348,
      372,   30,  361,  372,  369,  370,  370,  371,  371,  373,
      348,  374,  374,  375,  375,  373,  361,  376,  348,  377,

      376,  378,  378,  380,  361,  377,  379,  379,  384,  380,
       30,   30,   32,   32,  384,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   32,  383,  361,  385,   32,  383,
      386,  387,  603,  413,  386,  387,  385,  413,  410,  414,
      388,  410,  414,  388,  417,  603,  389,  415,  417,  389,
      393,  418,  415,  390,  418,  752,  390,   32,   32,   33,
       33,  388,   33,   33,   33,   33,   33,   33,   33,   33,
      389,   33,  390,  391,  393,   33,  391,  395,  419,  407,
      395,  421,  425,  419,  422,  421,  425,  422,  427,  423,
      427,  395,  391,  407,  423,  428,  642,  395,  428,  407,

      429,  429,  433,  433,   33,   33,   34,   34,  642,   34,
       34,   34,   34,   34,   34,   34,   34,  431,   34,  431,
      750,  432,   34,  407,  432,  434,  435,  436,  434,  435,
      436,  727,  437,  495,  440,  437,  444,  440,  495,  435,
      434,  451,  444,  723,  438,  436,  437,  439,  440,  454,
      454,   34,   34,   61,   61,  451,   61,   61,   61,   61,
       61,   61,   61,   61,  438,   61,  455,  439,  456,   61,
      455,  456,  458,  458,  459,  721,  460,  484,  459,  460,
      462,  462,  463,  484,  464,  451,  463,  464,  466,  466,
      467,  485,  468,  469,  467,  468,  469,  485,   61,   61,

       62,   62,  469,   62,   62,   62,   62,   62,   62,   62,
       62,  470,   62,  471,  471,  470,   62,  473,  474,   62,
      473,  481,  474,  475,  475,  477,  473,  479,  477,  480,
      479,  486,  480,  497,  497,  501,  501,  486,  719,  478,
      481,  479,  478,  477,  480,   62,   62,   69,   69,  477,
       69,   69,   69,   69,   69,   69,   69,   69,  478,   69,
      482,  483,  490,   69,  483,  499,  503,  507,  490,  717,
      499,  503,  507,  493,  716,  483,  505,  505,  483,  482,
      509,  509,  715,  511,  483,  511,  512,  493,  516,  512,
      493,  516,   69,   69,   70,   70,  493,   70,   70,   70,

       70,   70,   70,   70,   70,  513,   70,  513,  520,  514,
       70,  520,  514,   70,  515,  523,  515,  493,  514,  517,
      518,  517,  519,  518,  524,  519,  520,  524,  713,  518,
      537,  523,  536,  536,  537,  519,  524,  690,  524,   70,
       70,   74,   74,  688,   74,   74,   74,   74,   74,   74,
       74,   74,  521,   74,  687,  521,  522,   74,  534,  522,
      538,  539,  539,  541,  538,  540,  540,  541,  686,  521,
      534,  542,  534,  564,  522,  542,  543,  543,  544,  544,
      522,  545,  547,  547,  685,  545,   74,   74,   75,   75,
      674,   75,   75,   75,   75,   75,   75,   75,   75,  546,

       75,  564,  534,  546,   75,  548,  548,   75,  549,  550,
      551,  551,  549,  550,  552,  553,  553,  555,  552,  555,
      556,  557,  557,  558,  556,  559,  669,  559,  562,  560,
      558,  562,  560,   75,   75,   79,   79,  668,   79,   79,
       79,   79,   79,   79,   79,   79,  561,   79,  560,  561,
      562,   79,  563,  565,  665,  563,  565,  575,  574,  664,
      561,  575,  576,  576,  577,  577,  578,  565,  578,  563,
      579,  565,  574,  582,  579,  582,  574,  580,  580,  661,
       79,   79,   80,   80,  660,   80,   80,   80,   80,   80,
       80,   80,   80,  583,   80,  581,  581,  583,   80,  584,

      584,   80,  574,  585,  585,  586,  587,  586,  588,  588,
      587,  589,  589,  590,  657,  590,  591,  591,  592,  593,
      592,  593,  594,  594,  595,  595,  656,   80,   80,  102,
      102,  652,  102,  102,  102,  102,  102,  102,  102,  102,
      596,  102,  596,  651,  597,  102,  597,  598,  598,  599,
      600,  601,  599,  600,  601,  602,  604,  614,  602,  604,
      614,  615,  619,  599,  649,  615,  619,  600,  601,  604,
      604,  602,  616,  616,  102,  102,  103,  103,  648,  103,
      103,  103,  103,  103,  103,  103,  103,  611,  103,  613,
      611,  623,  103,  618,  611,  623,  618,  620,  620,  624,

      624,  617,  613,  613,  617,  647,  621,  622,  617,  621,
      622,  611,  626,  621,  627,  626,  628,  628,  627,  617,
      631,  103,  103,  109,  621,  617,  109,  631,  646,  625,
      621,  632,  625,  613,  635,  632,  625,  645,  109,  629,
      636,  635,  629,  644,  636,  638,  629,  625,  638,  655,
      655,  634,  109,  625,  109,  659,  659,  629,  109,  633,
      638,  109,  633,  629,  109,  110,  633,  639,  110,  637,
      639,  671,  637,  671,  633,  677,  637,  677,  640,  670,
      110,  640,  670,  633,  637,  641,  630,  643,  641,  639,
      643,  653,  641,  637,  110,  728,  110,  640,  663,  663,

      110,  643,  728,  110,  612,  653,  110,  123,  123,  641,
      123,  123,  123,  123,  123,  123,  123,  123,  650,  123,
      704,  650,  610,  123,  704,  650,  667,  667,  672,  673,
      609,  672,  673,  650,  675,  653,  673,  675,  676,  678,
      679,  676,  678,  679,  673,  692,  692,  680,  694,  694,
      680,  608,  123,  123,  125,  125,  607,  125,  125,  125,
      125,  125,  125,  125,  125,  680,  125,  606,  681,  682,
      125,  681,  682,  683,  689,  684,  683,  689,  684,  691,
      706,  689,  695,  695,  706,  681,  707,  682,  605,  684,
      707,  683,  684,  691,  697,  697,  691,  698,  698,  125,

      125,  133,  133,  573,  133,  133,  133,  133,  133,  133,
      133,  133,  693,  133,  572,  693,  709,  133,  696,  693,
      709,  696,  718,  691,  699,  696,  718,  699,  700,  700,
      693,  699,  701,  701,  702,  571,  696,  702,  703,  703,
      710,  702,  699,  710,  570,  720,  133,  133,  218,  720,
      705,  218,  702,  705,  569,  708,  722,  705,  708,  710,
      722,  711,  708,  218,  711,  705,  712,  724,  711,  712,
      708,  724,  725,  714,  568,  725,  714,  218,  729,  218,
      714,  729,  567,  218,  726,  712,  218,  726,  714,  218,
      730,  726,  731,  732,  566,  731,  732,  730,  733,  726,

      734,  733,  535,  734,  533,  733,  735,  734,  532,  735,
      731,  736,  531,  735,  736,  732,  737,  530,  736,  737,
      529,  528,  527,  737,  735,  738,  526,  525,  738,  736,
      739,  510,  738,  739,  737,  740,  508,  739,  740,  506,
      504,  502,  740,  738,  741,  500,  498,  741,  739,  742,
      496,  741,  742,  740,  743,  494,  742,  743,  492,  491,
      489,  743,  741,  744,  488,  745,  744,  742,  745,  743,
      744,  487,  745,  476,  746,  472,  747,  746,  744,  747,
      745,  746,  465,  747,  748,  749,  461,  748,  749,  746,
      751,  748,  749,  751,  457,  753,  755,  751,  753,  755,

      749,  453,  753,  755,  452,  751,  450,  449,  448,  447,
      753,  755,  758,  758,  759,  759,  760,  760,  761,  761,
      762,  762,  763,  763,  764,  764,  766,  766,  771,  771,
      778,  778,  779,  779,  446,  445,  443,  442,  441,  430,
      426,  424,  420,  416,  412,  409,  408,  406,  405,  404,
      403,  402,  401,  400,  399,  398,  397,  396,  363,  362,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  329,  325,  321,  317,  315,  314,  313,  311,
      309,  308,  307,  306,  305,  304,  303,  302,  301,  299,
      298,  297,  294,  293,  281,  277,  275,  271,  267,  263,

      259,  258,  257,  256,  255,  251,  250,  249,  248,  247,
      245,  244,  243,  242,  241,  239,  238,  237,  236,  232,
      231,  225,  210,  208,  204,  202,  195,  193,  192,  189,
      187,  186,  183,  181,  180,  177,  176,  173,  172,  169,
      168,  165,  164,  163,  162,  161,  160,  159,  158,  157,
      155,  153,  152,  151,  150,  148,  147,  145,  144,  143,
      142,  141,  139,  138,  135,  134,  132,  130,  126,  124,
      121,  120,  116,  101,   97,   96,   94,   90,   89,   84,
       68,   60,   56,   55,   51,   50,   48,   46,   45,   44,
       43,   41,   39,   38,   37,   36,   35,   25,   24,   23,

      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757,  757,  757,
      757,  757,  757,  757,  757,  757,  757,  757
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "nksp.l"
/*
 * Copyright (c) 2015-2017 Christian Schoenebeck
 *
 * http://www.linuxsampler.org
 *
 * This file is part of LinuxSampler and released under the same terms.
 * See README file for details.
 */
/* Token scanner used for generating syntax highlighting for NKSP instrument
   script language code (this is not used by the sampler itself, but rather
   provided for external script editor applications). */
#line 15 "nksp.l"

#include "NkspScanner.h"
// reentrant scanner data context
#define YY_EXTRA_TYPE NkspScanner*
// custom (f)lex input for reading from std::istream object
#define YY_INPUT(buf,result,max_size)   \
{                                       \
    char c = yyextra->is->get();        \
    if (yyextra->is->eof())             \
        result = YY_NULL;               \
    else {                              \
        buf[0] = c;                     \
        result = 1;                     \
    }                                   \
}
// handle position (line, column) for each recognized token
#define YY_USER_ACTION               \
    yyextra->line   = yylineno - 1;  \
    yyextra->column = yycolumn;      \
    yycolumn += yyleng;

using namespace LinuxSampler;

static int countNewLineChars(const char* txt) {
    int n = 0;
    for (int i = 0; txt[i]; ++i)
        if (txt[i] == '\n') ++n;
    return n;
}

// shut up warning that 'register' keyword is deprecated as of C++11
#if defined(__cplusplus) && __cplusplus >= 201103L
# define register
#endif

// Since this parser is solely used by script code editors, thus not used in a
// real-time context, always throw an exception instead of exiting on fatal
// lexer errors (so the debugger may pause with the appropriate back trace)
#include <stdexcept>
#define YY_FATAL_ERROR(msg) throw std::runtime_error(msg)

#line 1386 "lex.Nksp_.c"
/* generate a reentrant safe scanner */
/* avoid symbol collision with ones of other scanners */
/* yywrap() would be called at EOF, we don't need it */
/* enable functions yy_push_state(), yy_pop_state(), yy_top_state() */
/* inclusive scanner conditions */

/* exclusive scanner conditions */

#line 1395 "lex.Nksp_.c"

#define INITIAL 0
#define PREPROC_BODY_USE 1
#define PREPROC_SET_COND 2
#define PREPROC_RESET_COND 3
#define PREPROC_IF 4
#define PREPROC_IF_NOT 5
#define PREPROC_BODY_EAT 6
#define PREPROC_PRE_BODY_USE 7
#define PREPROC_PRE_BODY_EAT 8
#define PREPROC_EVENT_NAME 9
#define PREPROC_END_NAME 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (yyscan_t yyscanner);

#define YY_DECL int yylex (yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 76 "nksp.l"


#line 1677 "lex.Nksp_.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 758 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2001 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 78 "nksp.l"
{
    yyextra->token = StringLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "nksp.l"
{
    yyextra->token = NumberLiteralToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* there is currently no support for floating point numbers in NKSP yet */
/*{DIGIT}+"."{DIGIT}* {
    yyextra->token = NumberLiteralToken(yytext);
    return yyextra->token.baseType;
 }*/
/* Preprocessor statement:  SET_CONDITION(name) */
case 3:
YY_RULE_SETUP
#line 97 "nksp.l"
{
    //printf("SET_CONDITION\n");
    yy_push_state(PREPROC_SET_COND, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 103 "nksp.l"
{
    //printf("preproc set condition '%s'\n", yytext);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 108 "nksp.l"
{
    //printf("End of PREPROC_SET_COND\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Preprocessor statement:  RESET_CONDITION(name) */
case 6:
YY_RULE_SETUP
#line 118 "nksp.l"
{
    //printf("RESET_CONDITION\n");
    yy_push_state(PREPROC_RESET_COND, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 124 "nksp.l"
{
    //printf("preproc reset condition '%s'\n", yytext);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 129 "nksp.l"
{
    //printf("End of RESET_CONDITION\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Preprocessor conditional statements:

    USE_CODE_IF(name)
      ...
    END_USE_CODE

    and:

    USE_CODE_IF_NOT(name)
      ...
    END_USE_CODE    
 */
case 9:
YY_RULE_SETUP
#line 150 "nksp.l"
{
    //printf("USE_CODE_IF\n");
    yy_push_state(PREPROC_IF, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 156 "nksp.l"
{
    //printf("USE_CODE_IF_NOT\n");
    yy_push_state(PREPROC_IF_NOT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 162 "nksp.l"
{
    //printf("preproc use code if '%s'\n", yytext);
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    //yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 170 "nksp.l"
{
    //printf("preproc use code if not '%s'\n", yytext);
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    //yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 178 "nksp.l"
{
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_USE, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 184 "nksp.l"
{
    //printf("PREPROCESSOR EAT : \n");
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_EAT, yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 191 "nksp.l"
{
    //printf("-->END_USE_CODE\n");
    yy_pop_state(yyscanner);
    yyextra->token = PreprocessorToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 16:
/* rule 16 can match eol */
YY_RULE_SETUP
#line 197 "nksp.l"
/* eat up code block filtered out by preprocessor */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 198 "nksp.l"
/* eat up code block filtered out by preprocessor */
	YY_BREAK
/* Event Handler Names (only if they occur alone in a document!) */
case 18:
YY_RULE_SETUP
#line 203 "nksp.l"
{
    yyextra->token = EventHandlerNameToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Language keywords */
case 19:
YY_RULE_SETUP
#line 211 "nksp.l"
{
    yy_push_state(PREPROC_EVENT_NAME, yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 217 "nksp.l"
{
    yy_pop_state(yyscanner);
    yyextra->token = EventHandlerNameToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 223 "nksp.l"
{
    yy_push_state(PREPROC_END_NAME, yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 229 "nksp.l"
{
    yy_pop_state(yyscanner);
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 235 "nksp.l"
{
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 240 "nksp.l"
{
    yyextra->token = KeywordToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* Variables */
case 25:
YY_RULE_SETUP
#line 248 "nksp.l"
{
    yyextra->token = IntegerVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 253 "nksp.l"
{
    yyextra->token = StringVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 258 "nksp.l"
{
    yyextra->token = ArrayVariableToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 263 "nksp.l"
{
    yyextra->token = IdentifierToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
/* other */
case 29:
/* rule 29 can match eol */
YY_RULE_SETUP
#line 271 "nksp.l"
{
    yyextra->token = NewLineToken();
    ++yylineno;
    yycolumn = 0;
    return yyextra->token.baseType;
}
	YY_BREAK
case 30:
/* rule 30 can match eol */
YY_RULE_SETUP
#line 278 "nksp.l"
{
    yyextra->token = CommentToken(yytext);
    yylineno += countNewLineChars(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 284 "nksp.l"
{
    yyextra->token = OtherToken("    ");
    return yyextra->token.baseType;
}
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 289 "nksp.l"
/* eat up \r */
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPROC_BODY_USE):
case YY_STATE_EOF(PREPROC_SET_COND):
case YY_STATE_EOF(PREPROC_RESET_COND):
case YY_STATE_EOF(PREPROC_IF):
case YY_STATE_EOF(PREPROC_IF_NOT):
case YY_STATE_EOF(PREPROC_BODY_EAT):
case YY_STATE_EOF(PREPROC_PRE_BODY_USE):
case YY_STATE_EOF(PREPROC_PRE_BODY_EAT):
case YY_STATE_EOF(PREPROC_EVENT_NAME):
case YY_STATE_EOF(PREPROC_END_NAME):
#line 291 "nksp.l"
{
    yyextra->token = EofToken();
    yyterminate();
}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 296 "nksp.l"
{
    yyextra->token = OtherToken(yytext);
    return yyextra->token.baseType;
}
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 302 "nksp.l"
ECHO;
	YY_BREAK
#line 2075 "lex.Nksp_.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 758 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 758 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 757);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 302 "nksp.l"


namespace LinuxSampler {

int NkspScanner::processScanner() {
    return Nksp_lex(scanner);
}

void NkspScanner::createScanner(std::istream* is) {
    if (scanner) destroyScanner();
    this->is = is;
    Nksp_lex_init(&scanner);
    Nksp_set_extra(this, scanner);
}

void NkspScanner::destroyScanner() {
    if (!scanner) return;
    Nksp_lex_destroy(scanner);
    scanner = NULL;
}

} // namespace LinuxSampler

