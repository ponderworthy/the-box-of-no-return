
#line 3 "lex.InstrScript_.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define InstrScript__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer InstrScript__create_buffer
#endif

#ifdef yy_delete_buffer
#define InstrScript__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer InstrScript__delete_buffer
#endif

#ifdef yy_scan_buffer
#define InstrScript__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer InstrScript__scan_buffer
#endif

#ifdef yy_scan_string
#define InstrScript__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string InstrScript__scan_string
#endif

#ifdef yy_scan_bytes
#define InstrScript__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes InstrScript__scan_bytes
#endif

#ifdef yy_init_buffer
#define InstrScript__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer InstrScript__init_buffer
#endif

#ifdef yy_flush_buffer
#define InstrScript__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer InstrScript__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define InstrScript__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state InstrScript__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define InstrScript__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer InstrScript__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define InstrScript_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state InstrScript_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define InstrScript_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state InstrScript_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define InstrScript_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack InstrScript_ensure_buffer_stack
#endif

#ifdef yylex
#define InstrScript_lex_ALREADY_DEFINED
#else
#define yylex InstrScript_lex
#endif

#ifdef yyrestart
#define InstrScript_restart_ALREADY_DEFINED
#else
#define yyrestart InstrScript_restart
#endif

#ifdef yylex_init
#define InstrScript_lex_init_ALREADY_DEFINED
#else
#define yylex_init InstrScript_lex_init
#endif

#ifdef yylex_init_extra
#define InstrScript_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra InstrScript_lex_init_extra
#endif

#ifdef yylex_destroy
#define InstrScript_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy InstrScript_lex_destroy
#endif

#ifdef yyget_debug
#define InstrScript_get_debug_ALREADY_DEFINED
#else
#define yyget_debug InstrScript_get_debug
#endif

#ifdef yyset_debug
#define InstrScript_set_debug_ALREADY_DEFINED
#else
#define yyset_debug InstrScript_set_debug
#endif

#ifdef yyget_extra
#define InstrScript_get_extra_ALREADY_DEFINED
#else
#define yyget_extra InstrScript_get_extra
#endif

#ifdef yyset_extra
#define InstrScript_set_extra_ALREADY_DEFINED
#else
#define yyset_extra InstrScript_set_extra
#endif

#ifdef yyget_in
#define InstrScript_get_in_ALREADY_DEFINED
#else
#define yyget_in InstrScript_get_in
#endif

#ifdef yyset_in
#define InstrScript_set_in_ALREADY_DEFINED
#else
#define yyset_in InstrScript_set_in
#endif

#ifdef yyget_out
#define InstrScript_get_out_ALREADY_DEFINED
#else
#define yyget_out InstrScript_get_out
#endif

#ifdef yyset_out
#define InstrScript_set_out_ALREADY_DEFINED
#else
#define yyset_out InstrScript_set_out
#endif

#ifdef yyget_leng
#define InstrScript_get_leng_ALREADY_DEFINED
#else
#define yyget_leng InstrScript_get_leng
#endif

#ifdef yyget_text
#define InstrScript_get_text_ALREADY_DEFINED
#else
#define yyget_text InstrScript_get_text
#endif

#ifdef yyget_lineno
#define InstrScript_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno InstrScript_get_lineno
#endif

#ifdef yyset_lineno
#define InstrScript_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno InstrScript_set_lineno
#endif

#ifdef yyget_column
#define InstrScript_get_column_ALREADY_DEFINED
#else
#define yyget_column InstrScript_get_column
#endif

#ifdef yyset_column
#define InstrScript_set_column_ALREADY_DEFINED
#else
#define yyset_column InstrScript_set_column
#endif

#ifdef yywrap
#define InstrScript_wrap_ALREADY_DEFINED
#else
#define yywrap InstrScript_wrap
#endif

#ifdef yyget_lval
#define InstrScript_get_lval_ALREADY_DEFINED
#else
#define yyget_lval InstrScript_get_lval
#endif

#ifdef yyset_lval
#define InstrScript_set_lval_ALREADY_DEFINED
#else
#define yyset_lval InstrScript_set_lval
#endif

#ifdef yyget_lloc
#define InstrScript_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc InstrScript_get_lloc
#endif

#ifdef yyset_lloc
#define InstrScript_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc InstrScript_set_lloc
#endif

#ifdef yyalloc
#define InstrScript_alloc_ALREADY_DEFINED
#else
#define yyalloc InstrScript_alloc
#endif

#ifdef yyrealloc
#define InstrScript_realloc_ALREADY_DEFINED
#else
#define yyrealloc InstrScript_realloc
#endif

#ifdef yyfree
#define InstrScript_free_ALREADY_DEFINED
#else
#define yyfree InstrScript_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define InstrScript_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 55
#define YY_END_OF_BUFFER 56
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[530] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   18,   18,    0,    0,    0,    0,   56,   54,
       53,   51,   54,   47,   54,   54,    2,   54,   47,   47,
       49,   49,   49,   49,   49,   49,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   49,   49,   54,   49,
       55,   55,    5,    4,    4,    4,    4,   55,    8,    7,
        7,    7,    7,   13,   13,   13,   13,   14,   14,   14,
       14,   19,   18,   18,   19,   19,   19,   19,   55,   15,
       55,   55,   55,   55,   16,   53,   51,    0,    1,   48,
        0,    0,    0,    2,   49,   50,   39,   40,   49,   49,

       49,   49,   49,   49,   49,   49,   49,   49,   26,   49,
       49,   49,   20,   28,   49,   49,   49,   49,   38,   49,
        0,   52,   49,    0,    5,    4,    4,    4,    4,    0,
        8,    7,    7,    7,    7,   13,   13,   13,   13,   14,
       14,   14,   14,   19,   18,   18,   19,   19,   19,   19,
        0,   15,    0,    0,    0,    0,   16,    0,    0,    0,
       49,   49,   49,   31,   49,   49,   49,   49,   49,   21,
       49,   49,   43,   33,   49,   49,   49,   49,   49,   49,
        4,    4,    4,    7,    7,    7,   13,   13,   13,   14,
       14,   14,   19,   19,   19,   19,    0,    0,    0,    0,

        0,   27,   49,   49,   49,   45,   36,   49,   49,   49,
       34,   49,   23,   22,   49,   49,   49,   49,   49,   49,
        4,    4,    4,    7,    7,    7,   13,   13,   13,   14,
       14,   14,   19,   19,   19,   19,    0,    0,    0,   30,
       32,   49,   49,   49,   41,   49,   49,   49,   49,   49,
       49,   49,   25,   49,    4,    4,    4,    7,    7,    7,
       13,   13,   13,   14,   14,   14,   19,   19,   19,   19,
        0,    0,    0,   49,   49,   49,   49,   49,   49,   49,
       49,   37,   49,   49,    4,    4,    4,    7,    7,    7,
       13,   13,   13,   14,   14,   14,   19,   19,   19,   19,

        0,    0,    0,   49,   49,   49,   49,   24,   49,   49,
       29,   49,   49,    4,    4,    4,    7,    7,    7,   13,
       13,   13,   14,   14,   14,   19,   19,   19,   19,    0,
        0,    0,   49,   49,   49,   49,   44,   49,   49,   49,
        4,    4,    4,    7,    7,    7,   13,   13,   13,   14,
       14,   14,   19,   19,   19,   19,    0,    0,    0,   49,
       49,   49,   49,   49,   49,   49,    4,    4,    4,    7,
        7,    7,   13,   13,   13,   14,   14,   14,   19,   19,
       19,   19,    0,    0,    0,   49,   49,   49,   35,   42,
       49,   49,    4,    4,    4,    7,    7,    7,   13,   13,

       13,   14,   14,   14,   19,   19,   19,   19,    0,    0,
        0,   49,   49,   49,   49,   49,    4,    4,    4,    7,
        7,    7,   13,   13,   13,   14,   14,   14,   19,   19,
       19,   19,    0,    0,    0,   49,   49,    0,    9,   49,
       46,   17,    4,    4,    4,    7,    7,    7,   13,   13,
       13,   14,   14,   14,   17,   19,   19,   19,    9,   19,
        0,    0,    0,   49,   49,   49,    4,    4,    4,    7,
        7,    7,   13,   13,   13,   14,   14,   14,   19,   19,
       19,   19,    0,    0,    0,   49,    0,    3,   49,    4,
        4,    7,    7,   13,   13,   14,   14,   19,   19,    3,

       10,   19,    0,    0,   49,   49,    4,    4,    7,    7,
       13,   13,   14,   14,   19,   19,    0,    0,    0,    6,
        0,   11,   19,    6,   19,   11,   19,   12,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    6,    7,    8,    6,    1,    9,
       10,    6,    6,    6,    6,   11,    6,   12,   12,   12,
       12,   12,   12,   12,   12,   12,   12,   13,    1,   14,
       15,   16,    1,   17,   18,   18,   19,   20,   21,   22,
       18,   18,   23,   18,   18,   18,   18,   24,   25,   18,
       18,   26,   27,   28,   29,   18,   18,   18,   18,   18,
        6,    1,    6,    1,   30,    1,   31,   18,   32,   33,

       34,   35,   18,   36,   37,   18,   18,   38,   39,   40,
       41,   42,   18,   43,   44,   45,   46,   18,   47,   18,
       48,   49,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    3,    1,    1,    1,    1,    1,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1
    } ;

static const flex_int16_t yy_base[543] =
    {   0,
        0,    0,  874,  873,   51,    0,  102,    0,  153,    0,
      204,    0,  254,  258,  262,  266,  272,  276,  893,  896,
      261,  889,  886,  896,    0,  266,  878,  874,  873,  872,
        0,  865,  864,  857,  843,  228,  848,  233,  835,  269,
      839,  838,  227,  837,  843,  260,  835,  839,  823,  849,
      896,  308,  896,    0,  851,  850,  843,  309,  896,    0,
      848,  847,  840,    0,  845,  844,  837,    0,  842,  841,
      834,    0,  310,  313,  836,  838,  837,  830,  318,  896,
      835,  834,  827,  319,  896,  320,  850,  847,  896,    0,
      811,  809,  806,  836,    0,  896,  896,  896,  820,  818,

      824,  811,  252,  803,  810,  797,  807,  799,    0,  801,
      804,  791,    0,    0,  797,  796,  795,  792,    0,  794,
      779,  896,  809,  321,  896,    0,  801,  799,  805,  323,
      896,    0,  798,  796,  802,    0,  795,  793,  799,    0,
      792,  790,  796,    0,  332,  335,  796,  788,  786,  792,
      330,  896,  785,  783,  789,  339,  896,  776,  763,  796,
      785,  775,  774,    0,  765,  768,  282,  763,  766,    0,
      767,  753,    0,  763,  748,  761,  760,  761,  754,  761,
      769,  759,  758,  766,  756,  755,  763,  753,  752,  760,
      750,  749,  748,  756,  746,  745,  753,  743,  742,  760,

      759,  896,  741,  749,  748,    0,    0,  721,  722,  733,
        0,  718,    0,    0,  720,  730,  728,  723,  724,  728,
      728,  736,  735,  725,  733,  732,  722,  730,  729,  719,
      727,  726,  715,  715,  723,  722,  712,  720,  719,  896,
      896,  707,  711,  710,    0,  693,  690,  695,  695,  686,
      684,  685,    0,  700,  696,  700,  699,  693,  697,  696,
      690,  694,  693,  687,  691,  690,  687,  683,  687,  686,
      680,  684,  683,  688,  682,  685,  666,  669,  661,  660,
      666,    0,  658,  677,  678,  672,  675,  675,  669,  672,
      672,  666,  669,  669,  663,  666,  664,  665,  659,  662,

      662,  656,  659,  653,  657,  655,  637,    0,  634,  633,
        0,  632,  641,  645,  649,  647,  642,  646,  644,  639,
      643,  641,  636,  640,  638,  628,  632,  636,  634,  629,
      633,  631,  627,  627,  619,  614,    0,  610,  609,  626,
      620,  620,  612,  617,  617,  609,  614,  614,  606,  611,
      611,  603,  613,  607,  607,  599,  604,  604,  596,  605,
      596,  600,  579,  589,  571,  594,  598,  589,  593,  595,
      586,  590,  592,  583,  587,  588,  577,  579,  561,  565,
      556,  560,  562,  553,  557,  556,  555,  555,    0,    0,
      542,  555,  551,  550,  550,  548,  547,  547,  545,  544,

      544,  542,  541,  541,  542,  538,  537,  537,  535,  534,
      534,  527,  524,  341,  507,  514,  506,  508,  342,  504,
      506,  343,  502,  504,  344,  500,  502,  345,  505,  497,
      499,  346,  495,  497,  354,  498,  496,  355,  896,  495,
        0,    0,  495,  493,  492,  492,  490,  489,  489,  487,
      486,  486,  484,  483,    0,  483,  481,  356,  384,  480,
      475,  465,  460,  458,  357,  457,  456,  358,  455,  454,
      359,  453,  452,  360,  451,  450,  368,  449,  448,  378,
      435,  447,  446,  394,  445,  445,  400,  896,  440,  443,
      438,  437,  431,  414,  405,  408,  402,  359,  402,    0,

        0,  354,  357,  351,  403,  404,  405,  406,  408,  414,
      416,  417,  418,  419,  420,  422,  445,  451,  453,  896,
      454,  896,  455,    0,  456,  486,  537,    0,  896,  588,
      591,  594,  375,  339,  597,  327,  297,  274,  263,  600,
      603,  606
    } ;

static const flex_int16_t yy_def[543] =
    {   0,
      529,    1,    1,    1,  529,    5,  529,    7,  529,    9,
      529,   11,  530,  530,  531,  531,  531,  531,  529,  529,
      529,  529,  532,  529,  533,  529,  534,  529,  529,  529,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  535,  534,
      529,  529,  529,  536,  536,  536,  536,  529,  529,  537,
      537,  537,  537,  538,  538,  538,  538,  539,  539,  539,
      539,  540,  540,  529,  540,  540,  540,  540,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  532,  529,  533,
      529,  529,  529,  534,  534,  529,  529,  529,  534,  534,

      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      535,  529,  534,  529,  529,  536,  536,  536,  536,  529,
      529,  537,  537,  537,  537,  538,  538,  538,  538,  539,
      539,  539,  539,  540,  540,  529,  540,  540,  540,  540,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      536,  536,  536,  537,  537,  537,  538,  538,  538,  539,
      539,  539,  540,  540,  540,  540,  529,  529,  529,  529,

      529,  529,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      536,  536,  536,  537,  537,  537,  538,  538,  538,  539,
      539,  539,  540,  540,  540,  540,  529,  529,  529,  529,
      529,  534,  534,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  536,  536,  536,  537,  537,  537,
      538,  538,  538,  539,  539,  539,  540,  540,  540,  540,
      529,  529,  529,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  534,  536,  536,  536,  537,  537,  537,
      538,  538,  538,  539,  539,  539,  540,  540,  540,  540,

      529,  529,  529,  534,  534,  534,  534,  534,  534,  534,
      534,  534,  534,  536,  536,  536,  537,  537,  537,  538,
      538,  538,  539,  539,  539,  540,  540,  540,  540,  529,
      529,  529,  534,  534,  534,  534,  534,  534,  534,  534,
      536,  536,  536,  537,  537,  537,  538,  538,  538,  539,
      539,  539,  540,  540,  540,  540,  529,  529,  529,  534,
      534,  534,  534,  534,  534,  534,  536,  536,  536,  537,
      537,  537,  538,  538,  538,  539,  539,  539,  540,  540,
      540,  540,  529,  529,  529,  534,  534,  534,  534,  534,
      534,  534,  536,  536,  536,  537,  537,  537,  538,  538,

      538,  539,  539,  539,  540,  540,  540,  540,  529,  529,
      529,  534,  534,  534,  534,  534,  536,  536,  536,  537,
      537,  537,  538,  538,  538,  539,  539,  539,  540,  540,
      540,  540,  529,  529,  529,  534,  534,  529,  529,  534,
      534,  534,  536,  536,  536,  537,  537,  537,  538,  538,
      538,  539,  539,  539,  540,  540,  540,  540,  541,  540,
      529,  529,  529,  534,  534,  534,  536,  536,  536,  537,
      537,  537,  538,  538,  538,  539,  539,  539,  540,  540,
      541,  540,  529,  529,  529,  534,  529,  529,  534,  536,
      536,  537,  537,  538,  538,  539,  539,  540,  540,  540,

      540,  540,  529,  529,  534,  534,  536,  536,  537,  537,
      538,  538,  539,  539,  540,  540,  529,  529,  529,  529,
      529,  529,  540,  540,  540,  542,  542,  540,    0,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529
    } ;

static const flex_int16_t yy_nxt[948] =
    {   0,
       20,   21,   22,   21,   23,   24,   25,   25,   24,   24,
       26,   27,   28,   29,   24,   30,   25,   31,   31,   31,
       31,   31,   31,   31,   31,   32,   33,   31,   34,   31,
       35,   36,   37,   38,   39,   31,   40,   31,   41,   42,
       43,   44,   45,   46,   47,   31,   48,   31,   31,   49,
       20,   51,   52,   51,   51,   51,   51,   51,   51,   51,
       53,   51,   54,   51,   51,   51,   51,   51,   54,   54,
       54,   54,   54,   54,   54,   54,   55,   56,   54,   57,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       51,   51,   51,   58,   51,   51,   51,   51,   51,   51,
       51,   59,   51,   60,   51,   51,   51,   51,   51,   60,
       60,   60,   60,   60,   60,   60,   60,   61,   62,   60,
       63,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   60,   60,   60,   60,   60,   60,   60,   60,   60,
       60,   51,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   64,   51,   51,   51,   51,   51,
       64,   64,   64,   64,   64,   64,   64,   64,   65,   66,
       64,   67,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,   64,   64,   64,   64,   64,

       64,   64,   51,   51,   51,   51,   51,   51,   51,   51,
       51,   51,   51,   51,   51,   68,   51,   51,   51,   51,
       51,   68,   68,   68,   68,   68,   68,   68,   68,   69,
       70,   68,   71,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   51,   51,   73,   74,   73,  103,   73,
       74,   73,   86,   79,   86,  140,  113,   79,  104,  114,
      106,   80,  107,   84,   75,   80,  136,   84,   75,   76,
       77,   85,   78,   76,   77,   85,   78,   81,   82,  165,
       83,   81,   82,  117,   83,  166,   91,   81,   82,  132,

       83,   81,   82,  109,   83,   92,   93,  118,  110,  124,
      130,  145,  146,  145,  146,  146,  146,  125,  131,  151,
      156,   86,  124,   86,  130,  208,  209,  152,  157,  126,
      125,  151,  131,  145,  146,  145,  146,  146,  146,  152,
      156,   95,  438,  438,  438,  438,  438,  458,  157,  439,
      439,  439,  439,  439,  459,  438,  438,  458,  487,  487,
      487,  487,  439,  439,  459,  488,  488,  488,  488,  487,
      440,  445,  448,  451,  454,  460,  488,   90,  518,  499,
      517,  516,  515,  463,  144,  144,  500,  144,  144,  144,
      144,  144,  144,  144,  144,  487,  144,  144,  144,  144,

      144,  487,  488,  499,  519,  521,  519,  521,  488,  519,
      500,  520,  522,  520,  522,  521,  520,  519,  521,  519,
      521,  523,  522,  525,  520,  522,  520,  522,  524,  514,
      526,  513,  512,  144,  144,  144,  144,  511,  144,  144,
      144,  144,  144,  144,  501,  144,  519,  144,  144,  144,
      144,  144,  521,  520,  519,  521,  523,  525,  510,  522,
      509,  520,  522,  524,  526,  508,  507,  506,  505,  504,
      503,  502,  498,  497,  496,  495,  494,  493,  492,  491,
      490,  489,  486,  485,  144,  144,  144,  144,  484,  144,
      144,  144,  144,  144,  144,  144,  144,  483,  144,  144,

      144,  144,  144,  482,  480,  479,  478,  477,  476,  475,
      474,  473,  472,  471,  470,  469,  468,  467,  466,  465,
      464,  462,  461,  457,  456,  455,  453,  452,  450,  449,
      447,  446,  444,  443,  442,  144,  144,  144,  144,  441,
      144,  144,  144,  144,  144,  144,  528,  144,  437,  144,
      144,  144,  144,  144,  436,  435,  434,  433,  432,  431,
      430,  429,  428,  427,  426,  425,  424,  423,  422,  421,
      420,  419,  418,  417,  416,  415,  414,  413,  412,  411,
      410,  409,  408,  407,  406,  405,  144,  144,   72,   72,
       72,   51,   51,   51,   88,   88,   88,  121,  121,  121,

      144,  404,  144,  481,  403,  481,  527,  402,  527,  401,
      400,  399,  398,  397,  396,  395,  394,  393,  392,  391,
      390,  389,  388,  387,  386,  385,  384,  383,  382,  381,
      380,  379,  378,  377,  376,  375,  374,  373,  372,  371,
      370,  369,  368,  367,  366,  365,  364,  363,  362,  361,
      360,  359,  358,  357,  356,  355,  354,  353,  352,  351,
      350,  349,  348,  347,  346,  345,  344,  343,  342,  341,
      340,  339,  338,  337,  336,  335,  334,  333,  332,  331,
      330,  329,  328,  327,  326,  325,  324,  323,  322,  321,
      320,  319,  318,  317,  316,  315,  314,  313,  312,  311,

      310,  309,  308,  307,  306,  305,  304,  303,  302,  301,
      300,  299,  298,  297,  296,  295,  294,  293,  292,  291,
      290,  289,  288,  287,  286,  285,  284,  283,  282,  281,
      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  253,  252,  251,
      250,  249,  248,  247,  246,  245,  244,  243,  242,  241,
      240,  239,  238,  237,  236,  235,  234,  233,  232,  231,
      230,  229,  228,  227,  226,  225,  224,  223,  222,  221,
      220,  219,  218,  217,  216,  215,  214,  213,  212,  211,

      210,  207,  206,  205,  204,  203,  202,  201,  200,  199,
      198,  197,  196,  195,  194,  193,  192,  191,  190,  189,
      188,  187,  186,  185,  184,  183,  182,  181,  180,  122,
      179,  178,  177,  176,  175,  174,  173,  172,  171,  170,
      169,  168,  167,  164,  163,  162,  161,   94,  160,  159,
      158,   89,   87,  155,  154,  153,  150,  149,  148,  147,
      143,  142,  141,  139,  138,  137,  135,  134,  133,  129,
      128,  127,  123,  122,  120,  119,  116,  115,  112,  111,
      108,  105,  102,  101,  100,   99,   98,   97,   96,   94,
       89,   87,  529,   50,   50,   19,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529
    } ;

static const flex_int16_t yy_chk[948] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   13,   13,   13,   36,   14,
       14,   14,   21,   15,   21,  539,   43,   16,   36,   43,
       38,   15,   38,   17,   13,   16,  538,   18,   14,   13,
       13,   17,   13,   14,   14,   18,   14,   15,   15,  103,
       15,   16,   16,   46,   16,  103,   26,   17,   17,  537,

       17,   18,   18,   40,   18,   26,   26,   46,   40,   52,
       58,   73,   73,   73,   74,   74,   74,   52,   58,   79,
       84,   86,  124,   86,  130,  167,  167,   79,   84,  536,
      124,  151,  130,  145,  145,  145,  146,  146,  146,  151,
      156,  534,  414,  419,  422,  425,  428,  432,  156,  414,
      419,  422,  425,  428,  432,  435,  438,  458,  465,  468,
      471,  474,  435,  438,  458,  465,  468,  471,  474,  477,
      414,  419,  422,  425,  428,  432,  477,  533,  504,  480,
      503,  502,  498,  435,  459,  459,  480,  459,  459,  459,
      459,  459,  459,  459,  459,  484,  459,  459,  459,  459,

      459,  487,  484,  499,  505,  506,  507,  508,  487,  509,
      499,  505,  506,  507,  508,  510,  509,  511,  512,  513,
      514,  515,  510,  516,  511,  512,  513,  514,  515,  497,
      516,  496,  495,  459,  459,  481,  481,  494,  481,  481,
      481,  481,  481,  481,  481,  481,  517,  481,  481,  481,
      481,  481,  518,  517,  519,  521,  523,  525,  493,  518,
      492,  519,  521,  523,  525,  491,  490,  489,  486,  485,
      483,  482,  479,  478,  476,  475,  473,  472,  470,  469,
      467,  466,  464,  463,  481,  481,  526,  526,  462,  526,
      526,  526,  526,  526,  526,  526,  526,  461,  526,  526,

      526,  526,  526,  460,  457,  456,  454,  453,  452,  451,
      450,  449,  448,  447,  446,  445,  444,  443,  440,  437,
      436,  434,  433,  431,  430,  429,  427,  426,  424,  423,
      421,  420,  418,  417,  416,  526,  526,  527,  527,  415,
      527,  527,  527,  527,  527,  527,  527,  527,  413,  527,
      527,  527,  527,  527,  412,  411,  410,  409,  408,  407,
      406,  405,  404,  403,  402,  401,  400,  399,  398,  397,
      396,  395,  394,  393,  392,  391,  388,  387,  386,  385,
      384,  383,  382,  381,  380,  379,  527,  527,  530,  530,
      530,  531,  531,  531,  532,  532,  532,  535,  535,  535,

      540,  378,  540,  541,  377,  541,  542,  376,  542,  375,
      374,  373,  372,  371,  370,  369,  368,  367,  366,  365,
      364,  363,  362,  361,  360,  359,  358,  357,  356,  355,
      354,  353,  352,  351,  350,  349,  348,  347,  346,  345,
      344,  343,  342,  341,  340,  339,  338,  336,  335,  334,
      333,  332,  331,  330,  329,  328,  327,  326,  325,  324,
      323,  322,  321,  320,  319,  318,  317,  316,  315,  314,
      313,  312,  310,  309,  307,  306,  305,  304,  303,  302,
      301,  300,  299,  298,  297,  296,  295,  294,  293,  292,
      291,  290,  289,  288,  287,  286,  285,  284,  283,  281,

      280,  279,  278,  277,  276,  275,  274,  273,  272,  271,
      270,  269,  268,  267,  266,  265,  264,  263,  262,  261,
      260,  259,  258,  257,  256,  255,  254,  252,  251,  250,
      249,  248,  247,  246,  244,  243,  242,  239,  238,  237,
      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
      226,  225,  224,  223,  222,  221,  220,  219,  218,  217,
      216,  215,  212,  210,  209,  208,  205,  204,  203,  201,
      200,  199,  198,  197,  196,  195,  194,  193,  192,  191,
      190,  189,  188,  187,  186,  185,  184,  183,  182,  181,
      180,  179,  178,  177,  176,  175,  174,  172,  171,  169,

      168,  166,  165,  163,  162,  161,  160,  159,  158,  155,
      154,  153,  150,  149,  148,  147,  143,  142,  141,  139,
      138,  137,  135,  134,  133,  129,  128,  127,  123,  121,
      120,  118,  117,  116,  115,  112,  111,  110,  108,  107,
      106,  105,  104,  102,  101,  100,   99,   94,   93,   92,
       91,   88,   87,   83,   82,   81,   78,   77,   76,   75,
       71,   70,   69,   67,   66,   65,   63,   62,   61,   57,
       56,   55,   50,   49,   48,   47,   45,   44,   42,   41,
       39,   37,   35,   34,   33,   32,   30,   29,   28,   27,
       23,   22,   19,    4,    3,  529,  529,  529,  529,  529,

      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529,  529,  529,  529,
      529,  529,  529,  529,  529,  529,  529
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "scanner.l"
/*
 * Copyright (c) 2014-2017 Christian Schoenebeck and Andreas Persson
 *
 * http://www.linuxsampler.org
 *
 * This file is part of LinuxSampler and released under the same terms.
 * See README file for details.
 */
/* Token scanner for NKSP real-time instrument script language. */
#line 13 "scanner.l"

#include "parser_shared.h"
#include <math.h>
// reentrant scanner data context
#define YY_EXTRA_TYPE ParserContext*
// set line number each time a token is recognized
#define YY_USER_ACTION                  \
{                                       \
    yylloc->first_line = yylineno;      \
    yylloc->last_line  = yylineno;      \
    yylloc->first_column = yycolumn;    \
    yycolumn += yyleng;                 \
    yylloc->last_column = yycolumn - 1; \
    /*printf("lex: line '%s'\n", yytext);*/  \
}
// custom (f)lex input for reading from std::istream object
#define YY_INPUT(buf,result,max_size)   \
{                                       \
    char c = yyextra->is->get();        \
    if (yyextra->is->eof())             \
        result = YY_NULL;               \
    else {                              \
        buf[0] = c;                     \
        result = 1;                     \
    }                                   \
}

static void scanner_error(YYLTYPE* locp, LinuxSampler::ParserContext* context, const char* err) {
    context->addErr(locp->first_line, locp->last_line, locp->first_column, locp->last_column, err);
}

static void scanner_warning(YYLTYPE* locp, LinuxSampler::ParserContext* context, const char* txt) {
    context->addWrn(locp->first_line, locp->last_line, locp->first_column, locp->last_column, txt);
}

#define SCANNER_ERR(txt)  scanner_error(yylloc, yyextra, txt)
#define SCANNER_WRN(txt)  scanner_warning(yylloc, yyextra, txt)

// shut up warning that 'register' keyword is deprecated as of C++11
#if defined(__cplusplus) && __cplusplus >= 201103L
# define register
#endif

using namespace LinuxSampler;

static int countNewLineChars(const char* txt) {
    int n = 0;
    for (int i = 0; txt[i]; ++i)
        if (txt[i] == '\n') ++n;
    return n;
}

static int countCharsPastLastNewLine(const char* txt) {
    const int n = (int)strlen(txt);
    for (int i = n - 1; i >= 0; --i)
        if (txt[i] == '\n')
            return n - i - 1;
    return n;
}

#define processLocation() { \
    const int nl = countNewLineChars(yytext); \
    yylineno += nl; \
    if (nl) yycolumn = countCharsPastLastNewLine(yytext); \
}

// if compiled for debugging, throw an exception instead of exiting on fatal
// lexer errors (so the debugger may pause with the appropriate back trace)
#if DEBUG
# include <stdexcept>
# define YY_FATAL_ERROR(msg) throw std::runtime_error(msg)
#endif

#line 1124 "lex.InstrScript_.c"
/* use Flex's built-in support for line numbers
   (disabled, because it seems to be unreliable, so we are using our own
   tracking code in the respective scanner rules below) */
/*%option yylineno*/
/* generate a reentrant safe scanner */
/* avoid symbol collision with other (i.e. future) scanner symbols */
/* bison-bridge adds an argument yylval to yylex, and bison-locations adds an
   argument code yylloc for location tracking. */
/* yywrap() would be called at EOF, we don't need it */
/* enable functions yy_push_state(), yy_pop_state(), yy_top_state() */
/* inclusive scanner conditions */

/* exclusive scanner conditions */

#line 1139 "lex.InstrScript_.c"

#define INITIAL 0
#define PREPROC_BODY_USE 1
#define PREPROC_SET_COND 2
#define PREPROC_RESET_COND 3
#define PREPROC_IF 4
#define PREPROC_IF_NOT 5
#define PREPROC_BODY_EAT 6
#define PREPROC_PRE_BODY_USE 7
#define PREPROC_PRE_BODY_EAT 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  , yyscan_t yyscanner);
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state ( int _new_state , yyscan_t yyscanner);
    
    static void yy_pop_state ( yyscan_t yyscanner );
    
    static int yy_top_state ( yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 113 "scanner.l"


#line 1440 "lex.InstrScript_.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 530 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 896 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 115 "scanner.l"
{
    yylval->sValue = strdup(yytext + 1);
    yylval->sValue[strlen(yylval->sValue) - 1] = '\0';
    return STRING;
}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 121 "scanner.l"
{
    yylval->iValue = atoi(yytext);
    return INTEGER;
}
	YY_BREAK
/* there is currently no support for floating point numbers in NKSP yet */
/*{DIGIT}+"."{DIGIT}* {
    printf("A float: %s (%g)\n", yytext, atof(yytext));
 }*/
/* Preprocessor statement:  SET_CONDITION(name) */
case 3:
YY_RULE_SETUP
#line 134 "scanner.l"
{
    //printf("SET_CONDITION\n");
    yy_push_state(PREPROC_SET_COND, yyscanner);
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 138 "scanner.l"
{
    //printf("preproc set condition '%s'\n", yytext);
    bool success = yyextra->setPreprocessorCondition(yytext);
    if (!success) {
        SCANNER_WRN((String("Preprocessor: Condition '") +
                    yytext + "' is already set.").c_str());
    }
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 146 "scanner.l"
{
    //printf("End of PREPROC_SET_COND\n");
    yy_pop_state(yyscanner);
}
	YY_BREAK
/* Preprocessor statement:  RESET_CONDITION(name) */
case 6:
YY_RULE_SETUP
#line 154 "scanner.l"
{
    //printf("RESET_CONDITION\n");
    yy_push_state(PREPROC_RESET_COND, yyscanner);
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 158 "scanner.l"
{
    //printf("preproc reset condition '%s'\n", yytext);
    bool success = yyextra->resetPreprocessorCondition(yytext);
    if (!success) {
        SCANNER_ERR((String("Preprocessor: could not reset condition '") +
                    yytext + "' (either not set or a built-in condition).").c_str());
    }
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 166 "scanner.l"
{
    //printf("End of RESET_CONDITION\n");
    yy_pop_state(yyscanner);
}
	YY_BREAK
/* Preprocessor conditional statements:

    USE_CODE_IF(name)
      ...
    END_USE_CODE

    and:

    USE_CODE_IF_NOT(name)
      ...
    END_USE_CODE    
 */
case 9:
YY_RULE_SETUP
#line 185 "scanner.l"
{
    //printf("{%s}\n", yytext);
    yy_push_state(PREPROC_IF, yyscanner);
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 189 "scanner.l"
{
    //printf("[EAT{%s}\n", yytext);
    yy_push_state(PREPROC_BODY_EAT, yyscanner);
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 193 "scanner.l"
{
    //printf("USE_CODE_IF_NOT\n");
    yy_push_state(PREPROC_IF_NOT, yyscanner);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 197 "scanner.l"
{
    //printf("[EAT{%s}\n", yytext);
    yy_push_state(PREPROC_BODY_EAT, yyscanner);
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 201 "scanner.l"
{
    //printf("preproc use code if '%s'\n", yytext);
    yy_pop_state(yyscanner);
    if (yyextra->isPreprocessorConditionSet(yytext))
        yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    else
        yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 209 "scanner.l"
{
    //printf("preproc use code if not '%s'\n", yytext);
    yy_pop_state(yyscanner);
    if (!yyextra->isPreprocessorConditionSet(yytext))
        yy_push_state(PREPROC_PRE_BODY_USE, yyscanner);
    else
        yy_push_state(PREPROC_PRE_BODY_EAT, yyscanner);
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 217 "scanner.l"
{
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_USE, yyscanner);
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 221 "scanner.l"
{
    //printf("PREPROCESSOR EAT : {%s}\n", yytext);
    yy_pop_state(yyscanner);
    yy_push_state(PREPROC_BODY_EAT, yyscanner);
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 226 "scanner.l"
{
    //printf("-->END_USE_CODE\n");
    yy_pop_state(yyscanner);
}
	YY_BREAK
case 18:
/* rule 18 can match eol */
YY_RULE_SETUP
#line 230 "scanner.l"
{ /* eat up code block filtered out by preprocessor */
    //printf("PREPROCESSOR EAT2 : {%s}\n", yytext);
    processLocation();
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 234 "scanner.l"
{ /* eat up code block filtered out by preprocessor */
    //printf("PREPROCESSOR EAT3 : {%s}\n", yytext);
    yyextra->addPreprocessorComment(yylloc->first_line, yylloc->last_line,
                                    yylloc->first_column+1, yylloc->last_column+1);
}
	YY_BREAK
/* Language keywords */
case 20:
YY_RULE_SETUP
#line 243 "scanner.l"
return ON;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 244 "scanner.l"
return END;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 245 "scanner.l"
return NOTE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 246 "scanner.l"
return INIT;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 247 "scanner.l"
return DECLARE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 248 "scanner.l"
return WHILE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 249 "scanner.l"
return IF;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 250 "scanner.l"
return BITWISE_OR;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 251 "scanner.l"
return OR;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 252 "scanner.l"
return RELEASE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 253 "scanner.l"
return BITWISE_AND;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 254 "scanner.l"
return AND;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 255 "scanner.l"
return BITWISE_NOT;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 256 "scanner.l"
return NOT;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 257 "scanner.l"
return ELSE;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 258 "scanner.l"
return CONTROLLER;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 259 "scanner.l"
return CASE;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 260 "scanner.l"
return SELECT;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 261 "scanner.l"
return TO;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 262 "scanner.l"
return LE;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 263 "scanner.l"
return GE;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 264 "scanner.l"
return CONST_; // note: "CONST" is already defined for C/C++ compilers on Windows by default
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 265 "scanner.l"
return POLYPHONIC;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 266 "scanner.l"
return MOD;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 267 "scanner.l"
return FUNCTION;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 268 "scanner.l"
return CALL;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 269 "scanner.l"
return SYNCHRONIZED;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 271 "scanner.l"
{
    return *yytext;
}
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 275 "scanner.l"
{
    yylval->sValue = strdup(yytext);
    return VARIABLE;
}
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 280 "scanner.l"
{
    yylval->sValue = strdup(yytext);
    return IDENTIFIER;
}
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 285 "scanner.l"
return ASSIGNMENT;
	YY_BREAK
case 51:
/* rule 51 can match eol */
YY_RULE_SETUP
#line 287 "scanner.l"
{
     yylineno += countNewLineChars(yytext);
     yycolumn = 0;
    //printf("lex: new line %d\n", yylineno, yytext);
    //return LF;
}
	YY_BREAK
case 52:
/* rule 52 can match eol */
YY_RULE_SETUP
#line 294 "scanner.l"
{ /* eat up comments */
    processLocation();
}
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 298 "scanner.l"
/* eat up whitespace */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 300 "scanner.l"
{
    printf( "Unrecognized character: '%s' (line %d, column %d)\n", yytext, yylineno, yycolumn);
    return UNKNOWN_CHAR;
}
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 305 "scanner.l"
ECHO;
	YY_BREAK
#line 1889 "lex.InstrScript_.c"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(PREPROC_BODY_USE):
case YY_STATE_EOF(PREPROC_SET_COND):
case YY_STATE_EOF(PREPROC_RESET_COND):
case YY_STATE_EOF(PREPROC_IF):
case YY_STATE_EOF(PREPROC_IF_NOT):
case YY_STATE_EOF(PREPROC_BODY_EAT):
case YY_STATE_EOF(PREPROC_PRE_BODY_USE):
case YY_STATE_EOF(PREPROC_PRE_BODY_EAT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 530 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 530 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 529);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp , yyscan_t yyscanner)
{
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = yyg->yy_n_chars + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  _new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = (yy_size_t) yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) yyalloc( new_size , yyscanner );

		else
			yyg->yy_start_stack = (int *) yyrealloc(
					(void *) yyg->yy_start_stack, new_size , yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(_new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 305 "scanner.l"


namespace LinuxSampler {

void ParserContext::createScanner(std::istream* is) {
   if (scanner) destroyScanner();
   this->is = is;
   yylex_init(&scanner);
   yyset_extra(this, scanner);
}

void ParserContext::destroyScanner() {
   if (!scanner) return;
   yylex_destroy(scanner);
   scanner = NULL;
}

} // namespace LinuxSampler

