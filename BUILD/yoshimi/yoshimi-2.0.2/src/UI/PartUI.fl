# data file for the Fltk User Interface Designer (fluid)
version 1.0304
header_name {.h}
code_name {.cc}
comment {PartUI.h} {not_in_source in_header
}

comment {PartUI.cc} {in_source not_in_header
}

comment {Original ZynAddSubFX author Nasca Octavian Paul
Copyright (C) 2002-2005 Nasca Octavian Paul
Copyright 2009-2011, Alan Calvert
Copyright 2014-2021, Will Godfrey

This file is part of yoshimi, which is free software: you can redistribute
it and/or modify it under the terms of the GNU Library General Public
License as published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.

yoshimi is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.   See the GNU General Public License (version 2 or
later) for more details.

You should have received a copy of the GNU General Public License along with
yoshimi; if not, write to the Free Software Foundation, Inc., 51 Franklin
Street, Fifth Floor, Boston, MA  02110-1301, USA.

This file is derivative of ZynAddSubFX original code.

} {selected in_source in_header
}

decl {\#include <FL/fl_ask.H>
    \#include <iostream>
    \#include "Misc/Config.h"
    \#include "Misc/SynthEngine.h"} {private global
}

decl {\#include "UI/MiscGui.h"
    \#include "EffUI.h"
    \#include "BankUI.h"
    \#include "ADnoteUI.h"
    \#include "SUBnoteUI.h"
    \#include "PADnoteUI.h"
    \#include "UI/WidgetMWSlider.h"
    \#include "UI/WidgetSpinner.h"
    \#include "UI/WidgetCheckButton.h"
    \#include "Params/Controller.h"} {public global
}

decl {\#include "Misc/Part.h"
    \#define MAX_INFO_TEXT_SIZE 256} {public local
}

decl {\#include "MasterUI.h"} {private global
}

decl {\#include "Misc/FormatFuncs.h"
    using func::asString;} {private local
}

decl {\#include "Misc/TextMsgBuffer.h"

    namespace { // Implementation details...
        TextMsgBuffer& textMsgBuffer = TextMsgBuffer::instance();
    }} {private local
}

decl {\#include "Interface/TextLists.h"} {public local
}

class PartSysEffSend {: {public Fl_Group}
} {
  Function {make_window()} {} {
    Fl_Window syseffsend {
      xywh {916 486 30 30} type Double box NO_BOX labelfont 1 hide
      class Fl_Group
    } {
      Fl_Dial sysend {
        callback {//
        send_data(TOPLEVEL::action::forceUpdate, neff, o->value(), TOPLEVEL::type::Integer);}
        xywh {0 0 25 25} box ROUND_UP_BOX labelsize 11 align 1 maximum 127 step 1
        code0 {o->value(synth->Psysefxvol[neff][npart]);}
        code1 {o->copy_label(asString(neff + 1).c_str());}
        code2 {o->setValueType(VC_FXSysSend);}
        class WidgetPDial
      }
    }
  }
  Function {PartSysEffSend(int x, int y, int w, int h) :
    Fl_Group(x, y, w, h, NULL)} {} {
    code {//
    neff = 0;
    npart = 0;} {}
  }
  Function {send_data(int action, int control, float value, int type)} {} {
    code {//
    type |= TOPLEVEL::type::Write;
        collect_data(synth, value, action, type, control + PART::control::partToSystemEffect1, npart);} {}
  }
  Function {init(int npart_, int neff_, SynthEngine *_synth)} {} {
    code {//
    synth = _synth;
    npart = npart_;
    neff = neff_;
    make_window();
    syseffsend->show();
    end();} {}
  }
  Function {sysRsize(float dScale)} {} {
    code {//
    sysend->labelsize(11 * dScale);} {}
  }
  Function {~PartSysEffSend()} {} {
    code {//
    syseffsend->hide();} {}
  }
  decl {int neff;} {private local
  }
  decl {int npart;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PartUI_ {} {
  Function {showparameters(int /* kititem */,int /* engine */)} {return_type virtual
  } {
    code {;} {}
  }
}

class PartKitItem {: {public Fl_Group}
} {
  Function {make_window()} {} {
    Fl_Window partkititem {
      xywh {433 86 670 20} type Double box NO_BOX hide
      class Fl_Group
    } {
      Fl_Group partkititemgroup {
        xywh {55 4 605 20}
        code0 {if (part->kit[n].Penabled == 0) o->deactivate();}
      } {
        Fl_Check_Button mutedcheck {
          callback {//
          send_data(0, PART::control::kitItemMute, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {60 4 15 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11
          code0 {o->value(part->kit[n].Pmuted);}
          class Fl_Check_Button2
        }
        Fl_Button labelbutton {
          label {Bass Drum}
          callback {//
          string tmp = input_text(synth, "Kit item name:", part->kit[n].Pname);
          if (tmp != "" && tmp != part->kit[n].Pname)
          {
              send_data(TOPLEVEL::action::lowPrio, PART::control::instrumentName, 0, TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup, UNUSED, textMsgBuffer.push(tmp));
              o->copy_label(tmp.c_str());
          }}
          xywh {90 4 130 15} box THIN_DOWN_BOX down_box FLAT_BOX color 7 labelfont 1 labelsize 10 align 20
          code0 {o->copy_label(part->kit[n].Pname.c_str());}
        }
        Fl_Counter minkcounter {
          callback {//
          int tmp = o->value();
          int other = maxkcounter->value();
          if (tmp >= other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(0, PART::control::minNote, tmp, TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {225 4 55 15} type Simple minimum 0 maximum 128 step 1 textfont 1 textsize 12
          code0 {o->value(part->kit[n].Pminkey);}
        }
        Fl_Button setmin {
          label m
          callback {//
          int last = part->lastnote;
          if (last <= 0)
              return;
          int tmp;
          int other = maxkcounter->value();
          if (last >= other)
              tmp = other;
          else
              tmp = last;
          minkcounter->value(tmp);

          send_data(0, PART::control::minToLastKey, tmp, TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          tooltip {set the minimum key to the last pressed key} xywh {285 7 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button setmax {
          label M
          callback {//
          int last = part->lastnote;
          if (last <= 0)
              return;
          int tmp;
          int other = minkcounter->value();
          if (last <= other)
              tmp = other;
          else
              tmp = last;
          maxkcounter->value(tmp);

          send_data(0, PART::control::maxToLastKey, tmp, TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          tooltip {set the maximum key to the last pressed key} xywh {315 7 15 12} box THIN_UP_BOX labelsize 10
        }
        Fl_Button setfull {
          label R
          callback {//
          minkcounter->value(0);
          maxkcounter->value(127);

          send_data(0, PART::control::resetMinMaxKey, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          tooltip {reset the minimum key to 0 and maximum key to 127} xywh {300 7 15 12} box THIN_UP_BOX labelfont 1 labelsize 10
        }
        Fl_Counter maxkcounter {
          callback {//
          int tmp = o->value();
          int other = minkcounter->value();
          if (tmp <= other)
          {
              tmp = other;
              o->value(tmp);
          }
          send_data(0, PART::control::maxNote, tmp, TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {335 4 55 15} type Simple minimum 0 maximum 128 step 1 textfont 1 textsize 12
          code0 {o->value(part->kit[n].Pmaxkey);}
        }
        Fl_Button adeditbutton {
          label edit
          callback {//
          partui->showparameters(n,0);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {420 4 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Padenabled==0) o->deactivate();}
        }
        Fl_Check_Button adcheck {
          callback {//

          send_data(TOPLEVEL::action::forceUpdate, PART::control::enableAdd, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {400 4 15 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11
          code0 {o->value(part->kit[n].Padenabled);}
          class Fl_Check_Button2
        }
        Fl_Button subeditbutton {
          label edit
          callback {//
          partui->showparameters(n,1);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {490 4 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Psubenabled==0) o->deactivate();}
        }
        Fl_Check_Button subcheck {
          callback {//

          send_data(TOPLEVEL::action::forceUpdate, PART::control::enableSub, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {470 4 15 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11
          code0 {o->value(part->kit[n].Psubenabled);}
          class Fl_Check_Button2
        }
        Fl_Button padeditbutton {
          label edit
          callback {//
          partui->showparameters(n,2);
          if ((Fl::event_button() == 3))
              synth->getGuiMaster()->partui->instrumentkitlist->hide();}
          xywh {560 4 40 15} box THIN_UP_BOX labelsize 11
          code0 {if (part->kit[n].Ppadenabled==0) o->deactivate();}
        }
        Fl_Check_Button padcheck {
          callback {//

          send_data(TOPLEVEL::action::forceUpdate, PART::control::enablePad, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {540 4 15 15} box THIN_UP_BOX down_box DOWN_BOX color 237 labelfont 1 labelsize 11
          code0 {o->value(part->kit[n].Ppadenabled);}
          class Fl_Check_Button2
        }
        Fl_Choice sendtoeffect {
          callback {//
          send_data(0, PART::control::kitEffectNum, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
          xywh {615 4 45 15} down_box BORDER_BOX labelsize 10 align 5 textfont 1 textsize 10
          code0 {o->add("OFF"); char nrstr[10]; for (int i = 0; i < NUM_PART_EFX; i++) {sprintf(nrstr,"FX%d",i+1);o->add(nrstr);};}
          code1 {o->value(part->kit[n].Psendtoparteffect+1);if (part->kit[n].Psendtoparteffect==127) o->value(0);}
        } {}
      }
      Fl_Check_Button enabledcheck {
        label 01
        callback {//
        int answer = 1;
        if (o->value() == 0)
            answer = (choice(synth, "", "Yes", "No", "Delete the item?") > 1);
        if (answer != 0)
        {
            if (o->value() == 0)
                clearLine();
            else
                partkititemgroup->activate();
            o->redraw();
            partui->showparameters(n, -1); // use to delete the ui, if it is not to item 0
        }
        else
            o->value(1);
        send_data(0, PART::control::enableKitLine, o->value(), TOPLEVEL::type::Integer, n, UNUSED, TOPLEVEL::insert::kitGroup);}
        xywh {30 4 20 15} down_box DOWN_BOX labeltype EMBOSSED_LABEL labelfont 1 labelsize 12 align 4
        code0 {snprintf(label,10,"%d",(n&15)+1);o->label(label);}
        code1 {o->value(part->kit[n].Penabled);}
        code2 {if (n==0) o->hide();}
        code3 {if (o->value() == 0) labelbutton->color(FL_WHITE);}
        class Fl_Check_Button2
      }
    }
  }
  Function {send_data(int action, int control, float value, int type, int kititem = UNUSED, int engine = UNUSED, int insert = UNUSED, int parameter = UNUSED, int miscmsg = UNUSED)} {} {
    code {//
        type |= TOPLEVEL::type::Write;
        collect_data(synth, value, action, type, control, npart, kititem, engine, insert, parameter, UNUSED, miscmsg);} {}
  }
  Function {PartKitItem(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
    n=0;part=NULL;} {}
  }
  Function {clearLine()} {} {
    code {//
    partkititemgroup->deactivate();
    mutedcheck->value(0);
    labelbutton->copy_label("");
    minkcounter->value(0);
    maxkcounter->value(127);
    adcheck->value(0);
    adeditbutton->deactivate();
    subcheck->value(0);
    subeditbutton->deactivate();
    padcheck->value(0);
    padeditbutton->deactivate();
    sendtoeffect->value(1);} {}
  }
  Function {init(Part *part_, int n_, int npart_, PartUI_ *partui_)} {} {
    code {//
    synth = part_->getSynthEngine();
    part = part_;
    n = n_;
    npart = npart_;
    partui = partui_;
    make_window();
    end();} {}
  }
  Function {itemRtext(float dScale)} {} {
    code {//
    int size = int(10 * dScale);
    int size11 = int(11 * dScale);
    int size12 = int(12 * dScale);

    enabledcheck->labelsize(size12);
    mutedcheck->labelsize(size11);
    labelbutton->labelsize(size);
    minkcounter->textsize(size12);
    setmin->labelsize(size);
    setmax->labelsize(size);
    setfull->labelsize(size);
    maxkcounter->textsize(size12);
    adeditbutton->labelsize(size11);
    adcheck->labelsize(size11);
    subeditbutton->labelsize(size11);
    subcheck->labelsize(size11);
    padeditbutton->labelsize(size11);
    padcheck->labelsize(size11);
    sendtoeffect->labelsize(size);
         sendtoeffect->textsize(size);} {}
  }
  Function {~PartKitItem()} {} {
    code {//
    partkititem->hide();} {}
  }
  decl {Part *part;} {public local
  }
  decl {int n;} {private local
  }
  decl {int npart;} {private local
  }
  decl {char label[10];} {private local
  }
  decl {PartUI_ *partui;} {private local
  }
  decl {SynthEngine *synth;} {private local
  }
}

class PartUI {: {public Fl_Group, PartUI_}
} {
  Function {make_window()} {} {
    Fl_Window partgroup {
      xywh {794 168 380 170} type Double hide
      class Fl_Group
    } {
      Fl_Box {} {
        xywh {80 60 17 17} box THIN_UP_BOX color 237
      }
      Fl_Group partgroupui {
        xywh {0 0 378 168}
        code0 {if (part->Penabled != 1) o->deactivate();}
      } {
        Fl_Button partedit {
          label Edit
          callback {//
        bool divert = true;
        if (lastkey >= 49 && lastkey <= 56)
        { // not working yet :(
            /*int voiceNum = lastkey - 49;
            if (Fl::event_button() == 3)
            {
                send_data(0, PART::control::enable, 1, TOPLEVEL::type::Integer, UNUSED, 0);
                adsynenabledcheck->value(1);
                send_data(TOPLEVEL::action::forceUpdate, PART::control::volumeEnable, voiceNum, TOPLEVEL::type::Integer);
                //synth->getGuiMaster()->partui->adnoteui->advoice->nvoice = voiceNum;
                //synth->getGuiMaster()->partui->adnoteui->advoice->voiceonbutton->value(1);
            }
            if (adsynenabledcheck->value() == 1)
            {
                ;
            }*/
            lastkey = -1;
        }
        switch(lastkey)
        {
            case 97: // a
                if (Fl::event_button() == 3)
                {
                    send_data(0, PART::control::enableAdd, 1, TOPLEVEL::type::Integer, UNUSED, 0);
                    adsynenabledcheck->value(1);
                }

                lastkey = -1;
                if (adsynenabledcheck->value() == 1)
                {
                    showparameters(0,0);
                    checkEngines();
                    seteditname();
                }
                else
                    divert = false;
                break;
            case 115: // s
                if (Fl::event_button() == 3)
                {
                    send_data(0, PART::control::enableSub, 1, TOPLEVEL::type::Integer, UNUSED, 1);
                    subsynenabledcheck->value(1);
                }
                lastkey = -1;
                if (subsynenabledcheck->value() == 1)
                {
                showparameters(0,1);
                checkEngines();
                seteditname();
                }
                else
                    divert = false;
                break;
            case 100: // d
            case 112: // p
                if (Fl::event_button() == 3)
                {
                    send_data(0, PART::control::enablePad, 1, TOPLEVEL::type::Integer, UNUSED, 2);
                    padsynenabledcheck->value(1);
                }
                lastkey = -1;
                if (padsynenabledcheck->value() == 1)
                {
                    showparameters(0,2);
                    checkEngines();
                    seteditname();
                    lastkey = -1;
                }
                else
                    divert = false;
                break;
            case 107: // k
                lastkey = -1;
                Showkit();
                break;
            case 101: // e
                lastkey = -1;
                Showefx();
                break;
            default:
                divert = false;
                break;
        }
        if (!divert)
        {
            lastkey = -1;
            Showedit();
        }}
          xywh {330 6 42 22} box PLASTIC_UP_BOX color 22 labelfont 1 labelsize 12
        }
        Fl_Box instrumentaddbox {
          xywh {136 9 63 16} box FLAT_BOX
        }
        Fl_Box instrumentsubbox {
          xywh {199 9 63 16} box FLAT_BOX
        }
        Fl_Box instrumentpadbox {
          xywh {262 9 63 16} box FLAT_BOX
        }
        Fl_Button instrumentlabel {
          tooltip {Left mouse button: choose/save/.. from/to bank, Right button: instrument name} xywh {134 7 192 20} box THIN_DOWN_FRAME labelsize 12 align 16
          code0 {setinstrumentlabel();}
        }
        Fl_Button buttontop {
          callback {//
          int event = Fl::event_button();
          if (event == FL_LEFT_MOUSE)
          {
              synth->getGuiMaster()->activePart = npart;
              bankui->Show();
          }
          else if (event == FL_RIGHT_MOUSE)
          {
              string name = input_text(synth, "Instrument name:", part->Pname);
              if (name == DEFAULT_NAME)
                  alert(synth, "Can't use name of default sound");
              else if (name != part->Pname)
              {
                  unsigned char id = textMsgBuffer.push(name);
                  send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, PART::control::instrumentName, 0, TOPLEVEL::type::Integer, UNUSED, UNUSED, UNUSED, UNUSED, id);
              }
          }}
          tooltip {Left mouse button: choose/save/.. from/to bank, Right button: instrument name} xywh {134 7 192 20} box THIN_DOWN_FRAME labeltype NO_LABEL labelsize 12 align 16
        }
        Fl_Dial velocitysense {
          label {Vel. Sens}
          callback {//
          send_data(0, PART::control::velocitySense, o->value(), TOPLEVEL::type::Integer);}
          xywh {192 34 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(part->Pvelsns);}
          code2 {o->setValueType(VC_AmpVelocitySense);}
          class WidgetPDial
        }
        Fl_Dial velocityoffset {
          label {Vel. Offs}
          callback {//
          send_data(0, PART::control::velocityOffset, o->value(), TOPLEVEL::type::Integer);}
          xywh {242 34 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->value(part->Pveloffs);}
          class WidgetPDial
        }
        Fl_Dial partpan {
          label Pan
          callback {//;
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
              synth->getGuiMaster()->setPanelPartPanWidget(npart % NUM_MIDI_CHANNELS, o->value());

          send_data(0, PART::control::panning, o->value(), 0);}
          xywh {289 34 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_PanningStd);}
          code1 {o->value(part->Ppanning);}
          class WidgetPDial
        }
        Fl_Dial partvol {
          label Volume
          callback {//;
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
          synth->getGuiMaster()->setPanelPartVolWidget(npart % NUM_MIDI_CHANNELS, o->value());

          send_data(0, PART::control::volume, o->value(), 0);}
          xywh {335 34 32 32} box ROUND_UP_BOX labelsize 10 maximum 127 step 1
          code0 {o->setValueType(VC_PartVolume);}
          code1 {o->value(part->Pvolume);}
          class WidgetPDial
        }
        Fl_Check_Button enportamento {
          label Portamento
          callback {//
          send_data(0, PART::control::portamento, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Enable/Disable the portamento} xywh {82 61 17 15} down_box DOWN_BOX color 237 labelsize 11 align 8
          code0 {o->value(part->ctl->portamento.portamento);}
          class Fl_Check_Button2
        }
        Fl_Spinner midich {
          label Midi
          callback {//
          int tmp = ((int)o->value() -1);
          if (tmp > 15)
          {
              tmp &= 15;
              o->value(tmp +1);
          }
          o->textcolor(FL_BLACK);
          if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
              synth->getGuiMaster()->setPanelPartMidiWidget(npart % NUM_MIDI_CHANNELS, tmp);

          send_data(0, PART::control::midiChannel, tmp, TOPLEVEL::type::Integer);}
          tooltip {MIDI channel for this part} xywh {31 36 40 19} labelsize 11 maximum 16 textsize 11
          code0 {o->value(part->Prcvchn + 1);}
          code1 {if (part->Prcvchn < NUM_MIDI_CHANNELS) o->textcolor(FL_BLACK); else o->textcolor(FL_WHITE);}
          class WidgetSpinner
        }
        Fl_Box modepatch {
          label Mode
          xywh {150 37 32 17} box FLAT_BOX color 29 labelsize 11
        }
        Fl_Choice keymode {
          callback {//
          if (o->value() > 1 && drumMode->value() != 0)
              modepatch->color(91);
          else
              modepatch->color(29);
          modepatch->redraw();
          send_data(0, PART::control::keyMode, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Poly, Mono or Legato mode} xywh {82 36 68 19} down_box BORDER_BOX selection_color 49 labelsize 11 align 8 textfont 1 textsize 11
          code0 {o->add("Poly");o->add("Mono");o->add("Legato");}
          code1 {int tmp = synth->ReadPartKeyMode(npart);}
          code2 {if (tmp > 1) o->value(2); else o->value(tmp);}
        } {}
        Fl_Button partcontrollers {
          label Controllers
          callback {//
          if (Fl::event_button() != 3)
              Showctl();
          else
              Showctlmidi();}
          tooltip {Left mouse button: Controller range settings, Right mouse button: MIDI CCs} xywh {8 81 139 25} box PLASTIC_UP_BOX color 228 labelsize 12
        }
        Fl_Spinner partkeyshift {
          label {Key Shift}
          callback {//
          send_data(TOPLEVEL::action::lowPrio, PART::control::keyShift, o->value(), TOPLEVEL::type::Integer);}
          xywh {194 111 38 20} labelsize 10 minimum -36 maximum 36 textsize 11
          code0 {o->range(MIN_KEY_SHIFT, MAX_KEY_SHIFT);o->step(1.0);}
          code1 {o->value(part->Pkeyshift - 64);}
          class WidgetSpinner
        }
        Fl_Spinner partkeylimit {
          label {Key Limit}
          callback {//
          send_data(0, PART::control::maxNotes, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Maximum keys for this part} xywh {194 143 38 20} labelsize 10 value 20 textsize 11
          code0 {o->range(1, POLIPHONY); // enough for one part!}
          code1 {o->value(part->Pkeylimit);}
          class WidgetSpinner
        }
        Fl_Spinner minkcounter {
          label {Min Note}
          callback {//
          int tmp = o->value();
          int other = maxkcounter->value();
          if (tmp > other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(0, PART::control::minNote, tmp, TOPLEVEL::type::Integer);}
          tooltip {Minimum note the part receives} xywh {57 111 42 20} labelsize 10 minimum 0 maximum 127 textsize 11
          code0 {o->range(0.0, 127.0);o->step(1.0);}
          code1 {o->value(part->Pminkey);}
          class WidgetSpinner
        }
        Fl_Spinner maxkcounter {
          label {Max Note}
          callback {//
          int tmp = o->value();
          int other = minkcounter->value();
          if (tmp < other)
          {
              tmp = other;
              o->value(tmp);
          }

          send_data(0, PART::control::maxNote, tmp, TOPLEVEL::type::Integer);}
          tooltip {Maximum note the part receives} xywh {57 143 42 20} labelsize 10 minimum 0 maximum 127 textsize 11
          code0 {o->range(0.0, 127.0);o->step(1.0);}
          code1 {o->value(part->Pmaxkey);}
          class WidgetSpinner
        }
        Fl_Button setmin {
          label Set
          callback {//
          if (part->lastnote >= 0)
              minkcounter->value(part->lastnote);

          send_data(0, PART::control::minToLastKey, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Set minimum note to the last note played} xywh {104 111 30 16} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Button setnorm {
          label R
          callback {//
          minkcounter->value(0);
          maxkcounter->value(127);

          send_data(0, PART::control::resetMinMaxKey, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Reset the minimum key to 0 and maximum key to 127} xywh {104 129 30 16} box PLASTIC_UP_BOX labelfont 1 labelsize 11
        }
        Fl_Button setmax {
          label Set
          callback {//
          if (part->lastnote >= 0) maxkcounter->value(part->lastnote);

          send_data(0, PART::control::maxToLastKey, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Set maximum note to the last note played} xywh {104 147 30 16} box PLASTIC_UP_BOX labelsize 10
        }
        Fl_Box {} {
          xywh {240 106 134 62} box ENGRAVED_FRAME labelfont 1 labelsize 11 align 18
        }
        Fl_Pack toSysEfx {
          xywh {246 122 122 39} type HORIZONTAL labeltype NO_LABEL labelsize 10 align 0
          code0 {o->spacing(7);}
          code1 {//
              for (int i = 0; i < NUM_SYS_EFX; ++i)
            {
              psyef[i] = new PartSysEffSend(0, 0, 25, 25);
              psyef[i]->init(npart, i, synth);
            }}
          code2 {if (part->Penabled != 1)
        {
            toSysEfx->deactivate();
        }
        else
        {
           toSysEfx->activate();
        }}
        } {}
      }
      Fl_Text_Display syseffname {
        label {Send to System Effect}
        xywh {255 134 103 15} box NO_BOX labelsize 11 align 2
      }
      Fl_Check_Button partGroupEnable {
        label Enabled
        callback {//;
        if (o->value() != 1)
        {
            partgroupui->deactivate();
            toSysEfx->deactivate();
        }
        else
        {
            partgroupui->activate();
            toSysEfx->activate();
        }

        if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
        {
            synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->partenabled->value(o->value());
            if (o->value() != 1)
                synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->panellistitemgroup->deactivate();
            else
            synth->getGuiMaster()->panellistitem[npart % NUM_MIDI_CHANNELS]->panellistitemgroup->activate();
        }

        send_data(0, PART::control::enable, o->value(), TOPLEVEL::type::Integer);}
        xywh {58 59 20 20} down_box DOWN_BOX labelsize 11 align 4
        code0 {o->value(part->Penabled == 1);}
        class Fl_Check_Button2
      }
    }
    Fl_Window instrumentkitlist {
      label {Instrument Kit}
      xywh {341 129 670 370} type Double hide resizable
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("kit List").c_str());}
      code2 {kitDW = o->w(); kitDH = o->h();}
      code3 {o->size_range(kitDW, kitDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Group kitlist {
        xywh {4 20 662 324} box THIN_UP_FRAME
      } {
        Fl_Pack kitpack {
          xywh {0 21 670 322}
          code0 {for (int i=0;i<NUM_KIT_ITEMS;i++){partkititem[i]=new PartKitItem(0,0,670,20,"");partkititem[i]->init(part, i, npart, this);}}
        } {}
      }
      Fl_Box kitnum {
        label {No.}
        xywh {10 0 25 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitmute {
        label Mute
        xywh {55 0 25 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitID {
        label Name
        xywh {137 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitminkey {
        label {Min key}
        xywh {235 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitmaxkey {
        label {Max key}
        xywh {345 0 40 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitadd {
        label ADsynth
        xywh {410 0 50 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitsub {
        label SUBsynth
        xywh {470 0 60 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitpad {
        label PADsynth
        xywh {540 0 60 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Box kitfxnum {
        label {FX.r.}
        xywh {620 0 30 15} labelfont 1 labelsize 11 align 18
      }
      Fl_Choice kitMode {
        label Mode
        callback {//
        int tmp = o->value();
        partKitOn = tmp > 0;
        if (partKitOn)
            kitlist->activate();
        else
            kitlist->deactivate();

        send_data(0, PART::control::kitMode, tmp, TOPLEVEL::type::Integer);}
        tooltip {Single = only 1st item in defined note range sounds} xywh {41 348 88 19} down_box BORDER_BOX labelsize 11 textfont 1 textsize 11
        code0 {o->add("Off");o->add("Multi");o->add("Single");o->add("Crossfade");}
        code1 {if (part->Pkitfade) {o->value(3);} else {o->value(part->Pkitmode);}}
        code2 {partKitOn = o->value() > 0;}
        code3 {if (!partKitOn) kitlist->deactivate();}
      } {}
      Fl_Check_Button drumMode {
        label {Drum mode}
        callback {//
        send_data(TOPLEVEL::action::forceUpdate, PART::control::drumMode, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Disables microtonal tuning} xywh {285 350 15 15} down_box DOWN_BOX labelsize 11
        code0 {o->value(part->Pdrummode);}
        class Fl_Check_Button2
      }
      Fl_Button kitClose {
        label Close
        callback {//
        instrumentkitlist->hide();
        if ((Fl::event_button() == 3))
        synth->getGuiMaster()->partui->instrumenteditwindow->show();}
        tooltip {Right click: also reopen previous} xywh {569 348 63 20} box THIN_UP_BOX
      }
    }
    Fl_Window instrumenteditwindow {
      label {Instrument Edit}
      callback {editClose->do_callback();}
      xywh {330 188 395 385} type Double hide resizable
      code0 {seteditname();}
      code1 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Instrument Edit").c_str());}
      code2 {editDW = 395; editDH = 385;}
      code3 {o->size_range(editDW, editDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Group {} {
        xywh {0 220 395 103} box ENGRAVED_FRAME
      } {
        Fl_Group ADD {
          label ADDsynth
          xywh {5 246 100 72} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button adsynenabledcheck {
            label Enabled
            callback {//

            send_data(TOPLEVEL::action::forceUpdate, PART::control::enableAdd, o->value(), TOPLEVEL::type::Integer);}
            tooltip {enable/disable ADsynth} xywh {15 252 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Padenabled);}
            class Fl_Check_Button2
          }
          Fl_Box addbox {
            xywh {10 226 89 18} box FLAT_BOX
            code1 {if (adsynenabledcheck->value() != 0 && engine != 0) o->color(ADD_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button adeditbutton {
            label Edit
            callback {//
            showparameters(0,0);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
            {
                instrumenteditwindow->hide();}}
            tooltip {Right click: also close this} xywh {15 276 80 34} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 align 128
            code0 {if (part->kit[0].Padenabled==0) o->deactivate();}
          }
        }
        Fl_Group SUB {
          label SUBsynth
          xywh {105 246 100 72} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button subsynenabledcheck {
            label Enabled
            callback {//

            send_data(TOPLEVEL::action::forceUpdate, PART::control::enableSub, o->value(), TOPLEVEL::type::Integer);}
            tooltip {enable/disable SUBsynth} xywh {115 252 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Psubenabled);}
            class Fl_Check_Button2
          }
          Fl_Box subbox {
            xywh {110 226 89 18} box FLAT_BOX
            code1 {if (subsynenabledcheck->value() != 0 && engine != 0) o->color(SUB_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button subeditbutton {
            label Edit
            callback {//
            showparameters(0,1);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
            {
                instrumenteditwindow->hide();}}
            tooltip {Right click: also close this} xywh {115 276 80 35} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 align 128
            code0 {if (part->kit[0].Psubenabled==0) o->deactivate();}
          }
        }
        Fl_Group PAD {
          label PADsynth
          xywh {205 246 100 72} box ENGRAVED_FRAME labelfont 1
        } {
          Fl_Check_Button padsynenabledcheck {
            label Enabled
            callback {//

            send_data(TOPLEVEL::action::forceUpdate, PART::control::enablePad, o->value(), TOPLEVEL::type::Integer);}
            tooltip {enable/disable PADsynth} xywh {215 252 80 20} box PLASTIC_UP_BOX down_box DOWN_BOX color 228 labelfont 1 labelsize 11
            code1 {o->value(part->kit[0].Ppadenabled);}
            class Fl_Check_Button2
          }
          Fl_Box padbox {
            xywh {210 226 89 18} box FLAT_BOX
            code1 {if (padsynenabledcheck->value() != 0 && engine != 0) o->color(PAD_COLOUR); else o->color(BASE_COLOUR);}
          }
          Fl_Button padeditbutton {
            label Edit
            callback {//
            showparameters(0,2);
            checkEngines();
            seteditname();
            if ((Fl::event_button() == 3))
            {
                instrumenteditwindow->hide();}}
            tooltip {Right click: also close this} xywh {215 276 80 35} box PLASTIC_UP_BOX color 222 selection_color 220 labelfont 1 align 128
            code0 {if (part->kit[0].Ppadenabled==0) o->deactivate();}
          }
        }
        Fl_Button kitedit {
          label {Kit Edit}
          callback {//
          Showkit();
          if ((Fl::event_button() == 3))
          {
              instrumenteditwindow->hide();}}
          tooltip {Right click: also close this} xywh {310 245 80 35} box PLASTIC_UP_BOX color 230 selection_color 220 labelfont 1 align 128
        }
        Fl_Button effects {
          label Effects
          callback {//
          Showefx();
          if ((Fl::event_button() == 3))
          {
              instrumenteditwindow->hide();}}
          tooltip {Right click: also close this} xywh {310 283 80 35} box PLASTIC_UP_BOX color 230 labelfont 1
        }
      }
      Fl_Group {} {
        xywh {0 5 395 215} box ENGRAVED_FRAME
      } {
        Fl_Text_Display A_C_display {
          label {Author and Copyright}
          xywh {171 44 148 4} box NO_BOX labelsize 12
        }
        Fl_Button A_C_default {
          label Default
          callback {//
            int param = 0;
            if (Fl::event_state(FL_CTRL))
            param = 1;
            send_data(TOPLEVEL::action::lowPrio | TOPLEVEL::action::forceUpdate, PART::control::defaultInstrumentCopyright, 0, TOPLEVEL::type::Integer, 255, 255, 255, param);}
          tooltip {Load default author & copyright
 + Ctrl: save current text as default} xywh {327 25 63 20} labelsize 12
        }
        Fl_Input copyright {
          callback {//
           send_data(TOPLEVEL::action::lowPrio, PART::control::instrumentCopyright, 0, TOPLEVEL::type::Integer, UNUSED, UNUSED, UNUSED, UNUSED, textMsgBuffer.push(string(o->value())));}
          xywh {5 49 385 55} type Multiline color 26 labelsize 12 align 9
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(part->info.Pauthor.c_str());}
        }
        Fl_Input commentField {
          label Comments
          callback {//
          send_data(TOPLEVEL::action::lowPrio, PART::control::instrumentComments, 0, TOPLEVEL::type::Integer, UNUSED, UNUSED, UNUSED, UNUSED, textMsgBuffer.push(string(o->value())));}
          xywh {5 123 385 91} type Multiline color 26 labelsize 12 align 5
          code0 {o->maximum_size(MAX_INFO_TEXT_SIZE);}
          code1 {o->value(func::formatTextLines(part->info.Pcomments, 58).c_str());}
        }
        Fl_Choice instrumentType {
          label {Type:}
          callback {//
              send_data(TOPLEVEL::action::lowPrio, PART::control::instrumentType, o->value(), TOPLEVEL::type::Integer);}
          xywh {5 25 155 20} down_box BORDER_BOX labelfont 1 labelsize 11 align 5 textfont 1 textsize 11
          code0 {fillInstrumentType();}
          code1 {o->value(part->info.Ptype);}
        } {}
      }
      Fl_Box {} {
        xywh {0 322 268 62} box ENGRAVED_FRAME labelfont 1 align 8
      }
      Fl_Text_Display humanise_display {
        label Humanise
        xywh {102 342 78 7} box NO_BOX labelfont 1
      }
      Fl_Value_Slider humanise {
        label Detune
        callback {//

        send_data(0, PART::control::humanise, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Random detune of whole part in cents} xywh {12 342 201 16} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 8 maximum 50 step 1
        code1 {o->setValueType(VC_PartHumaniseDetune);//o->useCustomTip(true);}
        class mwheel_val_slider_rev
      }
      Fl_Value_Slider velocityhumanise {
        label Velocity
        callback {//

        send_data(0, PART::control::humanvelocity, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Random velocity attenuation of whole part} xywh {12 363 201 16} type {Horz Knob} box THIN_DOWN_BOX labelsize 12 align 8 maximum 50 step 1
        code1 {o->setValueType(VC_PartHumaniseVelocity);o->useCustomTip(true);}
        class mwheel_val_slider_rev
      }
      Fl_Button editClose {
        label Close
        callback {//
                  saveWin(synth, instrumenteditwindow->w(), instrumenteditwindow->h(), instrumenteditwindow->x(),instrumenteditwindow->y(), false, "Part-edit");
                  editSeen = false;
                  lasteditW = 0;
                  instrumenteditwindow->hide();}
        xywh {290 358 86 21} box THIN_UP_BOX labelfont 1
      }
      Fl_Button editAT {
        label Aftertouch
        callback {//
                ShowAT();
                atSeen = 2;
                if ((Fl::event_button() == 3))
                    instrumenteditwindow->hide();}
        xywh {283 328 101 26} box PLASTIC_UP_BOX color 230 labelfont 1
      }
      Fl_Text_Display originalname {
        label {Derived From}
        xywh {200 108 1 15} box NO_BOX labelfont 1 labelsize 12 align 4 textsize 11 hide
      }
      Fl_Text_Display originaltext {
        label text
        xywh {198 108 1 15} box NO_BOX labelfont 1 labelsize 12 labelcolor 4 align 8 textsize 11 hide
      }
    }
    Fl_Window partfx {
      label {Part's Insert Effects}
      xywh {520 67 385 160} type Double hide resizable
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Insert Effects").c_str());}
      code1 {fxDW = o->w(); fxDH = o->h();}
      code2 {o->size_range(fxDW, fxDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Spinner inseffnocounter {
        callback {//
                ninseff = o->value() - 1;
                insefftype->value(part->partefx[ninseff]->geteffect());

                inseffectui->refresh(part->partefx[ninseff], npart, ninseff);
                int x = part->Pefxroute[ninseff];
                if (x == 127)
                    x = 1;
                bypasseff->value(part->Pefxbypass[ninseff]);
                sendtochoice->value(x);

                send_data(0, PART::control::effectNumber, ninseff, TOPLEVEL::type::Integer, UNUSED, ninseff, TOPLEVEL::insert::partEffectSelect);}
        tooltip {Effect No.} xywh {20 8 35 22} labelsize 12 maximum 3 textsize 12
        code1 {o->value(ninseff+1);}
        class WidgetSpinner
      }
      Fl_Choice insefftype {
        callback {//
        send_data(TOPLEVEL::action::forceUpdate, PART::control::effectType, o->value(), TOPLEVEL::type::Integer, UNUSED, ninseff, TOPLEVEL::insert::partEffectSelect);}
        tooltip {Effect Type} xywh {86 8 92 22} box UP_BOX down_box BORDER_BOX labelsize 11 textfont 1 textsize 12
        code0 {o->add("No Effect");o->add("Reverb");o->add("Echo");o->add("Chorus");o->add("Phaser");o->add("AlienWah");o->add("Distortion");o->add("EQ");o->add("DynFilter");}
        code1 {o->value(part->partefx[ninseff]->geteffect());}
      } {}
      Fl_Group inseffectuigroup {
        xywh {3 37 380 96} box FLAT_BOX color 48
      } {
        Fl_Group inseffectui {
          xywh {5 38 379 95}
          code0 {o->init(part->partefx[ninseff], npart, ninseff);}
          class EffUI
        } {}
      }
      Fl_Choice sendtochoice {
        label To
        callback {//
        send_data(0, PART::control::effectDestination, o->value(), TOPLEVEL::type::Integer, UNUSED, ninseff, TOPLEVEL::insert::partEffectSelect);}
        xywh {225 8 102 22} down_box BORDER_BOX labelfont 1 labelsize 12 textfont 1 textsize 12
        code0 {o->add("Next Effect");o->add("Part Out");o->add("Dry Out");}
        code1 {int x = part->Pefxroute[ninseff]; if (x == 127) x = 1;}
        code2 {o->value(x);}
      } {}
      Fl_Button effCopy {
        label C
        callback {//
        synth->getGuiMaster()->getPresetsUi()->copy(part->partefx[ninseff]);}
        xywh {346 3 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Button effPaste {
        label P
        callback {//
        synth->getGuiMaster()->getPresetsUi()->paste(part->partefx[ninseff], inseffectui);
        synth->getRuntime().effectChange = npart | (ninseff << 8); // temporary fix}
        xywh {346 19 25 15} box THIN_UP_BOX color 179 labelfont 1 labelsize 11 labelcolor 7
      }
      Fl_Check_Button bypasseff {
        label Bypass
        callback {//
        send_data(0, PART::control::effectBypass, o->value(), TOPLEVEL::type::Integer, UNUSED, ninseff, TOPLEVEL::insert::partEffectSelect);}
        tooltip {if the effect is not used (is bypassed)} xywh {20 135 63 21} box THIN_UP_BOX down_box DOWN_BOX color 237 labelsize 12
        code0 {int x=part->Pefxbypass[ninseff];o->value(x);}
        class Fl_Check_Button2
      }
      Fl_Button effClose {
        label Close
        callback {//
        saveWin(synth,  partfx->w(), partfx->h(),  partfx->x(),  partfx->y(), false, "Part-effects");
        if(inseffectui->filterwindow != NULL)
            inseffectui->filterwindow->hide();
        fxSeen = false;
        partfx->hide();
        if ((Fl::event_button() == 3))
            synth->getGuiMaster()->partui->instrumenteditwindow->show();}
        tooltip {Right click: also reopen previous} xywh {307 136 60 20} box THIN_UP_BOX
      }
    }
    comment {ctlmidi, ctlwindow, aftertouch control MUST be that order} {in_source in_header
    }
    Fl_Window ctlmidi {
      label {MIDI Controls}
      xywh {591 324 365 60} type Double hide resizable
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("MIDI Controls").c_str());}
      code1 {midiDW = o->w(); midiDH = o->h();}
      code2 {o->size_range(midiDW, midiDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Dial modulation {
        label Modulation
        callback {//
        send_data(0, PART::control::midiModWheel, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Modulation Wheel} xywh {20 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->modwheel.data);}
        class WidgetPDial
      }
      Fl_Dial expression {
        label Expression
        callback {//
        send_data(0, PART::control::midiExpression,  o->value(), TOPLEVEL::type::Integer);}
        tooltip Expression xywh {80 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->expression.data);}
        class WidgetPDial
      }
      Fl_Dial filterq {
        label {Filter Q}
        callback {//
        send_data(0, PART::control::midiFilterQ, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Filter Q} xywh {140 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filterq.data);}
        class WidgetPDial
      }
      Fl_Dial filtercutoff {
        label {Filter Cutoff}
        callback {//
        send_data(0, PART::control::midiFilterCutoff, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Filter Cutoff} xywh {200 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filtercutoff.data);}
        class WidgetPDial
      }
      Fl_Dial masterbandwidth {
        label Bandwidth
        callback {//
        send_data(0, PART::control::midiBandwidth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Master Bandwidth} xywh {260 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->bandwidth.data);}
        class WidgetPDial
      }
      Fl_Button ctlmidiclose {
        label Close
        callback {//
                saveWin(synth,  ctlmidi->w(),  ctlmidi->h(), ctlmidi->x(), ctlmidi->y(), false, "Part-ctlmidi");
                ctlmidiSeen = false;
                ctlmidi->hide();}
        xywh {309 35 50 20} box THIN_UP_BOX
      }
    }
    Fl_Window ctlwindow {
      label Controllers
      callback {ctlclose->do_callback();}
      xywh {568 179 505 130} type Double hide resizable
      code0 {o->copy_label(synth->getGuiMaster()->setPartWindowTitle("Controllers").c_str());}
      code1 {ctlDW = o->w(); ctlDH = o->h();}
      code2 {o->size_range(ctlDW, ctlDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Dial volrng {
        label {Vol Rng}
        callback {//
        send_data(0, PART::control::volumeRange, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Volume Range} xywh {132 55 30 30} labelsize 10 minimum 64 maximum 127 step 1
        code0 {o->value(part->ctl->volume.data);}
        class WidgetPDial
      }
      Fl_Check_Button vol {
        label Vol
        callback {//
        send_data(0, PART::control::volumeEnable, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Volume enable} xywh {175 81 45 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->volume.receive);}
        class Fl_Check_Button2
      }
      Fl_Dial panwidth {
        label PanWdth
        callback {//
        send_data(0, PART::control::panningWidth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Panning Width} xywh {10 55 30 30} labelsize 10 maximum 64 step 1
        code0 {o->value(part->ctl->panning.depth);}
        class WidgetPDial
      }
      Fl_Dial modwh {
        label ModWh
        callback {//
        send_data(0, PART::control::modWheelDepth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Modulation Wheel depth} xywh {50 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->modwheel.depth);}
        class WidgetPDial
      }
      Fl_Check_Button expmwh {
        label {Exp MWh}
        callback {//
        send_data(0, PART::control::exponentialModWheel, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Exponential modulation wheel} xywh {10 15 40 25} down_box DOWN_BOX labelsize 10 align 148
        code0 {o->value(part->ctl->modwheel.exponential);}
        class Fl_Check_Button2
      }
      Fl_Dial bwdpth {
        label BwDpth
        callback {//
        send_data(0, PART::control::bandwidthDepth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {BandWidth depth} xywh {132 10 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->bandwidth.depth);}
        class WidgetPDial
      }
      Fl_Check_Button expbw {
        label {Exp BW}
        callback {//
        send_data(0, 134, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Exponential BandWidth Controller} xywh {92 15 35 25} down_box DOWN_BOX labelsize 10 align 148
        code0 {o->value(part->ctl->bandwidth.exponential);}
        class Fl_Check_Button2
      }
      Fl_Check_Button expr {
        label Expr
        callback {//
        send_data(0, 135, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Expression enable} xywh {175 59 45 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->expression.receive);}
        class Fl_Check_Button2
      }
      Fl_Check_Button fmamp {
        label FMamp
        callback {//
        send_data(0, PART::control::FMamplitudeEnable, o->value(), TOPLEVEL::type::Integer);}
        tooltip {FM amplitude enable} xywh {225 59 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->fmamp.receive);}
        class Fl_Check_Button2
      }
      Fl_Check_Button sustain {
        label Sustain
        callback {//
        send_data(0, PART::control::sustainPedalEnable, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Sustain pedal enable} xywh {225 81 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->ctl->sustain.receive);}
        class Fl_Check_Button2
      }
      Fl_Check_Button breath {
        label Breath
        callback {//
        send_data(0, 141, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Breath Control enable} xywh {225 38 60 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
        code0 {o->value(part->PbreathControl == 2);}
        class Fl_Check_Button2
      }
      Fl_Counter pwheelbrng {
        label {PWheel Rng (cents)}
        callback {//
        send_data(0, PART::control::pitchWheelRange, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Pitch Wheel Bend Range (cents)} xywh {174 15 110 20} color 237 selection_color 0 labelsize 10 align 1 minimum -6400 maximum 6400 step 1
        code0 {o->value(part->ctl->pitchwheel.bendrange);}
        code1 {o->lstep(100);}
      }
      Fl_Dial filtq {
        label FltQ
        callback {//
        send_data(0, PART::control::filterQdepth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Filter Q depth} xywh {50 55 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filterq.depth);}
        class WidgetPDial
      }
      Fl_Dial fltcut {
        label FltCut
        callback {//
        send_data(0, PART::control::filterCutoffDepth, o->value(), TOPLEVEL::type::Integer);}
        tooltip {Filter Cutoff depth} xywh {90 55 30 30} labelsize 10 maximum 127 step 1
        code0 {o->value(part->ctl->filtercutoff.depth);}
        class WidgetPDial
      }
      Fl_Group ctlresonance {
        label Resonance
        xywh {290 15 45 85} box ENGRAVED_BOX labelfont 1 labelsize 10 align 5
      } {
        Fl_Dial cfdpth {
          label CFdpth
          callback {//
          send_data(0, PART::control::resonanceCenterFrequencyDepth, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Center Frequency controller Depth} xywh {300 20 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancecenter.depth);}
          class WidgetPDial
        }
        Fl_Dial rbwdpth {
          label BWdpth
          callback {//
          send_data(0, PART::control::resonanceBandwidthDepth, o->value(), TOPLEVEL::type::Integer);}
          tooltip {BandWidth controller depth} xywh {300 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->resonancebandwidth.depth);}
          class WidgetPDial
        }
      }
      Fl_Group ctlportamento {
        label Portamento
        xywh {340 15 160 85} box ENGRAVED_FRAME labelfont 1 labelsize 10
      } {
        Fl_Box ctlx100 {
          label {x100 cnt.}
          xywh {400 50 55 15} labelsize 10 align 16
        }
        Fl_Dial prtime {
          label time
          callback {//
          send_data(0, PART::control::portamentoTime, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Portamento time} xywh {345 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.time);}
          class WidgetPDial
        }
        Fl_Dial timedu {
          label {t.dn/up}
          callback {//
          send_data(0, PART::control::portamentoTimeStretch, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Portamento time stretch (up/down)} xywh {375 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.updowntimestretch);}
          class WidgetPDial
        }
        Fl_Counter thresh {
          label Thresh
          callback {//
          send_data(0, PART::control::portamentoThreshold, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Minimum or max. difference of the notes in order to do the portamento (x 100 cents)} xywh {400 20 50 20} type Simple color 237 selection_color 0 labelsize 10 minimum 0 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.pitchthresh);}
        }
        Fl_Check_Button thtype {
          label {th.type}
          callback {//
          send_data(0, PART::control::portamentoThresholdType, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Threshold type (min/max)} xywh {425 68 15 15} down_box DOWN_BOX labelsize 10 align 2
          code0 {o->value(part->ctl->portamento.pitchthreshtype);}
          class Fl_Check_Button2
        }
        Fl_Dial propta {
          label {Prp.Rate}
          callback {//
          send_data(0, PART::control::proportionalPortamentoRate, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Distance required to double change from nonpropotinal portamento time} xywh {463 20 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.propRate);}
          class WidgetPDial
        }
        Fl_Dial proptb {
          label {Prp.Dpth}
          callback {//
          send_data(0, PART::control::proportionalPortamentoDepth, o->value(), TOPLEVEL::type::Integer);}
          tooltip {The difference from nonproportinal portamento} xywh {463 60 25 25} labelsize 10 maximum 127 step 1
          code0 {o->value(part->ctl->portamento.propDepth);}
          class WidgetPDial
        }
        Fl_Check_Button rcv {
          label Rcv
          callback {//
          send_data(0, PART::control::receivePortamento, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Receive Portamento Controllers} xywh {345 20 40 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 10
          code0 {o->value(part->ctl->portamento.receive);}
          class Fl_Check_Button2
        }
        Fl_Check_Button proprt {
          label {Proprt.}
          callback {//
          if (o->value())
          {
              propta->activate();
              proptb->activate();
          }
          else
          {
              propta->deactivate();
              proptb->deactivate();
          }
          send_data(0, PART::control::enableProportionalPortamento, o->value(), TOPLEVEL::type::Integer);}
          tooltip {Enable Proportinal Portamento (over fixed Portamento)} xywh {345 40 50 18} box THIN_UP_BOX down_box DOWN_BOX labelsize 9
          code0 {o->value(part->ctl->portamento.proportional);}
          code1 {if (o->value()){propta->activate();proptb->activate();}}
          code2 {else {propta->deactivate();proptb->deactivate();}}
          class Fl_Check_Button2
        }
      }
      Fl_Button resetallctl {
        label {Reset all controllers}
        callback {//
        send_data(TOPLEVEL::action::forceUpdate, PART::control::resetAllControllers, o->value(), TOPLEVEL::type::Integer);}
        xywh {5 105 210 20} box THIN_UP_BOX
      }
      Fl_Button aftertouch {
        label Aftertouch
        callback {//;
                ShowAT();
                atSeen = 1;
                if ((Fl::event_button() == 3))
                    ctlwindow->hide();}
        xywh {245 105 130 20} box PLASTIC_THIN_UP_BOX color 230
      }
      Fl_Button ctlclose {
        label Close
        callback {//;
        saveWin(synth, ctlwindow->w(), ctlwindow->h(), ctlwindow->x(), ctlwindow->y(), false, "Part-controllers");
        ctlSeen = false;
        lastctlW = 0;
        ctlwindow->hide();}
        xywh {405 105 95 20} box THIN_UP_BOX
      }
    }
    Fl_Window aftertouchcontrol {
      label Aftertouch
      callback {atClose->do_callback();}
      xywh {569 115 485 180} type Double hide resizable
      code0 {atDW = o->w(); atDH = o->h();}
      code1 {o->size_range(atDW, atDH, 0, 0, 0, 0, 1);}
    } {
      Fl_Box {} {
        xywh {9 5 228 171} box ENGRAVED_FRAME
      }
      Fl_Box {} {
        xywh {241 5 234 143} box ENGRAVED_FRAME
      }
      Fl_Box ATchan {
        label Channel
        xywh {95 13 35 17} labelfont 1
      }
      Fl_Button channeloff {
        label Off
        callback {//
                channelfiltercutoff->value(0);
                channelfilterCminus->value(0);
                channelfilterCminus->deactivate();
                channelfilterQ->value(0);
                channelfilterQminus->value(0);
                channelfilterQminus->deactivate();
                channelpitchbend->value(0);
                channelpitchBminus->value(0);
                channelpitchBminus->deactivate();
                channelmodulation->value(0);
                channelvolume->value(0);
                setATchannel(PART::aftertouchType::off, true);}
        xywh {55 40 48 20}
      }
      Fl_Check_Button channelfiltercutoff {
        label {Filter Cutoff}
        callback {//
                if (o->value())
                    channelfilterCminus->activate();
                else
                {
                    channelfilterCminus->value(0);
                    channelfilterCminus->deactivate();
                }
                setATchannel(PART::aftertouchType::filterCutoff, o->value());}
        tooltip {Between current MIDI setting and max.} xywh {25 65 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button channelfilterCminus {
        label Down
        callback {//
                setATchannel(PART::aftertouchType::filterCutoffDown, o->value());}
        tooltip {Between current MIDI setting and zero} xywh {150 65 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button channelfilterQ {
        label {Filter Q}
        callback {//
                if (o->value())
                    channelfilterQminus->activate();
                else
                {
                    channelfilterQminus->value(0);
                    channelfilterQminus->deactivate();
                }
                setATchannel(PART::aftertouchType::filterQ, o->value());}
        tooltip {Between current MIDI setting and max.} xywh {25 85 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button channelfilterQminus {
        label Down
        callback {//
                setATchannel(PART::aftertouchType::filterQdown, o->value());}
        tooltip {Between current MIDI setting and zero} xywh {150 85 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button channelpitchbend {
        label {Pitch Bend}
        callback {//
                if (o->value())
                    channelpitchBminus->activate();
                else
                {
                    channelpitchBminus->value(0);
                    channelpitchBminus->deactivate();
                }
                setATchannel(PART::aftertouchType::pitchBend, o->value());}
        tooltip {Between current pitch wheel position and max.} xywh {25 105 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button channelpitchBminus {
        label Down
        callback {//
                setATchannel(PART::aftertouchType::pitchBendDown, o->value());}
        tooltip {Between current pitch wheel position and min.} xywh {150 105 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button channelmodulation {
        label Modulation
        callback {//
                setATchannel(PART::aftertouchType::modulation, o->value());}
        tooltip {Between zero and Add/Pad frequency LFO depth} xywh {25 125 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button channelvolume {
        label Volume
        callback {//
                setATchannel(PART::aftertouchType::volume, o->value());}
        tooltip {Between current part volume and max.} xywh {25 145 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Box ATkey {
        label Key
        xywh {328 13 35 17} labelfont 1
      }
      Fl_Button polyoff {
        label Off
        callback {//
                polyfiltercutoff->value(0);
                polyfilterCminus->value(0);
                polyfilterCminus->deactivate();
                polyfilterQ->value(0);
                polyfilterQminus->value(0);
                polyfilterQminus->deactivate();
                polypitchbend->value(0);
                polypitchBminus->value(0);
                polypitchBminus->deactivate();
                polymodulation->value(0);
                setATkey(PART::aftertouchType::off, true);}
        xywh {300 40 48 20}
      }
      Fl_Check_Button polyfiltercutoff {
        label {Filter Cutoff}
        callback {//
                if (o->value())
                    polyfilterCminus->activate();
                else
                {
                    polyfilterCminus->value(0);
                    polyfilterCminus->deactivate();
                }
                setATkey(PART::aftertouchType::filterCutoff, o->value());}
        tooltip {Between current MIDI setting and max.} xywh {270 65 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button polyfilterCminus {
        label Down
        callback {//
                setATkey(PART::aftertouchType::filterCutoffDown, o->value());}
        tooltip {Between current MIDI setting and zero} xywh {395 65 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button polyfilterQ {
        label {Filter Q}
        callback {//
                if (o->value())
                    polyfilterQminus->activate();
                else
                {
                    polyfilterQminus->value(0);
                    polyfilterQminus->deactivate();
                }
                setATkey(PART::aftertouchType::filterQ, o->value());}
        tooltip {Between current MIDI setting and max.} xywh {270 85 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button polyfilterQminus {
        label Down
        callback {//
                setATkey(PART::aftertouchType::filterQdown, o->value());}
        tooltip {Between current MIDI setting and zero} xywh {395 85 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button polypitchbend {
        label {Pitch Bend}
        callback {//
                if (o->value())
                    polypitchBminus->activate();
                else
                {
                    polypitchBminus->value(0);
                    polypitchBminus->deactivate();
                }
                setATkey(PART::aftertouchType::pitchBend, o->value());}
        tooltip {Between current pitch wheel position and max.} xywh {270 105 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Check_Button polypitchBminus {
        label Down
        callback {//
                setATkey(PART::aftertouchType::pitchBendDown, o->value());}
        tooltip {Between current pitch wheel position and min.} xywh {395 105 70 15} down_box DOWN_BOX deactivate
        class Fl_Check_Button2
      }
      Fl_Check_Button polymodulation {
        label Modulation
        callback {//
                setATkey(PART::aftertouchType::modulation, o->value());}
        tooltip {Between zero and Add/Pad frequency LFO depth} xywh {270 125 70 15} down_box DOWN_BOX
        class Fl_Check_Button2
      }
      Fl_Button atClose {
        label Close
        callback {//
        saveWin(synth, aftertouchcontrol->w(), aftertouchcontrol->h(), aftertouchcontrol->x(), aftertouchcontrol->y(), false, "Part-aftertouch");
        if ((Fl::event_button() == 3))
        {
            if (atSeen > 1)
                instrumenteditwindow->show();
            else
                ctlwindow->show();
        }
        atSeen = 0;
        aftertouchcontrol->hide();}
        xywh {420 154 50 20} box THIN_UP_BOX
      }
    }
  }
  Function {handle(int event)} {return_type int
  } {
    code {//
        int ret = Fl_Group::handle(event);
        switch(event)
        {
            case FL_FOCUS:
            case FL_UNFOCUS:
                ret = 1;
                break;
            case FL_SHORTCUT:           // in case widget that isn't ours has focus
            case FL_KEYDOWN:            // keyboard key pushed
            //case FL_KEYUP:              // keyboard key released
            {
                if (lastkey != Fl::event_key())
                {
                    lastkey = Fl::event_key();
                    //cout << "Key " << lastkey << endl;
                }
                break;
            }
            case FL_KEYUP:
            {
                if (lastkey == Fl::event_key())
                    lastkey = -1;
                break;
            }
        }
        return(ret);} {}
  }
  Function {send_data(int action, int control, float value, int type, int kititem = UNUSED, int engine = UNUSED, int insert = UNUSED, int parameter = UNUSED, int miscmsg = UNUSED)} {} {
    code {//
        type |= TOPLEVEL::type::Write;
        collect_data(synth, value, action, type, control, npart, kititem, engine, insert, parameter, UNUSED, miscmsg);} {}
  }
  Function {fetchData(float value, int control, int part, int kititem = UNUSED, int engine = UNUSED, int insert = UNUSED, int parameter = UNUSED, int offset = UNUSED, int miscmsg = UNUSED, int request = UNUSED)} {return_type float
  } {
    code {//
        return collect_readData(synth, value, control, part, kititem, engine, insert, parameter, offset, miscmsg, request);} {}
  }
  Function {returns_update(CommandBlock *getData)} {} {
    code {//
    float value = getData->data.value;
    unsigned char control = getData->data.control;
    unsigned char newpart = getData->data.part;
    unsigned char kititem = getData->data.kit;
    unsigned char engine = getData->data.engine;
    unsigned char insert = getData->data.insert;
    unsigned char parameter = getData->data.parameter;
    unsigned char miscmsg = getData->data.miscmsg;
    bool valBool = _SYS_::F2B(value);
    int valInt = lrint(value);
    string text;
    if (miscmsg != NO_MSG)
        text = textMsgBuffer.fetch(miscmsg);

    // these are specific to the mixer panel
    if (newpart >= *plgroup && newpart < (*plgroup + NUM_MIDI_CHANNELS))
    {
        int displaypart = newpart % NUM_MIDI_CHANNELS;
        switch (control)
        {
            case PART::control::enable:
                synth->getGuiMaster()->panellistitem[displaypart]->partenabled->value(valBool);
                if (valBool)
                    synth->getGuiMaster()->panellistitem[displaypart]->panellistitemgroup->activate();
                else
                    synth->getGuiMaster()->panellistitem[displaypart]->panellistitemgroup->deactivate();
                break;
            case PART::control::volume:
                synth->getGuiMaster()->panellistitem[displaypart]->partvolume->value(value);
                break;
            case PART::control::panning:
                synth->getGuiMaster()->panellistitem[displaypart]->partpanning->value(value);
                break;
            case PART::control::midiChannel:
                synth->getGuiMaster()->panellistitem[displaypart]->partrcv->value(valInt & 0xf);
                if (valInt < (NUM_MIDI_CHANNELS - 1))
                    synth->getGuiMaster()->panellistitem[displaypart]->partrcv->textcolor(FL_BLACK);
                else
                    synth->getGuiMaster()->panellistitem[displaypart]->partrcv->textcolor(FL_WHITE);
                break;
            case PART::control::audioDestination:
                int send = valInt - 1;
                if (send < 0 or send > 2)
                    send = 0;
                synth->getGuiMaster()->panellistitem[displaypart]->audiosend->value(send);
        }
    }
    //std::cout << "reached npart " << int(npart) << "  new " << int(newpart) <<std::endl;
    if (npart != newpart)
        return;
    bool sameEff = (engine == ninseff);
    bool kitType = (insert == TOPLEVEL::insert::kitGroup);
    if (!kitType)
        kititem = 0;
    switch(control)
    {
        case PART::control::enable:
            partGroupEnable->value(valBool);
            if (valBool)
            {
                partgroupui->activate();
                toSysEfx->activate();
            }
            else
            {
                partgroupui->deactivate();
                toSysEfx->deactivate();
            }
            break;
        case PART::control::enableAdd:
            partkititem[kititem]->adcheck->value(valBool);
            if (valBool)
            {
                partkititem[kititem]->adeditbutton->activate();
                if (kititem == 0)
                {
                    adsynenabledcheck->value(1);
                    adeditbutton->activate();
                }
            }
            else
            {
                partkititem[kititem]->adeditbutton->deactivate();
                if (kititem == 0)
                {
                    adsynenabledcheck->value(0);
                    adeditbutton->deactivate();
                }
            }
            break;
        case PART::control::enableSub:
            partkititem[kititem]->subcheck->value(valBool);
            if (valBool)
            {
                partkititem[kititem]->subeditbutton->activate();
                if (kititem == 0)
                {
                    subsynenabledcheck->value(1);
                    subeditbutton->activate();
                }
            }
            else
            {
                partkititem[kititem]->subeditbutton->deactivate();
                if (kititem == 0)
                {
                    subsynenabledcheck->value(0);
                    subeditbutton->deactivate();
                }
            }
            break;
        case PART::control::enablePad:
            partkititem[kititem]->padcheck->value(valBool);
            if (valBool)
            {
                partkititem[kititem]->padeditbutton->activate();
                if (kititem ==0)
                {
                    padsynenabledcheck->value(1);
                    padeditbutton->activate();
                }
            }
            else
            {
                partkititem[kititem]->padeditbutton->deactivate();
                if (kititem ==0)
                {
                    padsynenabledcheck->value(0);
                    padeditbutton->deactivate();
                }
            }
            break;
        case PART::control::enableKitLine:
            partkititem[kititem]->enabledcheck->value(valBool);
            if (valBool)
                partkititem[kititem]->partkititemgroup->activate();
            else
                partkititem[kititem]->clearLine();
            break;

        case PART::control::volume:
            partvol->value(value);
            break;

        case PART::control::velocitySense:
            velocitysense->value(value);
            break;

        case PART::control::panning:
            partpan->value(value);
            break;

        case PART::control::velocityOffset:
            velocityoffset->value(value);
            break;

        case PART::control::midiChannel:
            midich->value(valInt + 1);
            if (valInt < NUM_MIDI_CHANNELS)
                midich->textcolor(FL_BLACK);
            else
                midich->textcolor(FL_WHITE);
            break;

        case PART::control::keyMode:
            modepatch->color(29);
            if (valInt > 1)
            {
                keymode->value(2);
                if (drumMode->value())
                    modepatch->color(91);
            }
            else
                keymode->value(valInt);
            modepatch->redraw();
            break;
        case PART::control::channelATset:
            channelATselection = valInt;
            fetchChannel();
            if (parameter != UNUSED)
            {
                keyATselection = parameter;
                fetchKey();
            }
            break;
        case PART::control::keyATset:
            keyATselection = valInt;
            fetchKey();
            if (parameter != UNUSED)
            {
                channelATselection = parameter;
                fetchChannel();
            }
            break;

        case PART::control::portamento:
            enportamento->value(valBool);
            break;

        case PART::control::kitItemMute:
            partkititem[kititem]->mutedcheck->value(valBool);
            break;
        case PART::control::minNote:
        case PART::control::minToLastKey: // this will have been modified for last key press
            if (kitType)
               partkititem[kititem]->minkcounter->value(valInt);
            else
                minkcounter->value(valInt);
            break;

        case PART::control::maxNote:
        case PART::control::maxToLastKey: // this will have been modified for last key press
            if (kitType)
                partkititem[kititem]->maxkcounter->value(valInt);
            else
                maxkcounter->value(valInt);
            break;

        case PART::control::resetMinMaxKey:
            if (kitType)
            {
                partkititem[kititem]->minkcounter->value(0);
                partkititem[kititem]->maxkcounter->value(127);
            }
            else
            {
                minkcounter->value(0);
                maxkcounter->value(127);
            }
            break;

        case PART::control::kitEffectNum:
            partkititem[kititem]->sendtoeffect->value(valInt);
            break;

        case PART::control::maxNotes:
            partkeylimit->value(valInt);
            break;

        case PART::control::keyShift:
            partkeyshift->value(valInt);
            break;

        case PART::control::partToSystemEffect1:
        case PART::control::partToSystemEffect2:
        case PART::control::partToSystemEffect3:
        case PART::control::partToSystemEffect4:
            psyef[control - PART::control::partToSystemEffect1]->sysend->value(value);
            break;

        case PART::control::humanise:
            humanise->value(valInt);
            break;

        case PART::control::humanvelocity:
            velocityhumanise->value(valInt);
            break;


        case PART::control::drumMode:
            drumMode->value(valBool);
            if (valBool && keymode->value() > 1)
                modepatch->color(91);
            else
                modepatch->color(29);
            modepatch->redraw();
            break;

        case PART::control::kitMode:
            kitMode->value(valInt);
            partKitOn =  (kitMode->value() > 0);
            if (partKitOn > 0)
                kitlist->activate();
            else
                kitlist->deactivate();
            break;

        case PART::control::effectNumber:
            if (sameEff)
                inseffectui->UpdatePresetColour(parameter, insefftype->value());
            else
                lastfxW = 0;
            break;

        case PART::control::effectType:
            if (sameEff)
            {
                insefftype->value(valInt);
                part->partefx[engine]->geteffect();
                inseffectui->UpdatePresetColour(parameter, insefftype->value());
                inseffectui->refresh(part->partefx[engine], npart, engine);
                fxRtext();
            }
            break;

        case PART::control::effectDestination:
            if (sameEff)
                sendtochoice->value(valInt);
            break;

        case PART::control::effectBypass:
            if (sameEff)
                bypasseff->value(valBool);
            break;

// controllers
        case PART::control::volumeRange:
            volrng->value(valInt);
            break;

        case PART::control::volumeEnable:
            vol->value(valInt);
            break;

        case PART::control::panningWidth:
            panwidth->value(valInt);
            break;

        case PART::control::modWheelDepth:
            modwh->value(valInt);
            break;

        case PART::control::exponentialModWheel:
            expmwh->value(valInt);
            break;

        case PART::control::bandwidthDepth:
            bwdpth->value(valInt);
            break;

        case PART::control::exponentialBandwidth:
            expbw->value(valInt);
            break;

        case PART::control::expressionEnable:
            expr->value(valInt);
            break;

        case PART::control::FMamplitudeEnable:
            fmamp->value(valInt);
            break;

        case PART::control::sustainPedalEnable:
            sustain->value(valInt);
            break;

        case PART::control::pitchWheelRange:
            pwheelbrng->value(valInt);
            break;

        case PART::control::filterQdepth:
            filtq->value(valInt);
            break;

        case PART::control::filterCutoffDepth:
            fltcut->value(valInt);
            break;

        case PART::control::breathControlEnable:
            breath->value(valBool);
            break;

        case PART::control::resonanceCenterFrequencyDepth:
            cfdpth->value(valInt);
            break;

        case PART::control::resonanceBandwidthDepth:
            rbwdpth->value(valInt);
            break;

        case PART::control::portamentoTime:
            prtime->value(valInt);
            break;

        case PART::control::portamentoTimeStretch:
            timedu->value(valInt);
            break;

        case PART::control::portamentoThreshold:
            thresh->value(valInt);
            break;

        case PART::control::portamentoThresholdType:
            thtype->value(valInt);
            break;

        case PART::control::enableProportionalPortamento:
            proprt->value(valInt);
            if (value != 0)
            {
                propta->activate();
                proptb->activate();
            }
            else
            {
                propta->deactivate();
                proptb->deactivate();
            }
            break;

        case PART::control::proportionalPortamentoRate:
            propta->value(valInt);
            break;

        case PART::control::proportionalPortamentoDepth:
            proptb->value(valInt);
            break;

        case PART::control::receivePortamento:
            rcv->value(valInt);
            break;

        case PART::control::midiModWheel:
            modulation->value(value);
            break;
        case PART::control::midiExpression:
            expression->value(value);
            break;
        case PART::control::midiFilterQ:
            filterq->value(value);
            break;
        case PART::control::midiFilterCutoff:
            filtercutoff->value(value);
            break;
        case PART::control::midiBandwidth:
            masterbandwidth->value(value);
            break;

        case PART::control::instrumentCopyright:
            copyright->value(func::formatTextLines(text, 58).c_str());
            break;
        case PART::control::instrumentComments:
            commentField->value(func::formatTextLines(text, 58).c_str());
            break;
        case PART::control::instrumentName:
            if (!kitType)
                checkEngines(text);
            else
                partkititem[kititem]->labelbutton->copy_label(text.c_str());
            break;
        case PART::control::instrumentType:
            instrumentType->value(value);
            break;
        case PART::control::defaultInstrumentCopyright:
            if (parameter == 0)
                copyright->value(text.c_str());
            break;
        case PART::control::resetAllControllers:
            updatecontrollers();
            break;
        default:
            break;
    }
    if (control == PART::control::enableAdd || control == PART::control::enableSub || control == PART::control::enablePad)
    checkEngines();} {}
  }
  Function {PartUI(int x,int y, int w, int h, const char *label=0):Fl_Group(x,y,w,h,label)} {} {
    code {//
    part = NULL;
    adnoteui = NULL;
    subnoteui = NULL;
    padnoteui = NULL;
    editSeen = false;
    fxSeen = false;
    kitSeen = false;
    ctlSeen = false;
    ctlmidiSeen = false;
    atSeen = false;
    lastfxW = 0;
    lastkitW = 0;
    lastmidiW = 0;
    lastatW = 0;
    lastkititem = -1;} {}
  }
  Function {fillInstrumentType()} {} {
    code {//

        int i = 0;
        string entry = type_list[i];
        while (entry != "@end")
        {
            instrumentType->add(entry.c_str());
            ++ i;
            entry = type_list[i];
        }} {}
  }
  Function {updatecontrollers()} {} {
    code {//
    enportamento->value(0);
    keymode->value(part->Pkeymode & MIDI_NOT_LEGATO);
    expmwh->value(part->ctl->modwheel.exponential);
    modwh->value(part->ctl->modwheel.depth);
    expbw->value(part->ctl->bandwidth.exponential);
    bwdpth->value(part->ctl->bandwidth.depth);
    pwheelbrng->value(part->ctl->pitchwheel.bendrange);
    panwidth->value(part->ctl->panning.depth);
    filtq->value(part->ctl->filterq.depth);
    fltcut->value(part->ctl->filtercutoff.depth);
    volrng->value(part->ctl->volume.data);
    expr->value(part->ctl->expression.receive);
    fmamp->value(part->ctl->fmamp.receive);
    vol->value(part->ctl->volume.receive);
    sustain->value(part->ctl->sustain.receive);

    cfdpth->value(part->ctl->resonancecenter.depth);
    rbwdpth->value(part->ctl->resonancebandwidth.depth);

    rcv->value(part->ctl->portamento.receive);
    thresh->value(part->ctl->portamento.pitchthresh);
    propta->value(part->ctl->portamento.propRate);
    proprt->value(part->ctl->portamento.proportional);
    if (proprt->value())
    {
        propta->activate();
        proptb->activate();
    }
    else
    {
        propta->deactivate();
        proptb->deactivate();
    }
    prtime->value(part->ctl->portamento.time);
    timedu->value(part->ctl->portamento.updowntimestretch);
    thtype->value(part->ctl->portamento.pitchthreshtype);
    proptb->value(part->ctl->portamento.propDepth);} {}
  }
  Function {fetchChannel()} {} {
    code {//
            channelfiltercutoff->value(0); // clear settings first
            channelfilterCminus->value(0);
            channelfilterCminus->deactivate();
            channelfilterQ->value(0);
            channelfilterQminus->value(0);
            channelfilterQminus->deactivate();
            channelpitchbend->value(0);
            channelpitchBminus->value(0);
            channelpitchBminus->deactivate();
            channelmodulation->value(0);
            channelvolume->value(0);


    if (channelATselection & PART::aftertouchType::filterCutoff)
    {
         channelfiltercutoff->value(1);
         channelfilterCminus->activate();
         if (channelATselection & PART::aftertouchType::filterCutoffDown)
             channelfilterCminus->value(1);
    }
    if (channelATselection & PART::aftertouchType::filterQ)
    {
         channelfilterQ->value(1);
         channelfilterQminus->activate();
         if (channelATselection & PART::aftertouchType::filterQdown)
             channelfilterQminus->value(1);
    }
    if (channelATselection & PART::aftertouchType::pitchBend)
    {
        channelpitchbend->value(1);
         channelpitchBminus->activate();
        if (channelATselection & PART::aftertouchType::pitchBendDown)
            channelpitchBminus->value(1);
    }
    if (channelATselection & PART::aftertouchType::modulation)
        channelmodulation->value(1);
    if (channelATselection & PART::aftertouchType::volume)
        channelvolume->value(1);} {}
  }
  Function {fetchKey()} {} {
    code {//
            polyfiltercutoff->value(0); // clear settings first
            polyfilterCminus->value(0);
            polyfilterCminus->deactivate();
            polyfilterQ->value(0);
            polyfilterQminus->value(0);
            polyfilterQminus->deactivate();
            polypitchbend->value(0);
            polypitchBminus->value(0);
            polypitchBminus->deactivate();
            polymodulation->value(0);

    if (keyATselection & PART::aftertouchType::filterCutoff)
    {
         polyfiltercutoff->value(1);
         polyfilterCminus->activate();
         if (keyATselection & PART::aftertouchType::filterCutoffDown)
             polyfilterCminus->value(1);
    }
    if (keyATselection & PART::aftertouchType::filterQ)
    {
         polyfilterQ->value(1);
         polyfilterQminus->activate();
         if (keyATselection & PART::aftertouchType::filterQdown)
             polyfilterQminus->value(1);
    }
    if (keyATselection & PART::aftertouchType::pitchBend)
    {
        polypitchbend->value(1);
         polypitchBminus->activate();
        if (keyATselection & PART::aftertouchType::pitchBendDown)
            polypitchBminus->value(1);
    }
    if (keyATselection & PART::aftertouchType::modulation)
        polymodulation->value(1);} {}
  }
  Function {setATchannel(int type, int state)} {} {
    code {//
        if (type == PART::aftertouchType::off)
            channelATselection = 0;
        else
        {
            if (state > 0)
            {
                channelATselection |= type;
                if (keyATselection & type)
                {
                    keyATselection &= ~type;
                    fetchKey();
                }

            }
            else
            {
                channelATselection &= ~type;
                if (type == PART::aftertouchType::filterCutoff)
                    channelATselection &= ~PART::aftertouchType::filterCutoffDown;
                else if (type == PART::aftertouchType::pitchBend)
                    channelATselection &= ~PART::aftertouchType::pitchBendDown;
            }
        }
        send_data(0, PART::channelATset, channelATselection, TOPLEVEL::type::Integer);} {}
  }
  Function {setATkey(int type, int state)} {} {
    code {//
        if (type == PART::aftertouchType::off)
            keyATselection = 0;
        else
        {
            if (state > 0)
            {
                keyATselection |= type;
                if (channelATselection & type)
                {
                    channelATselection &= ~type;
                    fetchChannel();
                }
            }
            else
            {
                keyATselection &= ~type;
                if (type == PART::aftertouchType::filterCutoff)
                    keyATselection &= ~PART::aftertouchType::filterCutoffDown;
                else if (type == PART::aftertouchType::pitchBend)
                    keyATselection &= ~PART::aftertouchType::pitchBendDown;
            }
        }
        send_data(0, PART::keyATset, keyATselection, TOPLEVEL::type::Integer);} {}
  }
  Function {init(Part *part_,int npart_,BankUI *bankui_)} {} {
    code {//
    synth = part_->getSynthEngine();
    bankui = bankui_;
    part = part_;
    npart = npart_;
    plgroup = &synth->getGuiMaster()->panelgroup;
    ninseff = 0;
    make_window();
    partgroup->position(this->parent()->x() + 2, this->parent()->y() + 2);
    int efftype = fetchData(0, PART::control::effectType, npart, UNUSED, 0, TOPLEVEL::insert::partEffectSelect);
    if (efftype > 0)
    {
        bool status = fetchData(0, 200, npart, efftype + EFFECT::type::none, ninseff);
        inseffectui->UpdatePresetColour(status, insefftype->value());
    }

    channelATselection = int(fetchData(0, PART::control::channelATset, npart));
    int tmp = int(fetchData(0, PART::control::humanise, npart));
    humanise->value(tmp); // will inc number
    tmp = int(fetchData(0, PART::control::humanvelocity, npart));
    velocityhumanise->value(tmp); // will inc number

    fetchChannel();
    keyATselection = int(fetchData(0, PART::control::keyATset, npart));
    fetchKey();

    string name = part->Poriginal;
    if (!name.empty() && part->Pname != name)
    {
        originaltext->copy_label(name.c_str());
        originalname->show();
        originaltext->show();
    }
    else
    {
        originalname->hide();
        originaltext->hide();
    }
    partgroup->show();
    lastkey = -1;
    lasteditW = 0;
    lastctlW = 0;
    end();} {}
  }
  Function {checkEngines(string instrumentName = "")} {} {
    code {//
    engine = 0;
    if (instrumentName == "")
        instrumentName = part->Pname;
    partname = instrumentName; // this needs improving
    if (synth->getRuntime().checksynthengines)
    {
        if (adsynenabledcheck->value())
            addbox->color(ADD_COLOUR);
        else
            addbox->color(BASE_COLOUR);
        ADD->damage(1);
        if (subsynenabledcheck->value())
            subbox->color(SUB_COLOUR);
        else
            subbox->color(BASE_COLOUR);
        SUB->damage(1);
        if (padsynenabledcheck->value())
            padbox->color(PAD_COLOUR);
        else
            padbox->color(BASE_COLOUR);
        PAD->damage(1);
        for (int i = 0; i < NUM_KIT_ITEMS; ++i)
        {
            if (partkititem[i]->enabledcheck->value())
            { // nested so we don't access non existent
                if (partkititem[i]->mutedcheck->value() == 0)
                {
                    engine |= partkititem[i]->adcheck->value();
                    engine |= (partkititem[i]->subcheck->value() << 1);
                    engine |= (partkititem[i]->padcheck->value() << 2);
                }
            }
        }
    }
    if (engine & 1) // addsynth
        instrumentaddbox->color(ADD_COLOUR);
    else
        instrumentaddbox->color(BASE_COLOUR);
    if (engine & 2) // subynth
        instrumentsubbox->color(SUB_COLOUR);
    else
        instrumentsubbox->color(BASE_COLOUR);
    if (engine & 4) // padsynth
        instrumentpadbox->color(PAD_COLOUR);
    else
        instrumentpadbox->color(BASE_COLOUR);

    instrumentaddbox->damage(1);
    instrumentsubbox->damage(1);
    instrumentpadbox->damage(1);
    instrumentlabel->copy_label(instrumentName.c_str());

    if (npart >= *plgroup && npart < (*plgroup + NUM_MIDI_CHANNELS))
    {
        int num = npart % NUM_MIDI_CHANNELS;
        if (engine & 1)
            synth->getGuiMaster()->panellistitem[num]->partadd->color(ADD_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partadd->color(BASE_COLOUR);
        if (engine & 2)
            synth->getGuiMaster()->panellistitem[num]->partsub->color(SUB_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partsub->color(BASE_COLOUR);
        if (engine & 4)
            synth->getGuiMaster()->panellistitem[num]->partpad->color(PAD_COLOUR);
        else
            synth->getGuiMaster()->panellistitem[num]->partpad->color(BASE_COLOUR);

        synth->getGuiMaster()->panellistitem[num]->partadd->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partsub->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partpad->damage(1);
        synth->getGuiMaster()->panellistitem[num]->partname->copy_label(instrumentName.c_str());
    }} {}
  }
  Function {showparameters(int kititem, int engine)} {} {
    code {//
    string tname;
    kitname = part->kit[kititem].Pname;
    if (engine == -1)
    {   // this is used if I want to clear the engine from the part
        if (kititem == lastkititem)
            kititem = -1;
        else
            kititem = lastkititem;
    }
    checkEngines();

    if (kititem != lastkititem)
    {
        if (adnoteui != NULL)
            delete adnoteui;
        if (subnoteui != NULL)
            delete subnoteui;
        if (padnoteui != NULL)
            delete padnoteui;
        adnoteui = NULL;
        subnoteui = NULL;
        padnoteui = NULL;
        lastkititem = kititem;
        if (kititem >= NUM_KIT_ITEMS)
            return; // bad kit item
        if (kititem < 0)
            return;

        if (part->kit[kititem].adpars)
            adnoteui = new ADnoteUI(part->kit[kititem].adpars, npart, lastkititem);

        if (part->kit[kititem].subpars)
            subnoteui = new SUBnoteUI(part->kit[kititem].subpars, npart, lastkititem);

        if (part->kit[kititem].padpars)
            padnoteui = new PADnoteUI(part->kit[kititem].padpars, npart, lastkititem);
    }

    if (engine == 0 && adnoteui != NULL)
        adnoteui->ShowGlobal();
    if (engine == 1 && subnoteui != NULL)
        subnoteui->Showsub();
    if (engine == 2 && padnoteui != NULL)
        padnoteui->Showpad();} {}
  }
  Function {setinstrumentlabel(string text = "")} {} {
    code {//
    engine = 0;
    if (synth->getRuntime().checksynthengines)
    {
        for (int i = 0; i < NUM_KIT_ITEMS; ++i)
        {
            if (part->kit[i].Padenabled)
                engine |= 1;
            if (part->kit[i].Psubenabled)
                engine |= 2;
            if (part->kit[i].Ppadenabled)
                engine |= 4;
        }
    }
    if (engine & 1)
        instrumentaddbox->color(ADD_COLOUR);
    else
        instrumentaddbox->color(BASE_COLOUR);
    if (engine & 2)
        instrumentsubbox->color(SUB_COLOUR);
    else
        instrumentsubbox->color(BASE_COLOUR);

    if (engine & 4)
        instrumentpadbox->color(PAD_COLOUR);
    else
        instrumentpadbox->color(BASE_COLOUR);

    if (part->PyoshiType)
        instrumentlabel->labelcolor(YOSHI_COLOUR);
    else
        instrumentlabel->labelcolor(FL_BLACK);
    if (text == "")
        text = part->Pname.c_str();
    partname = text;
    instrumentlabel->copy_label(text.c_str());} {}
  }
  Function {seteditname()} {} {
    code {//
    instrumenteditwindow->copy_label(synth->getGuiMaster()->setPartWindowTitle("Edit").c_str());} {}
  }
  Function {Showedit()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-edit");

    if (fetchW < editDW || fetchH < editDH)
    {
        fetchW = editDW;
        fetchH = editDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, editDW, editDH);

    instrumenteditwindow->resize(fetchX, fetchY, fetchW, fetchH);
    lasteditW = 0;
    instrumenteditwindow->show();
    editSeen = true;} {}
  }
  Function {Showctl()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-controllers");

    if (fetchW < ctlDW || fetchH < ctlDH)
    {
        fetchW = ctlDW;
        fetchH = ctlDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, ctlDW, ctlDH);

    ctlwindow->resize(fetchX, fetchY, fetchW, fetchH);
    lastctlW = 0;
    ctlwindow->show();
    ctlSeen = true;} {}
  }
  Function {ShowAT()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-aftertouch");

    if (fetchW < atDW || fetchH < atDH)
    {
        fetchW = atDW;
        fetchH = atDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, atDW, atDH);

    aftertouchcontrol->resize(fetchX, fetchY, fetchW, fetchH);
    aftertouchcontrol->show();} {}
  }
  Function {Showctlmidi()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-ctlmidi");

    if (fetchW < midiDW || fetchH < midiDH)
    {
        fetchW = midiDW;
        fetchH = midiDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, midiDW, midiDH, true);

    ctlmidi->resize(fetchX, fetchY, fetchW, fetchH);
    ctlmidi->show();
    ctlmidiSeen = true;} {}
  }
  Function {ctlmidirefresh()} {} {
    code {//
    modulation->value(part->ctl->modwheel.data);
    expression->value(part->ctl->expression.data);
    filterq->value(part->ctl->filterq.data);
    filtercutoff->value(part->ctl->filtercutoff.data);
    masterbandwidth->value(part->ctl->bandwidth.data);} {}
  }
  Function {Showefx()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-effects");

    if (fetchW < fxDW || fetchH < fxDH)
    {
        fetchW = fxDW;
        fetchH = fxDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, fxDW, fxDH);

    partfx->resize(fetchX, fetchY, fetchW, fetchH);
    partfx->show();
    fxSeen = true;} {}
  }
  Function {Showkit()} {} {
    code {//
    int fetchW, fetchH, fetchX, fetchY, fetchO;
    loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-kit");

    if (fetchW < kitDW || fetchH < kitDH)
    {
        fetchW = kitDW;
        fetchH = kitDH;
    }
    checkSane(fetchX, fetchY, fetchW, fetchH, kitDW, kitDH);

    instrumentkitlist->resize(fetchX, fetchY, fetchW, fetchH);
    instrumentkitlist->show();
    kitSeen = true;} {}
  }
  Function {wincheck()} {} {
    code {//
    if (instrumenteditwindow->visible())
        editRtext();

    if (partfx->visible())
    {
    	if (insefftype->value() == 8) // dynfilter
    	{
            if(inseffectui->filterwindow != NULL)
            {
                if(inseffectui->filterwindow->visible())
                    inseffectui->filtRtext();
            }
        }
        if ( partfx->w() != lastfxW)
        {
            fxRtext();
            lastfxW = partfx->w();
        }
    }


    if (instrumentkitlist->visible() && instrumentkitlist->w() != lastkitW)
    {
        kitRtext();
        lastkitW = instrumentkitlist->w();
    }
    if (ctlwindow->visible())
        ctlRtext();

    if (ctlmidi->visible() && ctlmidi->w() != lastmidiW)
    {
        ctlmidiRtext();
        lastmidiW = ctlmidi->w();
    }
    if (aftertouchcontrol->visible() && aftertouchcontrol->w() != lastatW)
    {
        ATRtext();
        lastatW = aftertouchcontrol->w();
    }

    if (adnoteui)
        adnoteui->wincheck();
    if (subnoteui)
        subnoteui->subRtext();
    if (padnoteui)
        padnoteui->padRtext();} {}
  }
  Function {editRtext()} {} {
    code {//
    if (lasteditW == instrumenteditwindow->w())
        return;
    lasteditW = instrumenteditwindow->w();

    float dScale = instrumenteditwindow->w() / float(editDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size = int(10 * dScale);
    int size11 = int(11 * dScale);
    int size12 = int(12 * dScale);
    int size14 = int(14 * dScale);

    ADD->labelsize(size14);
    adsynenabledcheck->labelsize(size11);
    adeditbutton->labelsize(size14);

    SUB->labelsize(size14);
    subsynenabledcheck->labelsize(size11);
    subeditbutton->labelsize(size14);

    PAD->labelsize(size14);
    padsynenabledcheck->labelsize(size11);
    padeditbutton->labelsize(size14);

    kitedit->labelsize(size14);
    effects->labelsize(size14);

    A_C_display->labelsize(size12);
    A_C_default->labelsize(size12);
    copyright->labelsize(size12);
        copyright->textsize(size14);
    commentField->labelsize(size12);
        commentField->textsize(size14);
    originalname->labelsize(size12);
    originaltext->labelsize(size12);
    instrumentType->labelsize(size11);
        instrumentType->textsize(size11);

    humanise->labelsize(size12);
        humanise->textsize(size);

    velocityhumanise->labelsize(size12);
        velocityhumanise->textsize(size);
    editAT->labelsize(size14);
    editClose->labelsize(size14);
    humanise_display->labelsize(size14);

    instrumenteditwindow->redraw();} {}
  }
  Function {ctlRtext()} {} {
    code {//
    if (lastctlW == ctlwindow->w())
        return;
    lastctlW = ctlwindow->w();

    float dScale =  ctlwindow->w() / float(ctlDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size = int(dScale * 10);
    int size14 = int(dScale * 14);

    volrng->labelsize(size);
    vol->labelsize(size);
    panwidth->labelsize(size);
    modwh->labelsize(size);
    expmwh->labelsize(size);
    bwdpth->labelsize(size);
    expbw->labelsize(size);
    expr->labelsize(size);
    fmamp->labelsize(size);
    sustain->labelsize(size);
    breath->labelsize(size);
    pwheelbrng->labelsize(size);
    pwheelbrng->textsize(size14);
    filtq->labelsize(size);
    fltcut->labelsize(size);

    ctlresonance->labelsize(size);
    cfdpth->labelsize(size);
    rbwdpth->labelsize(size);

    ctlportamento->labelsize(size);
    ctlx100->labelsize(size);
    prtime->labelsize(size);
    timedu->labelsize(size);
    thresh->labelsize(size);
    thresh->textsize(size14);
    thtype->labelsize(size);
    propta->labelsize(size);
    proptb->labelsize(size);
    rcv->labelsize(size);
    proprt->labelsize(size);

    resetallctl->labelsize(size14);
    aftertouch->labelsize(size14);
    ctlclose->labelsize(size14);
    ctlwindow->redraw();} {}
  }
  Function {ATRtext()} {} {
    code {//
    float dScale =  aftertouchcontrol->w() / float(atDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size14 = int(dScale * 14);

    ATchan->labelsize(size14);
    channeloff->labelsize(size14);
    channelfiltercutoff->labelsize(size14);
    channelfilterCminus->labelsize(size14);
    channelfilterQ->labelsize(size14);
    channelfilterQminus->labelsize(size14);
    channelpitchbend->labelsize(size14);
    channelpitchBminus->labelsize(size14);
    channelmodulation->labelsize(size14);
    channelvolume->labelsize(size14);

    ATkey->labelsize(size14);
    polyoff->labelsize(size14);
    polyfiltercutoff->labelsize(size14);
    polyfilterCminus->labelsize(size14);
    polyfilterQ->labelsize(size14);
    polyfilterQminus->labelsize(size14);
    polypitchbend->labelsize(size14);
    polypitchBminus->labelsize(size14);
    polymodulation->labelsize(size14);

    atClose->labelsize(size14);

    aftertouchcontrol->redraw();} {}
  }
  Function {ctlmidiRtext()} {} {
    code {//
    float dScale = ctlmidi->w() / float(midiDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size = int(dScale * 10);

    modulation->labelsize(size);
    expression->labelsize(size);
    filterq->labelsize(size);
    filtercutoff->labelsize(size);
    masterbandwidth->labelsize(size);
    ctlmidiclose->labelsize(int(dScale * 14)-1);

    ctlmidi->redraw();} {}
  }
  Function {fxRtext()} {} {
    code {//
    float dScale =  partfx->w() / float(fxDW);
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size12 = int(12 * dScale);
    inseffnocounter->labelsize(size12);
        inseffnocounter->textsize(size12);
    insefftype->labelsize(size12);
        insefftype->textsize(size12);
    sendtochoice->labelsize(size12);
        sendtochoice->textsize(size12);

    effCopy->labelsize(size12);
    effPaste->labelsize(size12);
    bypasseff->labelsize(size12);
    effClose->labelsize(int(14 * dScale));

    inseffectui->effRtext(dScale, insefftype->value());

    partfx->redraw();} {}
  }
  Function {kitRtext(bool force = false)} {} {
    code {//
    if (force)
    {
        int fetchW, fetchH, fetchX, fetchY, fetchO;
        loadWin(synth, fetchW, fetchH, fetchX, fetchY, fetchO, "Part-kit");
        instrumentkitlist->resize(fetchX, fetchY, fetchW, fetchH);
        //kitSeen = true;
    };

    float dW = instrumentkitlist->w() / float(kitDW);
    float dH = instrumentkitlist->h() / float(kitDH);

    float dScale = dW;
    if (dScale < 0.2f)
        dScale = 0.2f;

    int size11 = int(11 * dScale);

    kitnum->labelsize(size11);
    kitmute->labelsize(size11);
    kitID->labelsize(size11);
    kitminkey->labelsize(size11);
    kitmaxkey->labelsize(size11);
    kitadd->labelsize(size11);
    kitsub->labelsize(size11);
    kitpad->labelsize(size11);
    kitfxnum->labelsize(size11);
    kitMode->labelsize(size11);
        kitMode->textsize(size11);

    drumMode->labelsize(size11);
    kitClose->labelsize(int(12 * dScale));


   kitpack->resize(0, int(21.0f * dH), int(670.0f * dW), int(322.0f * dH));

   for (int i = 0; i < NUM_KIT_ITEMS; ++i)
   {
       partkititem[i]->size(int(670.0f * dW), int(20.0f * dH));
       partkititem[i]->partkititemgroup->size(int(605.0f * dW), int(20.0f * dH));
       partkititem[i]->itemRtext(dScale);
   }

    instrumentkitlist->redraw();} {}
  }
  Function {groupRtext(float dScale)} {} {
    code {//
    partgroup->resize(3 * dScale, 255 * dScale, 380 * dScale, 170 * dScale);
    //partgroupui->size(378 * dScale, 168 * dScale);

    /* The above has to be numerically fixed as the relative size
     * can change when a part number is changed. The group is deleted
     * and re-creacted based on the *current* master window
    */

    toSysEfx->size(122 * dScale, 39 * dScale);

    for (int i = 0; i < NUM_SYS_EFX; ++ i)
    {
        psyef[i]->size(25 * dScale, 25 * dScale);
        psyef[i]->sysRsize(dScale);
    }

    int size = int(10 * dScale);
    int size11 = int(11 * dScale);
    int size12 = int(12 * dScale);
    partedit->labelsize(size12);
    instrumentlabel->labelsize(size12);
    syseffname->labelsize(size);
    velocityoffset->labelsize(size);
    velocitysense->labelsize(size);
    partpan->labelsize(size);
    partvol->labelsize(size);
    enportamento->labelsize(size11);
    midich->labelsize(size11);
        midich->textsize(size11);
    keymode->textsize(size11);
    modepatch->labelsize(size11);
    partcontrollers->labelsize(size12);
    partkeyshift->labelsize(size);
        partkeyshift->textsize(size11);
    partkeylimit->labelsize(size);
        partkeylimit->textsize(size11);
    minkcounter->labelsize(size);
        minkcounter->textsize(size11);
    maxkcounter->labelsize(size);
        maxkcounter->textsize(size11);
    setmin->labelsize(size);
    setnorm->labelsize(size11);
    setmax->labelsize(size);
    partGroupEnable->labelsize(size11);

    partgroup->redraw();} {}
  }
  Function {~PartUI()} {} {
    code {//
    if (adnoteui)
    {
        adnoteui->ADnoteGlobalParameters->hide();
        delete adnoteui;
    }
    if (subnoteui)
    {
        //subnoteui->hide();
        delete subnoteui;
    }
    if (padnoteui)
    {
        //padnoteui->hide();
        delete padnoteui;
    }
    partgroup->hide();
    if (atSeen > 0)
        saveWin(synth, aftertouchcontrol->w(), aftertouchcontrol->h(), aftertouchcontrol->x(), aftertouchcontrol->y(), true, "Part-aftertouch");
    aftertouchcontrol->hide();
    delete aftertouchcontrol;

    if (ctlSeen)
        saveWin(synth, ctlwindow->w(), ctlwindow->h(), ctlwindow->x(), ctlwindow->y(), true, "Part-controllers");
    ctlwindow->hide();
    delete ctlwindow;

    if (ctlmidiSeen)
        saveWin(synth, ctlmidi->w(), ctlmidi->h(), ctlmidi->x(), ctlmidi->y(), ctlmidi->visible(), "Part-ctlmidi");
    ctlmidi->hide();
    lastctlW = 0;
    delete ctlmidi;

    if (kitSeen)
        saveWin(synth, instrumentkitlist->w(), instrumentkitlist->h(), instrumentkitlist->x(), instrumentkitlist->y(), true, "Part-kit");
    instrumentkitlist->hide();
    delete instrumentkitlist;

    if (fxSeen)
        saveWin(synth,  partfx->w(), partfx->h(),  partfx->x(),  partfx->y(),  partfx->visible(), "Part-effects");
    partfx->hide();
    delete partfx;

    if (editSeen)
        saveWin(synth, instrumenteditwindow->w(), instrumenteditwindow->h(), instrumenteditwindow->x(),instrumenteditwindow->y(), true, "Part-edit");
    instrumenteditwindow->hide();
    lasteditW = 0;

    delete instrumenteditwindow;} {}
  }
  decl {Part *part;} {public local
  }
  decl {BankUI *bankui;} {private local
  }
  decl {ADnoteUI *adnoteui;} {public local
  }
  decl {SUBnoteUI *subnoteui;} {public local
  }
  decl {PADnoteUI *padnoteui;} {public local
  }
  decl {PartSysEffSend *psyef[NUM_SYS_EFX];} {private local
  }
  decl {int npart;} {public local
  }
  decl {int ninseff;} {public local
  }
  decl {int lastkititem;} {public local
  }
  decl {string partname;} {public local
  }
  decl {string kitname;} {public local
  }
  decl {PartKitItem *partkititem[NUM_KIT_ITEMS];} {public local
  }
  decl {SynthEngine *synth;} {private local
  }
  decl {int *plgroup;} {private local
  }
  decl {int engine;} {private local
  }
  decl {bool partKitOn;} {public local
  }
  decl {int lastkey;} {private local
  }
  decl {int channelATselection;} {private local
  }
  decl {int keyATselection;} {private local
  }
  decl {float midiDW;} {public local
  }
  decl {float midiDH;} {public local
  }
  decl {bool ctlmidiSeen;} {private local
  }
  decl {float atDW;} {public local
  }
  decl {float atDH;} {public local
  }
  decl {int atSeen;} {private local
  }
  decl {float ctlDW;} {public local
  }
  decl {float ctlDH;} {public local
  }
  decl {int lastctlW;} {private local
  }
  decl {bool ctlSeen;} {private local
  }
  decl {float fxDW;} {public local
  }
  decl {float fxDH;} {public local
  }
  decl {bool fxSeen;} {private local
  }
  decl {float editDW;} {public local
  }
  decl {float editDH;} {public local
  }
  decl {int lasteditW;} {private local
  }
  decl {bool editSeen;} {private local
  }
  decl {float kitDW;} {public local
  }
  decl {float kitDH;} {public local
  }
  decl {bool kitSeen;} {private local
  }
  decl {int lastfxW;} {private local
  }
  decl {int lastkitW;} {private local
  }
  decl {int lastmidiW;} {private local
  }
  decl {int lastatW;} {private local
  }
}
